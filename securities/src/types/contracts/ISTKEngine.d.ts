/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class ISTKEngine extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): ISTKEngine;
  methods: {
    computeCyclicScheduleSegment(
      terms: {
        contractType: number | string;
        calendar: number | string;
        contractRole: number | string;
        dayCountConvention: number | string;
        businessDayConvention: number | string;
        endOfMonthConvention: number | string;
        redeemableByIssuer: number | string;
        currency: string;
        settlementCurrency: string;
        statusDate: number | string;
        issueDate: number | string;
        purchaseDate: number | string;
        cycleAnchorDateOfDividend: number | string;
        nominalPrice: number | string;
        notionalPrincipal: number | string;
        issuePrice: number | string;
        quantity: number | string;
        priceAtPurchaseDate: number | string;
        redemptionPrice: number | string;
        priceAtTerminationDate: number | string;
        dividendRecordPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        dividendPaymentPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        splitSettlementPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        redemptionRecordPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        redemptionPaymentPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        cycleOfDividend: {
          i: number | string;
          p: number | string;
          s: number | string;
          isSet: boolean;
        };
      },
      segmentStart: number | string,
      segmentEnd: number | string,
      eventType: number | string
    ): TransactionObject<string[]>;

    computeInitialState(terms: {
      contractType: number | string;
      calendar: number | string;
      contractRole: number | string;
      dayCountConvention: number | string;
      businessDayConvention: number | string;
      endOfMonthConvention: number | string;
      redeemableByIssuer: number | string;
      currency: string;
      settlementCurrency: string;
      statusDate: number | string;
      issueDate: number | string;
      purchaseDate: number | string;
      cycleAnchorDateOfDividend: number | string;
      nominalPrice: number | string;
      notionalPrincipal: number | string;
      issuePrice: number | string;
      quantity: number | string;
      priceAtPurchaseDate: number | string;
      redemptionPrice: number | string;
      priceAtTerminationDate: number | string;
      dividendRecordPeriod: {
        i: number | string;
        p: number | string;
        isSet: boolean;
      };
      dividendPaymentPeriod: {
        i: number | string;
        p: number | string;
        isSet: boolean;
      };
      splitSettlementPeriod: {
        i: number | string;
        p: number | string;
        isSet: boolean;
      };
      redemptionRecordPeriod: {
        i: number | string;
        p: number | string;
        isSet: boolean;
      };
      redemptionPaymentPeriod: {
        i: number | string;
        p: number | string;
        isSet: boolean;
      };
      cycleOfDividend: {
        i: number | string;
        p: number | string;
        s: number | string;
        isSet: boolean;
      };
    }): TransactionObject<{
      contractPerformance: string;
      statusDate: string;
      nonPerformingDate: string;
      maturityDate: string;
      exerciseDate: string;
      terminationDate: string;
      lastDividendFixingDate: string;
      notionalPrincipal: string;
      exerciseAmount: string;
      exerciseQuantity: string;
      quantity: string;
      couponAmountFixed: string;
      marginFactor: string;
      adjustmentFactor: string;
      dividendPaymentAmount: string;
      splitRatio: string;
    }>;

    computeNextCyclicEvent(
      terms: {
        contractType: number | string;
        calendar: number | string;
        contractRole: number | string;
        dayCountConvention: number | string;
        businessDayConvention: number | string;
        endOfMonthConvention: number | string;
        redeemableByIssuer: number | string;
        currency: string;
        settlementCurrency: string;
        statusDate: number | string;
        issueDate: number | string;
        purchaseDate: number | string;
        cycleAnchorDateOfDividend: number | string;
        nominalPrice: number | string;
        notionalPrincipal: number | string;
        issuePrice: number | string;
        quantity: number | string;
        priceAtPurchaseDate: number | string;
        redemptionPrice: number | string;
        priceAtTerminationDate: number | string;
        dividendRecordPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        dividendPaymentPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        splitSettlementPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        redemptionRecordPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        redemptionPaymentPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        cycleOfDividend: {
          i: number | string;
          p: number | string;
          s: number | string;
          isSet: boolean;
        };
      },
      lastScheduleTime: number | string,
      eventType: number | string
    ): TransactionObject<string>;

    computeNextNonCyclicEvent(
      terms: {
        contractType: number | string;
        calendar: number | string;
        contractRole: number | string;
        dayCountConvention: number | string;
        businessDayConvention: number | string;
        endOfMonthConvention: number | string;
        redeemableByIssuer: number | string;
        currency: string;
        settlementCurrency: string;
        statusDate: number | string;
        issueDate: number | string;
        purchaseDate: number | string;
        cycleAnchorDateOfDividend: number | string;
        nominalPrice: number | string;
        notionalPrincipal: number | string;
        issuePrice: number | string;
        quantity: number | string;
        priceAtPurchaseDate: number | string;
        redemptionPrice: number | string;
        priceAtTerminationDate: number | string;
        dividendRecordPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        dividendPaymentPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        splitSettlementPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        redemptionRecordPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        redemptionPaymentPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        cycleOfDividend: {
          i: number | string;
          p: number | string;
          s: number | string;
          isSet: boolean;
        };
      },
      lastNonCyclicEvent: string | number[]
    ): TransactionObject<string>;

    computeNonCyclicScheduleSegment(
      terms: {
        contractType: number | string;
        calendar: number | string;
        contractRole: number | string;
        dayCountConvention: number | string;
        businessDayConvention: number | string;
        endOfMonthConvention: number | string;
        redeemableByIssuer: number | string;
        currency: string;
        settlementCurrency: string;
        statusDate: number | string;
        issueDate: number | string;
        purchaseDate: number | string;
        cycleAnchorDateOfDividend: number | string;
        nominalPrice: number | string;
        notionalPrincipal: number | string;
        issuePrice: number | string;
        quantity: number | string;
        priceAtPurchaseDate: number | string;
        redemptionPrice: number | string;
        priceAtTerminationDate: number | string;
        dividendRecordPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        dividendPaymentPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        splitSettlementPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        redemptionRecordPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        redemptionPaymentPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        cycleOfDividend: {
          i: number | string;
          p: number | string;
          s: number | string;
          isSet: boolean;
        };
      },
      segmentStart: number | string,
      segmentEnd: number | string
    ): TransactionObject<string[]>;

    computePayoffForEvent(
      terms: {
        contractType: number | string;
        calendar: number | string;
        contractRole: number | string;
        dayCountConvention: number | string;
        businessDayConvention: number | string;
        endOfMonthConvention: number | string;
        redeemableByIssuer: number | string;
        currency: string;
        settlementCurrency: string;
        statusDate: number | string;
        issueDate: number | string;
        purchaseDate: number | string;
        cycleAnchorDateOfDividend: number | string;
        nominalPrice: number | string;
        notionalPrincipal: number | string;
        issuePrice: number | string;
        quantity: number | string;
        priceAtPurchaseDate: number | string;
        redemptionPrice: number | string;
        priceAtTerminationDate: number | string;
        dividendRecordPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        dividendPaymentPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        splitSettlementPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        redemptionRecordPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        redemptionPaymentPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        cycleOfDividend: {
          i: number | string;
          p: number | string;
          s: number | string;
          isSet: boolean;
        };
      },
      state: {
        contractPerformance: number | string;
        statusDate: number | string;
        nonPerformingDate: number | string;
        maturityDate: number | string;
        exerciseDate: number | string;
        terminationDate: number | string;
        lastDividendFixingDate: number | string;
        notionalPrincipal: number | string;
        exerciseAmount: number | string;
        exerciseQuantity: number | string;
        quantity: number | string;
        couponAmountFixed: number | string;
        marginFactor: number | string;
        adjustmentFactor: number | string;
        dividendPaymentAmount: number | string;
        splitRatio: number | string;
      },
      _event: string | number[],
      externalData: string | number[]
    ): TransactionObject<string>;

    computeStateForEvent(
      terms: {
        contractType: number | string;
        calendar: number | string;
        contractRole: number | string;
        dayCountConvention: number | string;
        businessDayConvention: number | string;
        endOfMonthConvention: number | string;
        redeemableByIssuer: number | string;
        currency: string;
        settlementCurrency: string;
        statusDate: number | string;
        issueDate: number | string;
        purchaseDate: number | string;
        cycleAnchorDateOfDividend: number | string;
        nominalPrice: number | string;
        notionalPrincipal: number | string;
        issuePrice: number | string;
        quantity: number | string;
        priceAtPurchaseDate: number | string;
        redemptionPrice: number | string;
        priceAtTerminationDate: number | string;
        dividendRecordPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        dividendPaymentPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        splitSettlementPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        redemptionRecordPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        redemptionPaymentPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        cycleOfDividend: {
          i: number | string;
          p: number | string;
          s: number | string;
          isSet: boolean;
        };
      },
      state: {
        contractPerformance: number | string;
        statusDate: number | string;
        nonPerformingDate: number | string;
        maturityDate: number | string;
        exerciseDate: number | string;
        terminationDate: number | string;
        lastDividendFixingDate: number | string;
        notionalPrincipal: number | string;
        exerciseAmount: number | string;
        exerciseQuantity: number | string;
        quantity: number | string;
        couponAmountFixed: number | string;
        marginFactor: number | string;
        adjustmentFactor: number | string;
        dividendPaymentAmount: number | string;
        splitRatio: number | string;
      },
      _event: string | number[],
      externalData: string | number[]
    ): TransactionObject<{
      contractPerformance: string;
      statusDate: string;
      nonPerformingDate: string;
      maturityDate: string;
      exerciseDate: string;
      terminationDate: string;
      lastDividendFixingDate: string;
      notionalPrincipal: string;
      exerciseAmount: string;
      exerciseQuantity: string;
      quantity: string;
      couponAmountFixed: string;
      marginFactor: string;
      adjustmentFactor: string;
      dividendPaymentAmount: string;
      splitRatio: string;
    }>;

    contractType(): TransactionObject<string>;

    isEventScheduled(
      _event: string | number[],
      terms: {
        contractType: number | string;
        calendar: number | string;
        contractRole: number | string;
        dayCountConvention: number | string;
        businessDayConvention: number | string;
        endOfMonthConvention: number | string;
        redeemableByIssuer: number | string;
        currency: string;
        settlementCurrency: string;
        statusDate: number | string;
        issueDate: number | string;
        purchaseDate: number | string;
        cycleAnchorDateOfDividend: number | string;
        nominalPrice: number | string;
        notionalPrincipal: number | string;
        issuePrice: number | string;
        quantity: number | string;
        priceAtPurchaseDate: number | string;
        redemptionPrice: number | string;
        priceAtTerminationDate: number | string;
        dividendRecordPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        dividendPaymentPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        splitSettlementPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        redemptionRecordPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        redemptionPaymentPeriod: {
          i: number | string;
          p: number | string;
          isSet: boolean;
        };
        cycleOfDividend: {
          i: number | string;
          p: number | string;
          s: number | string;
          isSet: boolean;
        };
      },
      state: {
        contractPerformance: number | string;
        statusDate: number | string;
        nonPerformingDate: number | string;
        maturityDate: number | string;
        exerciseDate: number | string;
        terminationDate: number | string;
        lastDividendFixingDate: number | string;
        notionalPrincipal: number | string;
        exerciseAmount: number | string;
        exerciseQuantity: number | string;
        quantity: number | string;
        couponAmountFixed: number | string;
        marginFactor: number | string;
        adjustmentFactor: number | string;
        dividendPaymentAmount: number | string;
        splitRatio: number | string;
      },
      underlyingState: { exerciseAmount: number | string; isSet: boolean }
    ): TransactionObject<boolean>;
  };
  events: {
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
