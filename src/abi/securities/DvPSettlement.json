{
  "address": "0x7495E7186D9E717BD53B9e55Fa0DB0F663E88972",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "settlementId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "SettlementExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "settlementId",
          "type": "uint256"
        }
      ],
      "name": "SettlementExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "settlementId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creatorToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "creatorAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "creatorBeneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterparty",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterpartyToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "counterpartyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationDate",
              "type": "uint256"
            },
            {
              "internalType": "enum DvPSettlement.SettlementStatus",
              "name": "status",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct DvPSettlement.Settlement",
          "name": "settlement",
          "type": "tuple"
        }
      ],
      "name": "SettlementInitialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creatorToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "creatorAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creatorBeneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "counterpartyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "counterpartyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationDate",
          "type": "uint256"
        }
      ],
      "name": "createSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "settlementId",
          "type": "uint256"
        }
      ],
      "name": "executeSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "settlementId",
          "type": "uint256"
        }
      ],
      "name": "expireSettlement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastSettlementId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "settlements",
      "outputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "creatorToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "creatorAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creatorBeneficiary",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "counterpartyToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "counterpartyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationDate",
          "type": "uint256"
        },
        {
          "internalType": "enum DvPSettlement.SettlementStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd5a20c75bbcc521e8fd1d07d53e576e09709ae79f1deaeaa86d99b0fc3ef0d45",
  "receipt": {
    "to": null,
    "from": "0xf6bb741F0C106a504943eaE908C3b67bcf4bF1CC",
    "contractAddress": "0x7495E7186D9E717BD53B9e55Fa0DB0F663E88972",
    "transactionIndex": 9,
    "gasUsed": "742706",
    "logsBloom": "0x
    "blockHash": "0xa18926131dcb935ce0ee62ea9e9b2ac8ebab26878959863adf808211041a509d",
    "transactionHash": "0xd5a20c75bbcc521e8fd1d07d53e576e09709ae79f1deaeaa86d99b0fc3ef0d45",
    "logs": [],
    "blockNumber": 7713022,
    "cumulativeGasUsed": "1754350",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "37e2a100a6f868553298dee57e286371",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"settlementId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"SettlementExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"settlementId\",\"type\":\"uint256\"}],\"name\":\"SettlementExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"settlementId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creatorAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creatorBeneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterpartyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"counterpartyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"enum DvPSettlement.SettlementStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct DvPSettlement.Settlement\",\"name\":\"settlement\",\"type\":\"tuple\"}],\"name\":\"SettlementInitialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creatorToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creatorAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creatorBeneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterpartyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"counterpartyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"}],\"name\":\"createSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"settlementId\",\"type\":\"uint256\"}],\"name\":\"executeSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"settlementId\",\"type\":\"uint256\"}],\"name\":\"expireSettlement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSettlementId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"settlements\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"creatorAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creatorBeneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterpartyToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"counterpartyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"enum DvPSettlement.SettlementStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract to manage any number of Delivery-versus-Payment Settlements\",\"kind\":\"dev\",\"methods\":{\"createSettlement(address,uint256,address,address,address,uint256,uint256)\":{\"details\":\"The creator must approve for this contract at least `creatorAmount` of tokens\",\"params\":{\"counterparty\":\"address of counterparty OR 0x0 for open settlement\",\"counterpartyAmount\":\"amount of counterparty's ERC20 token to be exchanged\",\"counterpartyToken\":\"address of counterparty's ERC20 token\",\"creatorAmount\":\"amount of creator's ERC20 token to be exchanged\",\"creatorToken\":\"address of creator's ERC20 token\",\"expirationDate\":\"unix timestamp in seconds\"}},\"executeSettlement(uint256)\":{\"details\":\"This function can only be successfully called by the designated counterparty unless the counterparty address is empty (0x0) in which case anyone can fulfill and execute the settlementThe counterparty must approve for this contract at least `counterpartyAmount` of tokens\",\"params\":{\"settlementId\":\"Id of the Settlement to execute\"}},\"expireSettlement(uint256)\":{\"details\":\"This function can be called by anyone since there is no other possible outcome for a created settlement that has passed the expiration date\",\"params\":{\"settlementId\":\"Id of the Settlement to expire\"}}},\"title\":\"DvPSettlement\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createSettlement(address,uint256,address,address,address,uint256,uint256)\":{\"notice\":\"Creates a new Settlement in the contract's storage and transfers creator's tokens into the contract\"},\"executeSettlement(uint256)\":{\"notice\":\"Executes an existing Settlement with the sender as the counterparty\"},\"expireSettlement(uint256)\":{\"notice\":\"When called after a given settlement expires, it refunds tokens to the creator\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/misc/DVP/DvPSettlement.sol\":\"DvPSettlement\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"contracts/misc/DVP/DvPSettlement.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n/**\\n * @title DvPSettlement\\n * @dev Contract to manage any number of Delivery-versus-Payment Settlements\\n */\\ncontract DvPSettlement {\\n\\n    enum SettlementStatus { NOT_EXISTS, INITIALIZED, EXECUTED, EXPIRED }\\n\\n    struct Settlement {\\n        address creator;\\n        address creatorToken;\\n        uint256 creatorAmount;\\n        address creatorBeneficiary;\\n        address counterparty;\\n        address counterpartyToken;\\n        uint256 counterpartyAmount;\\n        uint256 expirationDate;\\n        SettlementStatus status;\\n    }\\n\\n    // stores the settlementId of the last created Settlement\\n    uint256 public lastSettlementId;\\n    // SettlementId => Settlement\\n    mapping (uint256 => Settlement) public settlements;\\n\\n    event SettlementInitialized(uint256 indexed settlementId, Settlement settlement);\\n    event SettlementExecuted(uint256 indexed settlementId, address indexed executor);\\n    event SettlementExpired(uint256 indexed settlementId);\\n\\n\\n    /**\\n     * @notice Creates a new Settlement in the contract's storage and transfers creator's tokens into the contract\\n     * @dev The creator must approve for this contract at least `creatorAmount` of tokens\\n     * @param creatorToken address of creator's ERC20 token\\n     * @param creatorAmount amount of creator's ERC20 token to be exchanged\\n     * @param counterparty address of counterparty OR 0x0 for open settlement\\n     * @param counterpartyToken address of counterparty's ERC20 token\\n     * @param counterpartyAmount amount of counterparty's ERC20 token to be exchanged\\n     * @param expirationDate unix timestamp in seconds\\n     */\\n    function createSettlement(\\n        address creatorToken,\\n        uint256 creatorAmount,\\n        address creatorBeneficiary,\\n        address counterparty,\\n        address counterpartyToken,\\n        uint256 counterpartyAmount,\\n        uint256 expirationDate\\n    )\\n        external\\n    {\\n        require(\\n            expirationDate > block.timestamp,\\n            \\\"DvPSettlement.createSettlement: INVALID_EXPIRATION_DATE\\\"\\n        );\\n        require(\\n            lastSettlementId < type(uint256).max,\\n            \\\"DvPSettlement.createSettlement: INVALID_SETTLEMENT_ID\\\"\\n        );\\n\\n        lastSettlementId++;\\n\\n        Settlement storage settlement = settlements[lastSettlementId];\\n        settlement.creator = msg.sender;\\n        settlement.creatorToken = creatorToken;\\n        settlement.creatorAmount = creatorAmount;\\n        settlement.creatorBeneficiary = creatorBeneficiary;\\n        settlement.counterparty = counterparty;\\n        settlement.counterpartyToken = counterpartyToken;\\n        settlement.counterpartyAmount = counterpartyAmount;\\n        settlement.expirationDate = expirationDate;\\n        settlement.status = SettlementStatus.INITIALIZED;\\n\\n        require(\\n            IERC20(settlement.creatorToken).transferFrom(settlement.creator, address(this), settlement.creatorAmount),\\n            \\\"DvPSettlement.createSettlement: TRANFER_FAILED\\\"\\n        );\\n\\n        emit SettlementInitialized(lastSettlementId, settlement);\\n    }\\n\\n\\n    /**\\n     * @notice Executes an existing Settlement with the sender as the counterparty\\n     * @dev This function can only be successfully called by the designated counterparty unless\\n     * the counterparty address is empty (0x0) in which case anyone can fulfill and execute the settlement\\n     * @dev The counterparty must approve for this contract at least `counterpartyAmount` of tokens\\n     * @param settlementId Id of the Settlement to execute\\n     */\\n    function executeSettlement(uint256 settlementId) external {\\n        Settlement storage settlement = settlements[settlementId];\\n\\n        require(\\n            settlement.status == SettlementStatus.INITIALIZED,\\n            \\\"DvPSettlement.executeSettlement: SETTLEMENT_NOT_INITIALIZED\\\"\\n        );\\n        require(\\n            settlement.expirationDate > block.timestamp,\\n            \\\"DvPSettlement.executeSettlement: SETTLEMENT_EXPIRED\\\"\\n        );\\n        require(\\n            // if empty (0x0) counterparty address, consider it an \\\"open\\\" settlement\\n            settlement.counterparty == address(0) || settlement.counterparty == msg.sender,\\n            \\\"DvPSettlement.executeSettlement: UNAUTHORIZED_SENDER\\\"\\n        );\\n\\n        // if empty (0x0) creatorBeneficiary address, send funds to creator\\n        address creatorReveiver = (settlement.creatorBeneficiary == address(0))\\n            ? settlement.creator\\n            : settlement.creatorBeneficiary;\\n\\n        settlement.status = SettlementStatus.EXECUTED;\\n\\n        // transfer both tokens\\n        require(\\n            IERC20(settlement.counterpartyToken).transferFrom(msg.sender, creatorReveiver, settlement.counterpartyAmount)\\n            && IERC20(settlement.creatorToken).transfer(msg.sender, settlement.creatorAmount),\\n            \\\"DvPSettlement.executeSettlement: TRANSFER_FAILED\\\"\\n        );\\n\\n        emit SettlementExecuted(settlementId, msg.sender);\\n    }\\n\\n    /**\\n     * @notice When called after a given settlement expires, it refunds tokens to the creator\\n     * @dev This function can be called by anyone since there is no other possible outcome for\\n     * a created settlement that has passed the expiration date\\n     * @param settlementId Id of the Settlement to expire\\n     */\\n    function expireSettlement(uint256 settlementId) external {\\n        Settlement storage settlement = settlements[settlementId];\\n\\n        require(\\n            settlement.status == SettlementStatus.INITIALIZED,\\n            \\\"DvPSettlement.expireSettlement: SETTLEMENT_NOT_INITIALIZED\\\"\\n        );\\n        require(\\n            settlement.expirationDate < block.timestamp,\\n            \\\"DvPSettlement.expireSettlement: SETTLEMENT_NOT_YET_EXPIRED\\\"\\n        );\\n\\n        settlement.status = SettlementStatus.EXPIRED;\\n\\n        // refund creator of settlement\\n        require(\\n            IERC20(settlement.creatorToken).transfer(settlement.creator, settlement.creatorAmount),\\n            \\\"DvPSettlement.expireSettlement: TRANSFER_FAILED\\\"\\n        );\\n        \\n        emit SettlementExpired(settlementId);\\n    }\\n}\\n\",\"keccak256\":\"0x3768f0b000bd9f72964225a8c323c8de1f6555f79215e3e064f59c807fccaba3\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610c79806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806308df7dc81461005c57806322761cca1461008d57806339598fae146100a257806353fd599d146100b757806383c0b8ac146100ca575b600080fd5b61006f61006a366004610759565b6100dd565b604051610084999897969594939291906107c9565b60405180910390f35b6100a061009b366004610759565b61013e565b005b6100aa610292565b6040516100849190610c08565b6100a06100c53660046106c2565b610298565b6100a06100d8366004610759565b61044e565b60016020819052600091825260409091208054918101546002820154600383015460048401546005850154600686015460078701546008909701546001600160a01b0398891698968716979596948516959385169490921692909160ff1689565b600081815260016020819052604090912090600882015460ff16600381111561016357fe5b146101895760405162461bcd60e51b815260040161018090610888565b60405180910390fd5b428160070154106101ac5760405162461bcd60e51b815260040161018090610926565b60088101805460ff1916600317905560018101548154600283015460405163a9059cbb60e01b81526001600160a01b039384169363a9059cbb936101f5939116916004016107b0565b602060405180830381600087803b15801561020f57600080fd5b505af1158015610223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102479190610732565b6102635760405162461bcd60e51b815260040161018090610a1a565b60405182907fb225d3ed70d8e9aba9eff208c9b1d055ec421670b5037f3f1b3b3a7bd923efac90600090a25050565b60005481565b4281116102b75760405162461bcd60e51b81526004016101809061082b565b600019600054106102da5760405162461bcd60e51b815260040161018090610983565b600080546001908101808355825260208190526040918290208054336001600160a01b031991821617808355828401805483166001600160a01b038e81169190911791829055600285018d905560038501805485168d83161790556004808601805486168d84161790556005860180549095168b831617909455600685018990556007850188905560088501805460ff191690961790955594516323b872dd60e01b815292948416936323b872dd9361039c93919092169130918d910161078c565b602060405180830381600087803b1580156103b657600080fd5b505af11580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ee9190610732565b61040a5760405162461bcd60e51b815260040161018090610a69565b6000547fdfaefcb59efc7722ebdeb8d1ec6d1c3bb1c07a742e178a458fa00a45203cfbe28260405161043c9190610b40565b60405180910390a25050505050505050565b600081815260016020819052604090912090600882015460ff16600381111561047357fe5b146104905760405162461bcd60e51b815260040161018090610af5565b428160070154116104b35760405162461bcd60e51b8152600401610180906108e5565b60048101546001600160a01b031615806104d9575060048101546001600160a01b031633145b6104f55760405162461bcd60e51b8152600401610180906109d8565b60038101546000906001600160a01b03161561051e5760038201546001600160a01b031661052a565b81546001600160a01b03165b60088301805460ff19166002179055600583015460068401546040516323b872dd60e01b81529293506001600160a01b03909116916323b872dd91610575913391869160040161078c565b602060405180830381600087803b15801561058f57600080fd5b505af11580156105a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c79190610732565b801561065857506001820154600283015460405163a9059cbb60e01b81526001600160a01b039092169163a9059cbb91610606913391906004016107b0565b602060405180830381600087803b15801561062057600080fd5b505af1158015610634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106589190610732565b6106745760405162461bcd60e51b815260040161018090610ab7565b604051339084907ff059ff22963b773739a912cc5c0f2f358be1a072c66ba18e2c31e503fd01219590600090a3505050565b80356001600160a01b03811681146106bd57600080fd5b919050565b600080600080600080600060e0888a0312156106dc578283fd5b6106e5886106a6565b9650602088013595506106fa604089016106a6565b9450610708606089016106a6565b9350610716608089016106a6565b925060a0880135915060c0880135905092959891949750929550565b600060208284031215610743578081fd5b81518015158114610752578182fd5b9392505050565b60006020828403121561076a578081fd5b5035919050565b6001600160a01b03169052565b6004811061078857fe5b9052565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b038a8116825289811660208301526040820189905287811660608301528681166080830152851660a082015260c0810184905260e08101839052610120810161081d61010083018461077e565b9a9950505050505050505050565b60208082526037908201527f447650536574746c656d656e742e637265617465536574746c656d656e743a2060408201527f494e56414c49445f45585049524154494f4e5f44415445000000000000000000606082015260800190565b6020808252603a908201527f447650536574746c656d656e742e657870697265536574746c656d656e743a2060408201527f534554544c454d454e545f4e4f545f494e495449414c495a4544000000000000606082015260800190565b6020808252603390820152600080516020610c248339815191526040820152720814d1551513115351539517d1561412549151606a1b606082015260800190565b6020808252603a908201527f447650536574746c656d656e742e657870697265536574746c656d656e743a2060408201527f534554544c454d454e545f4e4f545f5945545f45585049524544000000000000606082015260800190565b60208082526035908201527f447650536574746c656d656e742e637265617465536574746c656d656e743a206040820152741253959053125117d4d1551513115351539517d251605a1b606082015260800190565b6020808252603490820152600080516020610c24833981519152604082015273102aa720aaaa2427a924ad22a22fa9a2a72222a960611b606082015260800190565b6020808252602f908201527f447650536574746c656d656e742e657870697265536574746c656d656e743a2060408201526e1514905394d1915497d19052531151608a1b606082015260800190565b6020808252602e908201527f447650536574746c656d656e742e637265617465536574746c656d656e743a2060408201526d1514905391915497d1905253115160921b606082015260800190565b6020808252603090820152600080516020610c2483398151915260408201526f081514905394d1915497d1905253115160821b606082015260800190565b6020808252603b90820152600080516020610c2483398151915260408201527f20534554544c454d454e545f4e4f545f494e495449414c495a45440000000000606082015260800190565b600061012082019050610b5c82610b578554610c11565b610771565b610b696001840154610c11565b610b766020840182610771565b5060028301546040830152610b8e6003840154610c11565b610b9b6060840182610771565b50610ba96004840154610c11565b610bb66080840182610771565b50610bc46005840154610c11565b610bd160a0840182610771565b50600683015460c0830152600783015460e0830152610bf36008840154610c1d565b610c0161010084018261077e565b5092915050565b90815260200190565b6001600160a01b031690565b60ff169056fe447650536574746c656d656e742e65786563757465536574746c656d656e743aa2646970667358221220fcf7ea44d1d0098d5e5cb9f7500704f20a6bf6fee43d1a468ba449bca8f67ee864736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c806308df7dc81461005c57806322761cca1461008d57806339598fae146100a257806353fd599d146100b757806383c0b8ac146100ca575b600080fd5b61006f61006a366004610759565b6100dd565b604051610084999897969594939291906107c9565b60405180910390f35b6100a061009b366004610759565b61013e565b005b6100aa610292565b6040516100849190610c08565b6100a06100c53660046106c2565b610298565b6100a06100d8366004610759565b61044e565b60016020819052600091825260409091208054918101546002820154600383015460048401546005850154600686015460078701546008909701546001600160a01b0398891698968716979596948516959385169490921692909160ff1689565b600081815260016020819052604090912090600882015460ff16600381111561016357fe5b146101895760405162461bcd60e51b815260040161018090610888565b60405180910390fd5b428160070154106101ac5760405162461bcd60e51b815260040161018090610926565b60088101805460ff1916600317905560018101548154600283015460405163a9059cbb60e01b81526001600160a01b039384169363a9059cbb936101f5939116916004016107b0565b602060405180830381600087803b15801561020f57600080fd5b505af1158015610223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102479190610732565b6102635760405162461bcd60e51b815260040161018090610a1a565b60405182907fb225d3ed70d8e9aba9eff208c9b1d055ec421670b5037f3f1b3b3a7bd923efac90600090a25050565b60005481565b4281116102b75760405162461bcd60e51b81526004016101809061082b565b600019600054106102da5760405162461bcd60e51b815260040161018090610983565b600080546001908101808355825260208190526040918290208054336001600160a01b031991821617808355828401805483166001600160a01b038e81169190911791829055600285018d905560038501805485168d83161790556004808601805486168d84161790556005860180549095168b831617909455600685018990556007850188905560088501805460ff191690961790955594516323b872dd60e01b815292948416936323b872dd9361039c93919092169130918d910161078c565b602060405180830381600087803b1580156103b657600080fd5b505af11580156103ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ee9190610732565b61040a5760405162461bcd60e51b815260040161018090610a69565b6000547fdfaefcb59efc7722ebdeb8d1ec6d1c3bb1c07a742e178a458fa00a45203cfbe28260405161043c9190610b40565b60405180910390a25050505050505050565b600081815260016020819052604090912090600882015460ff16600381111561047357fe5b146104905760405162461bcd60e51b815260040161018090610af5565b428160070154116104b35760405162461bcd60e51b8152600401610180906108e5565b60048101546001600160a01b031615806104d9575060048101546001600160a01b031633145b6104f55760405162461bcd60e51b8152600401610180906109d8565b60038101546000906001600160a01b03161561051e5760038201546001600160a01b031661052a565b81546001600160a01b03165b60088301805460ff19166002179055600583015460068401546040516323b872dd60e01b81529293506001600160a01b03909116916323b872dd91610575913391869160040161078c565b602060405180830381600087803b15801561058f57600080fd5b505af11580156105a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c79190610732565b801561065857506001820154600283015460405163a9059cbb60e01b81526001600160a01b039092169163a9059cbb91610606913391906004016107b0565b602060405180830381600087803b15801561062057600080fd5b505af1158015610634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106589190610732565b6106745760405162461bcd60e51b815260040161018090610ab7565b604051339084907ff059ff22963b773739a912cc5c0f2f358be1a072c66ba18e2c31e503fd01219590600090a3505050565b80356001600160a01b03811681146106bd57600080fd5b919050565b600080600080600080600060e0888a0312156106dc578283fd5b6106e5886106a6565b9650602088013595506106fa604089016106a6565b9450610708606089016106a6565b9350610716608089016106a6565b925060a0880135915060c0880135905092959891949750929550565b600060208284031215610743578081fd5b81518015158114610752578182fd5b9392505050565b60006020828403121561076a578081fd5b5035919050565b6001600160a01b03169052565b6004811061078857fe5b9052565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b038a8116825289811660208301526040820189905287811660608301528681166080830152851660a082015260c0810184905260e08101839052610120810161081d61010083018461077e565b9a9950505050505050505050565b60208082526037908201527f447650536574746c656d656e742e637265617465536574746c656d656e743a2060408201527f494e56414c49445f45585049524154494f4e5f44415445000000000000000000606082015260800190565b6020808252603a908201527f447650536574746c656d656e742e657870697265536574746c656d656e743a2060408201527f534554544c454d454e545f4e4f545f494e495449414c495a4544000000000000606082015260800190565b6020808252603390820152600080516020610c248339815191526040820152720814d1551513115351539517d1561412549151606a1b606082015260800190565b6020808252603a908201527f447650536574746c656d656e742e657870697265536574746c656d656e743a2060408201527f534554544c454d454e545f4e4f545f5945545f45585049524544000000000000606082015260800190565b60208082526035908201527f447650536574746c656d656e742e637265617465536574746c656d656e743a206040820152741253959053125117d4d1551513115351539517d251605a1b606082015260800190565b6020808252603490820152600080516020610c24833981519152604082015273102aa720aaaa2427a924ad22a22fa9a2a72222a960611b606082015260800190565b6020808252602f908201527f447650536574746c656d656e742e657870697265536574746c656d656e743a2060408201526e1514905394d1915497d19052531151608a1b606082015260800190565b6020808252602e908201527f447650536574746c656d656e742e637265617465536574746c656d656e743a2060408201526d1514905391915497d1905253115160921b606082015260800190565b6020808252603090820152600080516020610c2483398151915260408201526f081514905394d1915497d1905253115160821b606082015260800190565b6020808252603b90820152600080516020610c2483398151915260408201527f20534554544c454d454e545f4e4f545f494e495449414c495a45440000000000606082015260800190565b600061012082019050610b5c82610b578554610c11565b610771565b610b696001840154610c11565b610b766020840182610771565b5060028301546040830152610b8e6003840154610c11565b610b9b6060840182610771565b50610ba96004840154610c11565b610bb66080840182610771565b50610bc46005840154610c11565b610bd160a0840182610771565b50600683015460c0830152600783015460e0830152610bf36008840154610c1d565b610c0161010084018261077e565b5092915050565b90815260200190565b6001600160a01b031690565b60ff169056fe447650536574746c656d656e742e65786563757465536574746c656d656e743aa2646970667358221220fcf7ea44d1d0098d5e5cb9f7500704f20a6bf6fee43d1a468ba449bca8f67ee864736f6c63430007040033",
  "devdoc": {
    "details": "Contract to manage any number of Delivery-versus-Payment Settlements",
    "kind": "dev",
    "methods": {
      "createSettlement(address,uint256,address,address,address,uint256,uint256)": {
        "details": "The creator must approve for this contract at least `creatorAmount` of tokens",
        "params": {
          "counterparty": "address of counterparty OR 0x0 for open settlement",
          "counterpartyAmount": "amount of counterparty's ERC20 token to be exchanged",
          "counterpartyToken": "address of counterparty's ERC20 token",
          "creatorAmount": "amount of creator's ERC20 token to be exchanged",
          "creatorToken": "address of creator's ERC20 token",
          "expirationDate": "unix timestamp in seconds"
        }
      },
      "executeSettlement(uint256)": {
        "details": "This function can only be successfully called by the designated counterparty unless the counterparty address is empty (0x0) in which case anyone can fulfill and execute the settlementThe counterparty must approve for this contract at least `counterpartyAmount` of tokens",
        "params": {
          "settlementId": "Id of the Settlement to execute"
        }
      },
      "expireSettlement(uint256)": {
        "details": "This function can be called by anyone since there is no other possible outcome for a created settlement that has passed the expiration date",
        "params": {
          "settlementId": "Id of the Settlement to expire"
        }
      }
    },
    "title": "DvPSettlement",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createSettlement(address,uint256,address,address,address,uint256,uint256)": {
        "notice": "Creates a new Settlement in the contract's storage and transfers creator's tokens into the contract"
      },
      "executeSettlement(uint256)": {
        "notice": "Executes an existing Settlement with the sender as the counterparty"
      },
      "expireSettlement(uint256)": {
        "notice": "When called after a given settlement expires, it refunds tokens to the creator"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 52335,
        "contract": "contracts/misc/DVP/DvPSettlement.sol:DvPSettlement",
        "label": "lastSettlementId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 52339,
        "contract": "contracts/misc/DVP/DvPSettlement.sol:DvPSettlement",
        "label": "settlements",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Settlement)52333_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_enum(SettlementStatus)52314": {
        "encoding": "inplace",
        "label": "enum DvPSettlement.SettlementStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Settlement)52333_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DvPSettlement.Settlement)",
        "numberOfBytes": "32",
        "value": "t_struct(Settlement)52333_storage"
      },
      "t_struct(Settlement)52333_storage": {
        "encoding": "inplace",
        "label": "struct DvPSettlement.Settlement",
        "members": [
          {
            "astId": 52316,
            "contract": "contracts/misc/DVP/DvPSettlement.sol:DvPSettlement",
            "label": "creator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 52318,
            "contract": "contracts/misc/DVP/DvPSettlement.sol:DvPSettlement",
            "label": "creatorToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 52320,
            "contract": "contracts/misc/DVP/DvPSettlement.sol:DvPSettlement",
            "label": "creatorAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 52322,
            "contract": "contracts/misc/DVP/DvPSettlement.sol:DvPSettlement",
            "label": "creatorBeneficiary",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 52324,
            "contract": "contracts/misc/DVP/DvPSettlement.sol:DvPSettlement",
            "label": "counterparty",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 52326,
            "contract": "contracts/misc/DVP/DvPSettlement.sol:DvPSettlement",
            "label": "counterpartyToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 52328,
            "contract": "contracts/misc/DVP/DvPSettlement.sol:DvPSettlement",
            "label": "counterpartyAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 52330,
            "contract": "contracts/misc/DVP/DvPSettlement.sol:DvPSettlement",
            "label": "expirationDate",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 52332,
            "contract": "contracts/misc/DVP/DvPSettlement.sol:DvPSettlement",
            "label": "status",
            "offset": 0,
            "slot": "8",
            "type": "t_enum(SettlementStatus)52314"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}