{
  "address": "0x9EDFa908558637B7a55791178B75d20382213124",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAssetRegistry",
          "name": "assetRegistry",
          "type": "address"
        },
        {
          "internalType": "contract IObserverOracleProxy",
          "name": "defaultOracleProxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum ContractType",
          "name": "contractType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        }
      ],
      "name": "InitializedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "scheduleTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "payoff",
          "type": "int256"
        }
      ],
      "name": "ProgressedAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "statusMessage",
          "type": "bytes32"
        }
      ],
      "name": "Status",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "assetRegistry",
      "outputs": [
        {
          "internalType": "contract IAssetRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "object",
          "type": "bytes32"
        }
      ],
      "name": "decodeCollateralObject",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        }
      ],
      "name": "decodeEvent",
      "outputs": [
        {
          "internalType": "enum EventType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultOracleProxy",
      "outputs": [
        {
          "internalType": "contract IObserverOracleProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "encodeCollateralAsObject",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "scheduleTime",
          "type": "uint256"
        }
      ],
      "name": "encodeEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "getEpochOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum FeeBasis",
              "name": "feeBasis",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractPerformance",
              "name": "creditEventTypeCovered",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "purchaseDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfFee",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeAccrued",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "feeRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "priceAtPurchaseDate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "coverageOfCreditEnhancement",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfFee",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "object",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "object2",
                  "type": "bytes32"
                },
                {
                  "internalType": "enum ContractReferenceType",
                  "name": "_type",
                  "type": "uint8"
                },
                {
                  "internalType": "enum ContractReferenceRole",
                  "name": "role",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ContractReference",
              "name": "contractReference_1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "object",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "object2",
                  "type": "bytes32"
                },
                {
                  "internalType": "enum ContractReferenceType",
                  "name": "_type",
                  "type": "uint8"
                },
                {
                  "internalType": "enum ContractReferenceRole",
                  "name": "role",
                  "type": "uint8"
                }
              ],
              "internalType": "struct ContractReference",
              "name": "contractReference_2",
              "type": "tuple"
            }
          ],
          "internalType": "struct CEGTerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "schedule",
          "type": "bytes32[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "creatorObligor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creatorBeneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterpartyObligor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterpartyBeneficiary",
              "type": "address"
            }
          ],
          "internalType": "struct AssetOwnership",
          "name": "ownership",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "engine",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "extension",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "progress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        }
      ],
      "name": "progressWith",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum BusinessDayConvention",
          "name": "convention",
          "type": "uint8"
        },
        {
          "internalType": "enum Calendar",
          "name": "calendar",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "shiftCalcTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum BusinessDayConvention",
          "name": "convention",
          "type": "uint8"
        },
        {
          "internalType": "enum Calendar",
          "name": "calendar",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "shiftEventTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf150d70de6293a60e7559efeb6b03fd89deb3efdaad6d2fc8cbb4c28a98c8924",
  "receipt": {
    "to": null,
    "from": "0xf6bb741F0C106a504943eaE908C3b67bcf4bF1CC",
    "contractAddress": "0x9EDFa908558637B7a55791178B75d20382213124",
    "transactionIndex": 12,
    "gasUsed": "3528845",
    "logsBloom": "0x
    "blockHash": "0xdafa325a373f229ad9e11dc7e488586593b8782b5f4e11aacbe25d80e4c49bb6",
    "transactionHash": "0xf150d70de6293a60e7559efeb6b03fd89deb3efdaad6d2fc8cbb4c28a98c8924",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 7713016,
        "transactionHash": "0xf150d70de6293a60e7559efeb6b03fd89deb3efdaad6d2fc8cbb4c28a98c8924",
        "address": "0x9EDFa908558637B7a55791178B75d20382213124",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f6bb741f0c106a504943eae908c3b67bcf4bf1cc"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0xdafa325a373f229ad9e11dc7e488586593b8782b5f4e11aacbe25d80e4c49bb6"
      }
    ],
    "blockNumber": 7713016,
    "cumulativeGasUsed": "9203745",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2A1Ae664BBd2Bbc2eA8f90e584389960A9D26680",
    "0xB4e34F7614521204764CBaD892037B1574149eCb"
  ],
  "solcInputHash": "37e2a100a6f868553298dee57e286371",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAssetRegistry\",\"name\":\"assetRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IObserverOracleProxy\",\"name\":\"defaultOracleProxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"}],\"name\":\"InitializedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scheduleTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"payoff\",\"type\":\"int256\"}],\"name\":\"ProgressedAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"statusMessage\",\"type\":\"bytes32\"}],\"name\":\"Status\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"assetRegistry\",\"outputs\":[{\"internalType\":\"contract IAssetRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"object\",\"type\":\"bytes32\"}],\"name\":\"decodeCollateralObject\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"}],\"name\":\"decodeEvent\",\"outputs\":[{\"internalType\":\"enum EventType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOracleProxy\",\"outputs\":[{\"internalType\":\"contract IObserverOracleProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"encodeCollateralAsObject\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"scheduleTime\",\"type\":\"uint256\"}],\"name\":\"encodeEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"getEpochOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum FeeBasis\",\"name\":\"feeBasis\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractPerformance\",\"name\":\"creditEventTypeCovered\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeAccrued\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"feeRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"priceAtPurchaseDate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"coverageOfCreditEnhancement\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfFee\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"object\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"object2\",\"type\":\"bytes32\"},{\"internalType\":\"enum ContractReferenceType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractReferenceRole\",\"name\":\"role\",\"type\":\"uint8\"}],\"internalType\":\"struct ContractReference\",\"name\":\"contractReference_1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"object\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"object2\",\"type\":\"bytes32\"},{\"internalType\":\"enum ContractReferenceType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractReferenceRole\",\"name\":\"role\",\"type\":\"uint8\"}],\"internalType\":\"struct ContractReference\",\"name\":\"contractReference_2\",\"type\":\"tuple\"}],\"internalType\":\"struct CEGTerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"schedule\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"creatorObligor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorBeneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterpartyObligor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterpartyBeneficiary\",\"type\":\"address\"}],\"internalType\":\"struct AssetOwnership\",\"name\":\"ownership\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"engine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"progress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"}],\"name\":\"progressWith\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"convention\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"shiftCalcTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"convention\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"shiftEventTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"initialize((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(bytes32,bytes32,uint8,uint8),(bytes32,bytes32,uint8,uint8)),bytes32[],(address,address,address,address),address,address,address)\":{\"params\":{\"admin\":\"address of the admin of the asset (optional)\",\"engine\":\"address of the ACTUS engine used for the spec. ContractType\",\"extension\":\"address of the extension (optional)\",\"ownership\":\"ownership of the asset\",\"schedule\":\"schedule of the asset\",\"terms\":\"asset specific terms\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"progress(bytes32)\":{\"details\":\"Emits ProgressedAsset if the state of the asset was updated.\",\"params\":{\"assetId\":\"id of the asset\"}},\"progressWith(bytes32,bytes32)\":{\"details\":\"Emits ProgressedAsset if the state of the asset was updated.\",\"params\":{\"_event\":\"the unscheduled event\",\"assetId\":\"id of the asset\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"CEGActor\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getEpochOffset(uint8)\":{\"notice\":\"Returns the epoch offset for a given event type to determine the correct order of events if multiple events have the same timestamp\"},\"initialize((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(bytes32,bytes32,uint8,uint8),(bytes32,bytes32,uint8,uint8)),bytes32[],(address,address,address,address),address,address,address)\":{\"notice\":\"Derives initial state of the asset terms and stores together with terms, schedule, ownership, engine, admin of the asset in the contract types specific AssetRegistry.\"},\"progress(bytes32)\":{\"notice\":\"Proceeds with the next state of the asset based on the terms, the last state, market object data and the settlement status of current obligation, derived from either a prev. pending event, an event generated based on the current state of an underlying asset or the assets schedule.\"},\"progressWith(bytes32,bytes32)\":{\"notice\":\"Proceeds with the next state of the asset based on the terms, the last state, market object data and the settlement status of current obligation, derived from a provided (unscheduled) event Reverts if the provided event violates the order of events.\"},\"shiftCalcTime(uint256,uint8,uint8,uint256)\":{\"notice\":\"Used in POFs and STFs for DCFs. No shifting is applied if a Calc/Shift instead of Shift/Calc BDC is provided.\"}},\"notice\":\"TODO\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Core/CEG/CEGActor.sol\":\"CEGActor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x46d2453e9db55eae25c9abdae2c42229086c54f1a6a247e8ce32658bb785f6ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n        // for accounts without code, i.e. `keccak256('')`\\n        bytes32 codehash;\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { codehash := extcodehash(account) }\\n        return (codehash != accountHash && codehash != 0x0);\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x698f929f1097637d051976b322a2d532c27df022b09010e8d091e2888a5ebdf8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1153f6dd334c01566417b8c551122450542a2b75a2bbb379d59a8c320ed6da28\",\"license\":\"MIT\"},\"contracts/ACTUS/Core/ACTUSConstants.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @title ACTUSConstants\\n * @notice Contains all type definitions for ACTUS. See ACTUS-Dictionary for definitions\\n */\\ncontract ACTUSConstants {\\n\\n    // constants used throughout\\n    uint256 constant public PRECISION = 18;\\n    int256 constant public ONE_POINT_ZERO = 1 * 10 ** 18;\\n    uint256 constant public MAX_CYCLE_SIZE = 120;\\n    uint256 constant public MAX_EVENT_SCHEDULE_SIZE = 120;\\n}\\n\",\"keccak256\":\"0x1568471e72800002ad945bf084f96368f5dfb597105f2e3f11534905abda9495\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/ACTUSTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n/**\\n * Commit: https://github.com/atpar/actus-dictionary/commit/b85b9b378967de6bfc4d8b6687b520c48bce9890\\n * Date: 2020-10-06\\n */\\n\\n// IPS\\nenum P {D, W, M, Q, H, Y} // P=[D=Days, W=Weeks, M=Months, Q=Quarters, H=Halfyear, Y=Year]\\nenum S {LONG, SHORT} // S=[+=long stub,- short stub, {} if S empty then - for short stub]\\nstruct IPS {\\n    uint256 i; // I=Integer\\n    P p;\\n    S s;\\n    bool isSet;\\n}\\n\\nstruct IP {\\n    uint256 i;\\n    P p;\\n    bool isSet;\\n}\\n\\n// Number of enum options should be limited to 256 (8 bits) such that 255 enums can be packed fit into 256 bits (bytes32)\\nenum BusinessDayConvention {NOS, SCF, SCMF, CSF, CSMF, SCP, SCMP, CSP, CSMP}\\nenum Calendar {NC, MF}\\nenum ContractPerformance {PF, DL, DQ, DF, MD, TD}\\nenum ContractReferenceType {CNT, CID, MOC, EID, CST}\\nenum ContractReferenceRole {UDL, FIL, SEL, COVE, COVI}\\nenum ContractRole {RPA, RPL, RFL, PFL, RF, PF, BUY, SEL, COL, CNO, UDL, UDLP, UDLM}\\nenum ContractType {PAM, ANN, NAM, LAM, LAX, CLM, UMP, CSH, STK, COM, SWAPS, SWPPV, FXOUT, CAPFL, FUTUR, OPTNS, CEG, CEC, CERTF, COLLA}\\nenum CouponType {NOC, FIX, FCN, PRF}\\nenum CyclePointOfInterestPayment {B, E}\\nenum CyclePointOfRateReset {B, E}\\nenum DayCountConvention {AA, A360, A365, _30E360ISDA, _30E360, _28E336, ONE, OBYT, HRSAA, MINAA, SECAA}\\nenum EndOfMonthConvention {SD, EOM}\\n//               0   1    2    3    4   5   6   7   8   9  10    11  12   13   14   15   16   17   18   19   20   21   22   23   24   25  26  27    28   29  30  31  32  33\\nenum EventType {NE, CE, ISS, IED, PRD, FP, PR, PD, PY, PP, IP, IPCI, RRF, RR, DIF, DIX, DIP, COF, COP, REF, REX, REP, SPF, SPS, EXO, EXE, ST, SC, IPCB, PRF, MC, TD, MD, AD}\\nenum FeeBasis {A, N}\\n// enum GuaranteedExposure {NO, NI, MV} // not implemented\\n// enum InterestCalculationBase {NT, NTIED, NTL} // not implemented\\n// enum PenaltyType {O, A, N, I}\\n// enum PrepaymentEffect {N, A, M} // not implemented\\nenum RedeemableByIssuer {Y, N}\\nenum ScalingEffect {_000, I00, _0N0, IN0}\\n// enum Seniority {S, J} // not implemented\\n\\nstruct ContractReference {\\n    bytes32 object;\\n    bytes32 object2; // workaround for solc bug (replace object and object2 with single bytes attribute)\\n    ContractReferenceType _type;\\n    ContractReferenceRole role;\\n}\\n\\nstruct UnderlyingState {\\n    int256 exerciseAmount;\\n    bool isSet;\\n}\\n\\nstruct ANNState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n    int256 nextPrincipalRedemptionPayment;\\n}\\n\\nstruct CECState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n\\n    int256 feeAccrued;\\n    int256 exerciseAmount;\\n}\\n\\nstruct CEGState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    int256 feeAccrued;\\n    int256 exerciseAmount;\\n}\\n\\nstruct CERTFState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastCouponFixingDate;\\n\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n}\\n\\nstruct PAMState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n}\\n\\nstruct STKState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastDividendFixingDate;\\n    // uint256 dividendFixingDate; // not implemented\\n    // uint256 dividendExDate; // not implemented\\n    // uint256 dividendPaymentDate; // not implemented\\n    // uint256 splitSettlementDate; // not implemented\\n    // uint256 redemptionExDate; // not implemented\\n    // uint256 redemptionPaymentDate; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n    int256 dividendPaymentAmount;\\n    int256 splitRatio;\\n}\\n\\nstruct COLLAState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    int256 accruedInterest;\\n    int256 nominalInterestRate;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n}\\n\\nstruct ANNTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // InterestCalculationBase interestCalculationBase; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 ammortizationDate; // not implemented\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    // uint256 cycleAnchorDateOfInterestCalculationBase; // not implemented\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    uint256 cycleAnchorDateOfPrincipalRedemption;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 nextPrincipalRedemptionPayment;\\n    // int256 coverageOfCreditEnhancement;\\n    // int256 interestCalculationBaseAmount; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    IPS cycleOfPrincipalRedemption;\\n    // IPS cycleOfOptionality; // not implemented\\n    // IPS cycleOfInterestCalculationBase; // not implemented\\n}\\n\\nstruct CECTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ContractPerformance creditEventTypeCovered;\\n    FeeBasis feeBasis;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    // uint256 exerciseDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 feeRate;\\n    // int256 exerciseAmount; // state only\\n    int256 coverageOfCreditEnhancement;\\n\\n    // IP settlementPeriod; // not implemented\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CEGTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    ContractPerformance creditEventTypeCovered;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 exerciseDate; // state only\\n    // uint256 nonPerformingDate; // state only\\n\\n    int256 notionalPrincipal;\\n    // int256 delinquencyRate; not implemented\\n    int256 feeAccrued;\\n    int256 feeRate;\\n    int256 priceAtPurchaseDate;\\n    int256 coverageOfCreditEnhancement;\\n    // int256 exerciseAmount; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP settlementPeriod; // not implemented\\n\\n    IPS cycleOfFee;\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CERTFTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    CouponType couponType;\\n    // ContractPerformance contractPerformance; state only\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 issueDate;\\n    // uint256 lastCouponFixingDate; // state only\\n    uint256 cycleAnchorDateOfRedemption;\\n    uint256 cycleAnchorDateOfTermination;\\n    uint256 cycleAnchorDateOfCoupon;\\n\\n    int256 nominalPrice;\\n    int256 issuePrice;\\n    // int256 delinquencyRate; // not implemented\\n    int256 quantity;\\n    // int256 exerciseQuantity; // state only\\n    // int256 exerciseQuantityOrdered; // state only\\n    // int256 marginFactor;  // state only\\n    // int256 adjustmentFactor; // state only\\n    int256 denominationRatio;\\n    int256 couponRate;\\n    // int256 exerciseAmount; // state only\\n    // int256 couponAmountFixed; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    IP settlementPeriod;\\n    IP fixingPeriod;\\n    IP redemptionRecordPeriod;\\n\\n    IPS cycleOfRedemption;\\n    IPS cycleOfTermination;\\n    IPS cycleOfCoupon;\\n\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct PAMTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // CyclePointOfInterestPayment cyclePointOfInterestPayment; // not implemented\\n    // CyclePointOfRateReset cyclePointOfRateReset; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; // not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    // IPS cycleOfOptionality; // not implemented\\n}\\n\\nstruct STKTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    RedeemableByIssuer redeemableByIssuer;\\n    // Seniority seniority; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 issueDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfDividend;\\n\\n    int256 nominalPrice;\\n    int256 notionalPrincipal;\\n    int256 issuePrice;\\n    int256 quantity;\\n    int256 priceAtPurchaseDate;\\n    int256 redemptionPrice;\\n    int256 priceAtTerminationDate;\\n\\n    IP dividendRecordPeriod;\\n    IP dividendPaymentPeriod;\\n    IP splitSettlementPeriod;\\n    IP redemptionRecordPeriod;\\n    IP redemptionPaymentPeriod;\\n\\n    IPS cycleOfDividend;\\n}\\n\\nstruct COLLATerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    // ContractPerformance contractPerformance; // state only\\n\\n    bytes32 marketObjectCodeOfCollateral;\\n\\n    address currency;\\n    address settlementCurrency;\\n    address collateralCurrency;\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 premiumDiscountAtIED;\\n    int256 coverageOfCollateral;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n\\n    IPS cycleOfInterestPayment;\\n}\\n\",\"keccak256\":\"0x79bdd18aa3c6bdb9bb27e50b140bf43977ced292fdf89c2b2a237a0ec6c719fb\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Conventions/BusinessDayConventions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n\\n/**\\n * @title BusinessDayConventions\\n * @notice Contains conventions of how to handle non-business days when generating schedules of events.\\n * The events schedule time can be shifted or not, if shifted it is possible that it is shifted to the next\\n * or previous valid business days, etc.\\n */\\ncontract BusinessDayConventions {\\n\\n    /**\\n     * @notice Used in POFs and STFs for DCFs.\\n     * No shifting is applied if a Calc/Shift instead of Shift/Calc BDC is provided.\\n     */\\n    function shiftCalcTime(\\n        uint256 timestamp,\\n        BusinessDayConvention convention,\\n        Calendar calendar,\\n        uint256 maturityDate\\n    )\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        if (\\n            convention == BusinessDayConvention.CSF ||\\n            convention == BusinessDayConvention.CSMF ||\\n            convention == BusinessDayConvention.CSP ||\\n            convention == BusinessDayConvention.CSMP\\n        ) {\\n            return timestamp;\\n        }\\n\\n        return shiftEventTime(timestamp, convention, calendar, maturityDate);\\n    }\\n\\n    /*\\n     * @notice Used for generating event schedules (for single events and event cycles schedules).\\n     * This convention assumes that when shifting the events schedule time according\\n     * to a BDC, the time is shifted first and calculations are performed thereafter.\\n     * (Calculations in POFs and STFs are based on the shifted time as well)\\n     */\\n    function shiftEventTime(\\n        uint256 timestamp,\\n        BusinessDayConvention convention,\\n        Calendar calendar,\\n        uint256 maturityDate\\n    )\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        // do not shift if equal to maturity date\\n        if (timestamp == maturityDate) return timestamp;\\n\\n        // Shift/Calc Following, Calc/Shift following\\n        if (convention == BusinessDayConvention.SCF || convention == BusinessDayConvention.CSF) {\\n            return getClosestBusinessDaySameDayOrFollowing(timestamp, calendar);\\n        // Shift/Calc Modified Following, Calc/Shift Modified following\\n        // Same as unmodified if shifted date is in the same month, if not it returns the previous buiness-day\\n        } else if (convention == BusinessDayConvention.SCMF || convention == BusinessDayConvention.CSMF) {\\n            uint256 followingOrSameBusinessDay = getClosestBusinessDaySameDayOrFollowing(timestamp, calendar);\\n            if (BokkyPooBahsDateTimeLibrary.getMonth(followingOrSameBusinessDay) == BokkyPooBahsDateTimeLibrary.getMonth(timestamp)) {\\n                return followingOrSameBusinessDay;\\n            }\\n            return getClosestBusinessDaySameDayOrPreceeding(timestamp, calendar);\\n        // Shift/Calc Preceeding, Calc/Shift Preceeding\\n        } else if (convention == BusinessDayConvention.SCP || convention == BusinessDayConvention.CSP) {\\n            return getClosestBusinessDaySameDayOrPreceeding(timestamp, calendar);\\n        // Shift/Calc Modified Preceeding, Calc/Shift Modified Preceeding\\n        // Same as unmodified if shifted date is in the same month, if not it returns the following buiness-day\\n        } else if (convention == BusinessDayConvention.SCMP || convention == BusinessDayConvention.CSMP) {\\n            uint256 preceedingOrSameBusinessDay = getClosestBusinessDaySameDayOrPreceeding(timestamp, calendar);\\n            if (BokkyPooBahsDateTimeLibrary.getMonth(preceedingOrSameBusinessDay) == BokkyPooBahsDateTimeLibrary.getMonth(timestamp)) {\\n                return preceedingOrSameBusinessDay;\\n            }\\n            return getClosestBusinessDaySameDayOrFollowing(timestamp, calendar);\\n        }\\n\\n        return timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the following business day if a non-business day is provided.\\n     * (Returns the same day if calendar != MondayToFriday)\\n     */\\n    function getClosestBusinessDaySameDayOrFollowing(uint256 timestamp, Calendar calendar)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (calendar == Calendar.MF) {\\n            if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 6) {\\n                return BokkyPooBahsDateTimeLibrary.addDays(timestamp, 2);\\n            } else if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 7) {\\n                return BokkyPooBahsDateTimeLibrary.addDays(timestamp, 1);\\n            }\\n        }\\n        return timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the previous buiness day if a non-businessday is provided.\\n     * (Returns the same day if calendar != MondayToFriday)\\n     */\\n    function getClosestBusinessDaySameDayOrPreceeding(uint256 timestamp, Calendar calendar)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (calendar == Calendar.MF) {\\n            if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 6) {\\n                return BokkyPooBahsDateTimeLibrary.subDays(timestamp, 1);\\n            } else if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 7) {\\n                return BokkyPooBahsDateTimeLibrary.subDays(timestamp, 2);\\n            }\\n        }\\n        return timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x1406e47e0631852d7cab09816927778609dd56893df469ecc7a492bb8b45aa67\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/SignedMath.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * Advanced math library for signed integers\\n * (including floats which are represented as multiples of 10 ** 18)\\n */\\nlibrary SignedMath {\\n\\n    int256 constant private INT256_MIN = -2 ** 255;\\n\\n    uint256 constant public PRECISION = 18;\\n    uint256 constant public MULTIPLICATOR = 10 ** PRECISION;\\n\\n\\n    /**\\n     * @dev The product of a and b has to be less than INT256_MAX (~10 ** 76),\\n     * as devision (normalization) is performed after multiplication\\n     * Upper boundary would be (10 ** 58) * (MULTIPLICATOR) == ~10 ** 76\\n     */\\n    function floatMult(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        if (a == 0 || b == 0) return 0;\\n\\n        require(!(a == -1 && b == INT256_MIN), \\\"SignedMath.floatMult: OVERFLOW_DETECTED\\\");\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedMath.floatMult: OVERFLOW_DETECTED\\\");\\n\\n        // normalize (divide by MULTIPLICATOR)\\n        int256 d = c / int256(MULTIPLICATOR);\\n        require(d != 0, \\\"SignedMath.floatMult: CANNOT_REPRESENT_GRANULARITY\\\");\\n\\n        return d;\\n    }\\n\\n    function floatDiv(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        require(b != 0, \\\"SignedMath.floatDiv: DIVIDED_BY_ZERO\\\");\\n\\n        // normalize (multiply by MULTIPLICATOR)\\n        if (a == 0) return 0;\\n        int256 c = a * int256(MULTIPLICATOR);\\n        require(c / a == int256(MULTIPLICATOR), \\\"SignedMath.floatDiv: OVERFLOW_DETECTED\\\");\\n\\n        require(!(b == -1 && a == INT256_MIN), \\\"SignedMath.floatDiv: OVERFLOW_DETECTED\\\");\\n        int256 d = c / b;\\n        require(d != 0, \\\"SignedMath.floatDiv: CANNOT_REPRESENT_GRANULARITY\\\");\\n\\n        return d;\\n    }\\n\\n    /**\\n        * @dev Returns the smallest of two signed numbers.\\n        */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n            return a <= b ? a : b;\\n    }\\n\\n    /**\\n        * @dev Returns the largest of two signed numbers.\\n        */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n            return a >= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x884bb3aec6597cb12c2ce3417ec60a1ffc82970342eefde5b195fad728efa233\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Utils/EventUtils.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n/**\\n * @title EventUtils\\n * @notice Methods for encoding decoding events\\n */\\ncontract EventUtils {\\n\\n    function encodeEvent(EventType eventType, uint256 scheduleTime)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return (\\n            bytes32(uint256(uint8(eventType))) << 248 |\\n            bytes32(scheduleTime)\\n        );\\n    }\\n\\n    function decodeEvent(bytes32 _event)\\n        public\\n        pure\\n        returns (EventType, uint256)\\n    {\\n        EventType eventType = EventType(uint8(uint256(_event >> 248)));\\n        uint256 scheduleTime = uint256(uint64(uint256(_event)));\\n\\n        return (eventType, scheduleTime);\\n    }\\n\\n    /**\\n     * @notice Returns the epoch offset for a given event type to determine the\\n     * correct order of events if multiple events have the same timestamp\\n     */\\n    function getEpochOffset(EventType eventType)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(eventType);\\n    }\\n}\\n\",\"keccak256\":\"0x0b57772142cc74943c55eea2bd2c8d2fd035bead19592b75cd4f7ad3159f96ee\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/CEG/ICEGEngine.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../Core/ACTUSTypes.sol\\\";\\nimport \\\"../IEngine.sol\\\";\\n\\n\\n/**\\n * @title IEngine\\n * @notice Interface which all Engines have to implement\\n */\\ninterface ICEGEngine is IEngine {\\n\\n    /**\\n     * @notice Initialize contract state space based on the contract terms.\\n     * @param terms terms of the contract\\n     * @return initial state of the contract\\n     */\\n    function computeInitialState(CEGTerms calldata terms)\\n        external\\n        pure\\n        returns (CEGState memory);\\n\\n    /**\\n     * Applys an event to the current state of a contract and returns the resulting contract state.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event to be applied to the contract state\\n     * @param externalData external data needed for STF evaluation (e.g. rate for RR events)\\n     * @return the resulting contract state\\n     */\\n    function computeStateForEvent(\\n        CEGTerms calldata terms,\\n        CEGState calldata state,\\n        bytes32 _event,\\n        bytes calldata externalData\\n    )\\n        external\\n        pure\\n        returns (CEGState memory);\\n\\n    /**\\n     * Evaluates the payoff for an event under the current state of the contract.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event for which the payoff should be evaluated\\n     * @param externalData external data needed for POF evaluation (e.g. fxRate)\\n     * @return the payoff of the event\\n     */\\n    function computePayoffForEvent(\\n        CEGTerms calldata terms,\\n        CEGState calldata state,\\n        bytes32 _event,\\n        bytes calldata externalData\\n    )\\n        external\\n        pure\\n        returns (int256);\\n\\n    /**\\n     * @notice Computes a schedule segment of non-cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segement\\n     * @return segment of the non-cyclic schedule\\n     */\\n    function computeNonCyclicScheduleSegment(\\n        CEGTerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd\\n    )\\n        external\\n        pure\\n        returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segement\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeCyclicScheduleSegment(\\n        CEGTerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Computes the next non-cyclic contract events based on the contract terms\\n     * and the timestamp on which the prev. event occured.\\n     * @dev Assumes that non-cyclic events of the same event type have a unique schedule time\\n     * @param terms terms of the contract\\n     * @param lastNonCyclicEvent last non-cyclic event\\n     * @return next non-cyclic event\\n     */\\n    function computeNextNonCyclicEvent(\\n        CEGTerms calldata terms,\\n        bytes32 lastNonCyclicEvent\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param lastScheduleTime last occurrence of cyclic event\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeNextCyclicEvent(\\n        CEGTerms calldata terms,\\n        uint256 lastScheduleTime,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        returns(bytes32);\\n\\n    /**\\n     * @notice Verifies that the provided event is still scheduled under the terms, the current state of the\\n     * contract and the current state of the underlying.\\n     * @param _event event for which to check if its still scheduled\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param underlyingState state of the underlying (empty state object if non-existing)\\n     * @return boolean indicating whether event is still scheduled\\n     */\\n    function isEventScheduled(\\n        bytes32 _event,\\n        CEGTerms calldata terms,\\n        CEGState calldata state,\\n        UnderlyingState calldata underlyingState\\n    )\\n        external\\n        pure\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x5db64ddab5c9f16150b09e9dfecf85e536b344cf57ad4c02a56aa2dd140fbb0c\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/IEngine.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../Core/ACTUSTypes.sol\\\";\\n\\n\\ninterface IEngine {\\n    function contractType() external pure returns (ContractType);\\n}\",\"keccak256\":\"0xe2ecdc18616473e64d932c47ccf8408e5a35c100fa24e3157ad9f530556135bb\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetActor/BaseActor.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../../../ACTUS/Core/SignedMath.sol\\\";\\nimport \\\"../../../ACTUS/Core/Conventions/BusinessDayConventions.sol\\\";\\nimport \\\"../../../ACTUS/Core/Utils/EventUtils.sol\\\";\\n\\nimport \\\"../../../Extensions/IExtension.sol\\\";\\nimport \\\"../SharedTypes.sol\\\";\\nimport \\\"../Conversions.sol\\\";\\nimport \\\"../AssetRegistry/IAssetRegistry.sol\\\";\\nimport \\\"../OracleProxy/IObserverOracleProxy.sol\\\";\\nimport \\\"./IAssetActor.sol\\\";\\n\\n\\n/**\\n * @title BaseActor\\n * @notice As the centerpiece of the ACTUS Protocol it is responsible for managing the\\n * lifecycle of assets registered through the AssetRegistry. It acts as the executive of AP\\n * by initializing the state of the asset and by processing the assets schedule as specified\\n * in the TemplateRegistry. It derives the next state and the current outstanding payoff of\\n * the asset by submitting the last finalized state to the corresponding ACTUS Engine.\\n * The AssetActor stores the next state in the AssetRegistry, depending on if it is able\\n * to settle the current outstanding payoff on behalf of the obligor.\\n */\\nabstract contract BaseActor is Conversions, EventUtils, BusinessDayConventions, IAssetActor, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using SignedMath for int;\\n\\n    event InitializedAsset(bytes32 indexed assetId, ContractType contractType, address creator, address counterparty);\\n    event ProgressedAsset(bytes32 indexed assetId, EventType eventType, uint256 scheduleTime, int256 payoff);\\n    event Status(bytes32 indexed assetId, bytes32 statusMessage);\\n\\n    IAssetRegistry public assetRegistry;\\n    IObserverOracleProxy public defaultOracleProxy;\\n\\n\\n    constructor(IAssetRegistry _assetRegistry, IObserverOracleProxy _defaultOracleProxy) {\\n        assetRegistry = _assetRegistry;\\n        defaultOracleProxy = _defaultOracleProxy;\\n    }\\n\\n    /**\\n     * @notice Proceeds with the next state of the asset based on the terms, the last state, market object data\\n     * and the settlement status of current obligation, derived from either a prev. pending event, an event\\n     * generated based on the current state of an underlying asset or the assets schedule.\\n     * @dev Emits ProgressedAsset if the state of the asset was updated.\\n     * @param assetId id of the asset\\n     */\\n    function progress(bytes32 assetId) external override {\\n        // revert if the asset is not registered in the AssetRegistry\\n        require(\\n            assetRegistry.isRegistered(assetId),\\n            \\\"BaseActor.progress: ASSET_DOES_NOT_EXIST\\\"\\n        );\\n\\n        IExtension extension = IExtension(assetRegistry.getExtension(assetId));\\n\\n        // enforce order:\\n        // - 1. pending event has to be processed\\n        // - 2. an event which was generated based on the state of the underlying asset\\n        // - 3. an event which was generated by the extension of the asset\\n        // - 4. the next event in the schedule\\n        bytes32 _event = assetRegistry.popPendingEvent(assetId);\\n        if (_event == bytes32(0)) _event = assetRegistry.getNextUnderlyingEvent(assetId);\\n        if (_event == bytes32(0) && address(extension) != address(0)) _event = extension.onProgress(assetId);\\n        if (_event == bytes32(0)) _event = assetRegistry.popNextScheduledEvent(assetId);\\n\\n        // e.g. if all events in the schedule are processed\\n        require(\\n            _event != bytes32(0),\\n            \\\"BaseActor.progress: NO_NEXT_EVENT\\\"\\n        );\\n\\n        processEvent(assetId, _event);\\n    }\\n\\n    /**\\n     * @notice Proceeds with the next state of the asset based on the terms, the last state, market object data\\n     * and the settlement status of current obligation, derived from a provided (unscheduled) event\\n     * Reverts if the provided event violates the order of events.\\n     * @dev Emits ProgressedAsset if the state of the asset was updated.\\n     * @param assetId id of the asset\\n     * @param _event the unscheduled event\\n     */\\n    function progressWith(bytes32 assetId, bytes32 _event) external override {\\n        // revert if msg.sender is not authorized to update the asset\\n        require(\\n            assetRegistry.hasRootAccess(assetId, msg.sender),\\n            \\\"BaseActor.progressWith: UNAUTHORIZED_SENDER\\\"\\n        );\\n\\n        // enforce order:\\n        // - 1. pending event has to be processed\\n        // - 2. an event which was generated based on the state of the underlying asset\\n        require(\\n            assetRegistry.getPendingEvent(assetId) == bytes32(0),\\n            \\\"BaseActor.progressWith: FOUND_PENDING_EVENT\\\"\\n        );\\n        require(\\n            assetRegistry.getNextUnderlyingEvent(assetId) == bytes32(0),\\n            \\\"BaseActor.progressWith: FOUND_UNDERLYING_EVENT\\\"\\n        );\\n\\n        // - 3. the scheduled event takes priority if its schedule time is early or equal to the provided event\\n        (, uint256 scheduledEventScheduleTime) = decodeEvent(assetRegistry.getNextScheduledEvent(assetId));\\n        (, uint256 providedEventScheduleTime) = decodeEvent(_event);\\n        require(\\n            scheduledEventScheduleTime == 0 || (providedEventScheduleTime < scheduledEventScheduleTime),\\n            \\\"BaseActor.progressWith: FOUND_EARLIER_EVENT\\\"\\n        );\\n\\n        processEvent(assetId, _event);\\n    }\\n\\n    /**\\n     * @notice Return true if event was settled\\n     */\\n    function processEvent(bytes32 assetId, bytes32 _event) internal nonReentrant {\\n        ContractPerformance contractPerformance = ContractPerformance(\\n            assetRegistry.getEnumValueForStateAttribute(assetId, \\\"contractPerformance\\\")\\n        );\\n\\n        // block progression if asset has defaulted, terminated or reached maturity\\n        require(\\n            contractPerformance == ContractPerformance.PF\\n            || contractPerformance == ContractPerformance.DL\\n            || contractPerformance == ContractPerformance.DQ,\\n            \\\"BaseActor.processEvent: ASSET_REACHED_FINAL_STATE\\\"\\n        );\\n\\n        (EventType eventType, uint256 scheduleTime) = decodeEvent(_event);\\n\\n        // revert if the event time of the next event is in the future\\n        // compute event time by applying BDC to schedule time\\n        require(\\n            // solium-disable-next-line\\n            shiftEventTime(\\n                scheduleTime,\\n                BusinessDayConvention(assetRegistry.getEnumValueForTermsAttribute(assetId, \\\"businessDayConvention\\\")),\\n                Calendar(assetRegistry.getEnumValueForTermsAttribute(assetId, \\\"calendar\\\")),\\n                assetRegistry.getUIntValueForTermsAttribute(assetId, \\\"maturityDate\\\")\\n            ) <= block.timestamp,\\n            \\\"BaseActor.processEvent: NEXT_EVENT_NOT_YET_SCHEDULED\\\"\\n        );\\n\\n        (bool settledPayoff, int256 payoff) = settleEventAndUpdateState(assetId, _event);\\n\\n        // mark event as settled\\n        if (settledPayoff == true) {\\n            assetRegistry.markEventAsSettled(assetId, _event, payoff);\\n        }\\n\\n        emit ProgressedAsset(\\n            assetId,\\n            // if settlement failed a CreditEvent got processed instead\\n            (settledPayoff == true) ? eventType : EventType.CE,\\n            scheduleTime,\\n            payoff\\n        );\\n    }\\n\\n    /**\\n     * @notice Routes a payment to the designated beneficiary of the event obligation.\\n     * @dev Checks if an owner of the specified cashflowId is set, if not it sends\\n     * funds to the default beneficiary.\\n     * @param assetId id of the asset which the payment relates to\\n     * @param _event _event to settle the payoff for\\n     * @param payoff payoff of the event\\n     */\\n    function settlePayoffForEvent(\\n        bytes32 assetId,\\n        bytes32 _event,\\n        int256 payoff\\n    )\\n        internal\\n        returns (bool)\\n    {\\n        require(\\n            assetId != bytes32(0) && _event != bytes32(0),\\n            \\\"BaseActor.settlePayoffForEvent: INVALID_FUNCTION_PARAMETERS\\\"\\n        );\\n\\n        // return if there is no amount due\\n        if (payoff == 0) return true;\\n\\n        // get the token address either from currency attribute or from the second contract reference\\n        address token = assetRegistry.getAddressValueForTermsAttribute(assetId, \\\"currency\\\");\\n        ContractReference memory contractReference_2 = assetRegistry.getContractReferenceValueForTermsAttribute(\\n            assetId,\\n            \\\"contractReference_2\\\"\\n        );\\n        if (contractReference_2.role == ContractReferenceRole.COVI) {\\n            (token, ) = decodeCollateralObject(contractReference_2.object);\\n        }\\n\\n        AssetOwnership memory ownership = assetRegistry.getOwnership(assetId);\\n\\n        // determine the payee and payer of the payment by checking the sign of the payoff\\n        address payee;\\n        address payer;\\n        if (payoff > 0) {\\n            // only allow for the obligor to settle the payment\\n            payer = ownership.counterpartyObligor;\\n            // use the default beneficiary if the there is no specific owner of the cashflow\\n            if (payee == address(0)) {\\n                payee = ownership.creatorBeneficiary;\\n            }\\n        } else {\\n            // only allow for the obligor to settle the payment\\n            payer = ownership.creatorObligor;\\n            // use the default beneficiary if the there is no specific owner of the cashflow\\n            if (payee == address(0)) {\\n                payee = ownership.counterpartyBeneficiary;\\n            }\\n        }\\n\\n        // calculate the magnitude of the payoff\\n        uint256 amount = (payoff > 0) ? uint256(payoff) : uint256(payoff * -1);\\n\\n        // check if allowance is set by the payer for the Asset Actor and that payer is able to cover payment\\n        if (IERC20(token).allowance(payer, address(this)) < amount || IERC20(token).balanceOf(payer) < amount) {\\n            emit Status(assetId, \\\"INSUFFICIENT_FUNDS\\\");\\n            return false;\\n        }\\n\\n        // try to transfer amount due from obligor to payee\\n        IERC20(token).safeTransferFrom(payer, payee, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Contract-type specific logic for processing an event required by the use of\\n     * contract-type specific Terms and State. Has to be implemented by each contract-type specific Actor.\\n     */\\n    function settleEventAndUpdateState(bytes32 assetId, bytes32 _event)\\n        internal\\n        virtual\\n        returns (bool, int256);\\n\\n    /**\\n     * @notice Retrieves external data (such as market object data, block time, underlying asset state)\\n     * used for evaluating the STF for a given event.\\n     */\\n    function getExternalDataForSTF(\\n        bytes32 assetId,\\n        EventType eventType,\\n        uint256 timestamp\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (bytes memory);\\n\\n    /**\\n     * @notice Retrieves external data (such as market object data)\\n     * used for evaluating the POF for a given event.\\n     */\\n    function getExternalDataForPOF(\\n        bytes32 assetId,\\n        EventType /* eventType */,\\n        uint256 timestamp\\n    )\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        address currency = assetRegistry.getAddressValueForTermsAttribute(assetId, \\\"currency\\\");\\n        address settlementCurrency = assetRegistry.getAddressValueForTermsAttribute(assetId, \\\"settlementCurrency\\\");\\n\\n        if (currency != settlementCurrency) {\\n            // get FX rate\\n            (int256 fxRate, bool isSet) = defaultOracleProxy.getDataPoint(\\n                keccak256(abi.encode(currency, settlementCurrency)),\\n                timestamp\\n            );\\n            if (isSet) return abi.encode(fxRate);\\n        }\\n\\n        return new bytes(0);\\n    }\\n}\\n\",\"keccak256\":\"0xe7e5fd630877698bbb073f65cca9d39da91eb81ceed85f5749ec9a7faabf1b9f\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetActor/IAssetActor.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../SharedTypes.sol\\\";\\n\\n\\ninterface IAssetActor {\\n\\n    function progress(bytes32 assetId)\\n        external;\\n\\n    function progressWith(bytes32 assetId, bytes32 _event)\\n        external;\\n}\\n\",\"keccak256\":\"0xee8e1c35bba3537034a451ebf9a74635dd970b08b8b7eeccd10817b2f1009a57\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/AccessControl/IAccessControl.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IAccessControl {\\n\\n    function grantAccess(bytes32 assetId, bytes4 methodSignature, address account)\\n        external;\\n\\n    function revokeAccess(bytes32 assetId, bytes4 methodSignature, address account)\\n        external;\\n\\n    function hasAccess(bytes32 assetId, bytes4 methodSignature, address account)\\n        external\\n        returns (bool);\\n\\n    function hasRootAccess(bytes32 assetId, address account)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x69235896cd0d8b8d460acad192d238bfac387212c2d4b50d495146de90ef9abf\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/IAssetRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./AccessControl/IAccessControl.sol\\\";\\nimport \\\"./Terms/ITermsRegistry.sol\\\";\\nimport \\\"./State/IStateRegistry.sol\\\";\\nimport \\\"./Schedule/IScheduleRegistry.sol\\\";\\nimport \\\"./Ownership/IOwnershipRegistry.sol\\\";\\nimport \\\"./IBaseRegistry.sol\\\";\\n\\n\\ninterface IAssetRegistry is\\n    IAccessControl,\\n    ITermsRegistry,\\n    IStateRegistry,\\n    IScheduleRegistry,\\n    IOwnershipRegistry,\\n    IBaseRegistry\\n{}\\n\",\"keccak256\":\"0xe7b720c06a1f2656d16d743cd6fed5787c9b802b70917abf17656dd2d1c735e7\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/IBaseRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IBaseRegistry {\\n\\n    function isRegistered(bytes32 assetId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getEngine(bytes32 assetId)\\n        external\\n        view\\n        returns (address);\\n\\n    function getActor(bytes32 assetId)\\n        external\\n        view\\n        returns (address);\\n\\n    function getExtension(bytes32 assetId)\\n        external\\n        view\\n        returns (address);\\n\\n    function setEngine(bytes32 assetId, address engine)\\n        external;\\n\\n    function setActor(bytes32 assetId, address actor)\\n        external;\\n\\n    function setExtension(bytes32 assetId, address extension)\\n        external;\\n}\\n\",\"keccak256\":\"0x7fa97b588cb3c73ed61f77f66417f6431a969a81e7b881d877d018992132afce\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Ownership/IOwnershipRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\n\\n\\ninterface IOwnershipRegistry {\\n\\n    function setCreatorObligor (bytes32 assetId, address newCreatorObligor)\\n        external;\\n\\n    function setCounterpartyObligor (bytes32 assetId, address newCounterpartyObligor)\\n        external;\\n\\n    function setCreatorBeneficiary(bytes32 assetId, address newCreatorBeneficiary)\\n        external;\\n\\n    function setCounterpartyBeneficiary(bytes32 assetId, address newCounterpartyBeneficiary)\\n        external;\\n\\n    function getOwnership(bytes32 assetId)\\n        external\\n        view\\n        returns (AssetOwnership memory);\\n}\\n\",\"keccak256\":\"0x7ad4e4883948d40754366c61279e7e1eb8e3c2eb42766c18ad3e07d5f74a7290\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Schedule/IScheduleRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\n\\n\\ninterface IScheduleRegistry {\\n\\n    function getPendingEvent (bytes32 assetId)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function pushPendingEvent (bytes32 assetId, bytes32 pendingEvent)\\n        external;\\n\\n    function popPendingEvent (bytes32 assetId)\\n        external\\n        returns (bytes32);\\n\\n    function getNextUnderlyingEvent (bytes32 assetId)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function getEventAtIndex(bytes32 assetId, uint256 index)\\n        external\\n        view\\n        returns (bytes32);\\n    \\n    function getScheduleLength(bytes32 assetId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSchedule(bytes32 assetId)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getNextScheduleIndex(bytes32 assetId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getNextScheduledEvent (bytes32 assetId)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function popNextScheduledEvent(bytes32 assetId)\\n        external\\n        returns (bytes32);\\n\\n    function isEventSettled(bytes32 assetId, bytes32 _event)\\n        external\\n        view\\n        returns (bool, int256);\\n\\n    function markEventAsSettled(bytes32 assetId, bytes32 _event, int256 _payoff)\\n        external;\\n}\\n\",\"keccak256\":\"0x4c9d29c2a2dfb2ad5279c0ab200497803ea89f4e67495955a1ace5b936babd78\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/State/IStateRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\n\\n\\ninterface IStateRegistry {\\n\\n    function getEnumValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (uint8);\\n\\n    function getIntValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getUintValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xe8441c459ca07ab35627642da047ed2ad9753267cd5df84e5d53ca0a85c9306f\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Terms/ITermsRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\n\\n\\ninterface ITermsRegistry {\\n\\n    function getEnumValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (uint8);\\n\\n    function getAddressValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (address);\\n\\n    function getBytes32ValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function getUIntValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getIntValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getPeriodValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (IP memory);\\n\\n    function getCycleValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (IPS memory);\\n\\n    function getContractReferenceValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (ContractReference memory);\\n}\\n\",\"keccak256\":\"0xb6c776fdb37fbfb7768c84aaea8304ef30e6406ffd843c8476d986ce3b5417b6\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/Conversions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SharedTypes.sol\\\";\\n\\n\\ncontract Conversions {\\n\\n    function encodeCollateralAsObject(address collateralToken, uint256 collateralAmount)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(collateralToken))) << 96 | bytes32(uint256(uint96(collateralAmount)));\\n    }\\n\\n    function decodeCollateralObject(bytes32 object)\\n        public\\n        pure\\n        returns (address, uint256)\\n    {\\n        return (\\n            address(uint160(uint256(object >> 96))),\\n            uint256(uint96(uint256(object)))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcc273a4272ffd03ef3f6fd329590a25049482661820ee4dcc953d28eeb4a9a95\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/OracleProxy/IObserverOracleProxy.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\ninterface IObserverOracleProxy {\\n\\n    /**\\n     * @notice Returns a data point for given id and timestamp.\\n     * @dev Has to be implement by each Oracle Proxy. It should never revert.\\n     * @param identifier identifier of the data\\n     * @param timestamp timestamp of\\n     * @return Int256 value, isSet\\n     */\\n    function getDataPoint(bytes32 identifier, uint256 timestamp) external view returns (int256, bool);\\n\\n    /**\\n     * @notice Returns the most recent data point for given id.\\n     * @dev Has to be implement by each Oracle Proxy. It should never revert.\\n     * @param identifier identifier of the data\\n     * @return Int256 value, isSet\\n     */\\n    function getMostRecentDataPoint(bytes32 identifier) external view returns (int256, bool);\\n}\",\"keccak256\":\"0x8741400348ab8e3cac826a70b08808ba7370521bc58793df71f8cd33a4a55541\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/SharedTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../ACTUS/Core/ACTUSTypes.sol\\\";\\nimport \\\"../../ACTUS/Core/ACTUSConstants.sol\\\";\\n\\n\\nstruct AssetOwnership {\\n    // account which has to fulfill all obligations for the creator side\\n    address creatorObligor;\\n    // account to which all cashflows to which the creator is the beneficiary are forwarded\\n    address creatorBeneficiary;\\n    // account which has to fulfill all obligations for the counterparty\\n    address counterpartyObligor;\\n    // account to which all cashflows to which the counterparty is the beneficiary are forwarded\\n    address counterpartyBeneficiary;\\n}\\n\\n// scheduleTime and EventType are tightly packed and encoded as bytes32\\nstruct Schedule {\\n    // schedule times of cyclic events (used if no schedule is set)\\n    mapping(EventType => uint256) lastScheduleTimeOfCyclicEvent;\\n    // index of event => bytes32 encoded event\\n    mapping(uint256 => bytes32) events;\\n    // the length of the schedule, used to determine the end of the schedule\\n    uint256 length;\\n    // pointer to index of the next event in the schedule\\n    uint256 nextScheduleIndex;\\n    // last event which could not be settled\\n    bytes32 pendingEvent;\\n    // last non-cyclic event which was processed (used if no schedule is set)\\n    bytes32 lastNonCyclicEvent;\\n}\\n\",\"keccak256\":\"0xadbb252a62b8641f01338ce1650d5d59ccc4a6f3f0e62c49e7b16bf51d2a46b8\",\"license\":\"Apache-2.0\"},\"contracts/Core/CEG/CEGActor.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../ACTUS/Engines/CEG/ICEGEngine.sol\\\";\\n\\nimport \\\"../Base/AssetActor/BaseActor.sol\\\";\\nimport \\\"./ICEGRegistry.sol\\\";\\n\\n\\n/**\\n * @title CEGActor\\n * @notice TODO\\n */\\ncontract CEGActor is BaseActor {\\n\\n    constructor(\\n        IAssetRegistry assetRegistry,\\n        IObserverOracleProxy defaultOracleProxy\\n    ) BaseActor(assetRegistry, defaultOracleProxy) {}\\n\\n    /**\\n     * @notice Derives initial state of the asset terms and stores together with\\n     * terms, schedule, ownership, engine, admin of the asset in the contract types specific AssetRegistry.\\n     * @param terms asset specific terms\\n     * @param schedule schedule of the asset\\n     * @param ownership ownership of the asset\\n     * @param engine address of the ACTUS engine used for the spec. ContractType\\n     * @param admin address of the admin of the asset (optional)\\n     * @param extension address of the extension (optional)\\n     */\\n    function initialize(\\n        CEGTerms calldata terms,\\n        bytes32[] calldata schedule,\\n        AssetOwnership calldata ownership,\\n        address engine,\\n        address admin,\\n        address extension\\n    )\\n        external\\n    {\\n        require(\\n            engine != address(0) && IEngine(engine).contractType() == ContractType.CEG,\\n            \\\"ANNActor.initialize: CONTRACT_TYPE_OF_ENGINE_UNSUPPORTED\\\"\\n        );\\n\\n        // solium-disable-next-line\\n        bytes32 assetId = keccak256(abi.encode(terms, block.timestamp));\\n\\n        // check if first contract reference in terms references an underlying asset\\n        if (terms.contractReference_1.role == ContractReferenceRole.COVE) {\\n            require(\\n                terms.contractReference_1.object != bytes32(0),\\n                \\\"CEGACtor.initialize: INVALID_CONTRACT_REFERENCE_1_OBJECT\\\"\\n            );\\n        }\\n\\n        // todo add guarantee validation logic for contract reference 2\\n\\n        // compute the initial state of the asset\\n        CEGState memory initialState = ICEGEngine(engine).computeInitialState(terms);\\n\\n        // register the asset in the AssetRegistry\\n        ICEGRegistry(address(assetRegistry)).registerAsset(\\n            assetId,\\n            terms,\\n            initialState,\\n            schedule,\\n            ownership,\\n            engine,\\n            address(this),\\n            admin,\\n            extension\\n        );\\n\\n        emit InitializedAsset(assetId, ContractType.CEG, ownership.creatorObligor, ownership.counterpartyObligor);\\n    }\\n\\n    function computePayoffForEvent(\\n        bytes32 assetId,\\n        address engine,\\n        CEGTerms memory terms,\\n        CEGState memory state,\\n        bytes32 _event\\n    )\\n        internal\\n        view\\n        returns (int256)\\n    {\\n        (EventType eventType, uint256 scheduleTime) = decodeEvent(_event);\\n\\n        uint256 timestamp;\\n        {\\n            // apply shift calc to schedule time\\n            timestamp = shiftCalcTime(\\n                scheduleTime,\\n                terms.businessDayConvention,\\n                terms.calendar,\\n                terms.maturityDate\\n            );\\n        }\\n        \\n        bytes memory externalDataPOF;\\n        { externalDataPOF = getExternalDataForPOF(assetId, eventType, timestamp); }\\n\\n        return (\\n            ICEGEngine(engine).computePayoffForEvent(\\n                terms,\\n                state,\\n                _event,\\n                externalDataPOF\\n            )\\n        );\\n    }\\n\\n    function computeStateForEvent(\\n        bytes32 assetId,\\n        address engine,\\n        CEGTerms memory terms,\\n        CEGState memory state,\\n        bytes32 _event\\n    )\\n        internal\\n        view\\n        returns (CEGState memory)\\n    {\\n        (EventType eventType, uint256 scheduleTime) = decodeEvent(_event);\\n\\n        uint256 timestamp;\\n        {\\n            // apply shift calc to schedule time\\n            timestamp = shiftCalcTime(\\n                scheduleTime,\\n                terms.businessDayConvention,\\n                terms.calendar,\\n                terms.maturityDate\\n            );\\n        }\\n        \\n        bytes memory externalDataSTF;\\n        { externalDataSTF = getExternalDataForSTF(assetId, eventType, timestamp); }\\n\\n        return (\\n            ICEGEngine(engine).computeStateForEvent(\\n                terms,\\n                state,\\n                _event,\\n                externalDataSTF\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Contract-type specific logic for processing an event required by the use of\\n     * contract-type specific Terms and State.\\n     */\\n    function settleEventAndUpdateState(bytes32 assetId, bytes32 _event)\\n        internal\\n        override\\n        returns (bool, int256)\\n    {\\n        CEGTerms memory terms = ICEGRegistry(address(assetRegistry)).getTerms(assetId);\\n        CEGState memory state = ICEGRegistry(address(assetRegistry)).getState(assetId);\\n        address engine = assetRegistry.getEngine(assetId);\\n\\n        // get finalized state if asset is not performant\\n        if (state.contractPerformance != ContractPerformance.PF) {\\n            state = ICEGRegistry(address(assetRegistry)).getFinalizedState(assetId);\\n        }\\n\\n        (, uint256 scheduleTime) = decodeEvent(_event);\\n\\n        // get external data for the next event\\n        // compute payoff and the next state by applying the event to the current state\\n        int256 payoff = computePayoffForEvent(assetId, engine, terms, state, _event);\\n        CEGState memory nextState = computeStateForEvent(assetId, engine, terms, state, _event);\\n\\n        // try to settle payoff of event\\n        bool settledPayoff = settlePayoffForEvent(assetId, _event, payoff);\\n\\n        if (settledPayoff == false) {\\n            // if the obligation can't be fulfilled and the performance changed from performant to DL, DQ or DF,\\n            // store the last performant state of the asset\\n            // (if the obligation is later fulfilled before the asset reaches default,\\n            // the last performant state is used to derive subsequent states of the asset)\\n            if (state.contractPerformance == ContractPerformance.PF) {\\n                ICEGRegistry(address(assetRegistry)).setFinalizedState(assetId, state);\\n            }\\n\\n            // store event as pending event for future settlement\\n            assetRegistry.pushPendingEvent(assetId, _event);\\n\\n            // create CreditEvent\\n            bytes32 ceEvent = encodeEvent(EventType.CE, scheduleTime);\\n\\n            // derive the actual state of the asset by applying the CreditEvent (updates performance of asset)\\n            nextState = computeStateForEvent(assetId, engine, terms, nextState, ceEvent);\\n        }\\n\\n        // store the resulting state\\n        ICEGRegistry(address(assetRegistry)).setState(assetId, nextState);\\n\\n        return (settledPayoff, payoff);\\n    }\\n\\n    /**\\n     * @notice Retrieves external data (such as market object data, block time, underlying asset state)\\n     * used for evaluating the STF for a given event.\\n     */\\n    function getExternalDataForSTF(\\n        bytes32 assetId,\\n        EventType eventType,\\n        uint256 /* timestamp */\\n    )\\n        internal\\n        view\\n        override\\n        returns (bytes memory)\\n    {\\n        if (eventType == EventType.CE) {\\n            // get current timestamp\\n            // solium-disable-next-line\\n            return abi.encode(block.timestamp);\\n        } else if (eventType == EventType.EXE || eventType == EventType.FP) {\\n            // get the remaining notionalPrincipal from the underlying\\n            ContractReference memory contractReference_1 = assetRegistry.getContractReferenceValueForTermsAttribute(\\n                assetId,\\n                \\\"contractReference_1\\\"\\n            );\\n            if (contractReference_1.role == ContractReferenceRole.COVE) {\\n                bytes32 underlyingAssetId = contractReference_1.object;\\n                address underlyingRegistry = address(uint160(uint256(contractReference_1.object2)));\\n                require(\\n                    IAssetRegistry(underlyingRegistry).isRegistered(underlyingAssetId) == true,\\n                    \\\"BaseActor.getExternalDataForSTF: ASSET_DOES_NOT_EXIST\\\"\\n                );\\n                return abi.encode(\\n                    IAssetRegistry(underlyingRegistry).getIntValueForStateAttribute(underlyingAssetId, \\\"notionalPrincipal\\\")\\n                );\\n            }\\n        }\\n\\n        return new bytes(0);\\n    }\\n}\",\"keccak256\":\"0xafcbb782a24bbdeefee541cff64d87e3d738ceb6a3b39516458144a323cfd440\",\"license\":\"Apache-2.0\"},\"contracts/Core/CEG/ICEGRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Base/SharedTypes.sol\\\";\\nimport \\\"../Base/AssetRegistry/IAssetRegistry.sol\\\";\\n\\n\\ninterface ICEGRegistry is IAssetRegistry {\\n\\n    function registerAsset(\\n        bytes32 assetId,\\n        CEGTerms calldata terms,\\n        CEGState calldata state,\\n        bytes32[] calldata schedule,\\n        AssetOwnership calldata ownership,\\n        address engine,\\n        address actor,\\n        address admin,\\n        address extension\\n    )\\n        external;\\n\\n    function getTerms(bytes32 assetId)\\n        external\\n        view\\n        returns (CEGTerms memory);\\n\\n    function setTerms(bytes32 assetId, CEGTerms calldata terms)\\n        external;\\n\\n    function getState(bytes32 assetId)\\n        external\\n        view\\n        returns (CEGState memory);\\n\\n    function setState(bytes32 assetId, CEGState calldata terms)\\n        external;\\n\\n    function getFinalizedState(bytes32 assetId)\\n        external\\n        view\\n        returns (CEGState memory);\\n\\n    function setFinalizedState(bytes32 assetId, CEGState calldata terms)\\n        external;\\n}\\n\",\"keccak256\":\"0xbe116e0f9077c94e52ce21e2767dda1f6b54ef607770a880b220769d65550169\",\"license\":\"Apache-2.0\"},\"contracts/Extensions/IExtension.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IExtension {\\n\\n    /**\\n     * @notice Returns an unscheduled event generated by the Extension.\\n     * @dev Should be callable by the Asset Actor.\\n     * @param assetId Id of the asset\\n     * @return event\\n     */\\n    function onProgress(bytes32 assetId) external returns (bytes32);\\n}\",\"keccak256\":\"0xd613f8dfd5da1cd2b3ce412781c141f605ec2009a481eac87dcb88f589c38c22\",\"license\":\"Apache-2.0\"},\"contracts/external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: MIT\\\"\\npragma solidity ^0.7.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\",\"keccak256\":\"0x2b0c785d6fe1e5ae7239ac6833b6c014f865e1d12c4628dc9def5e0a901cc3eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003e6f38038062003e6f8339810160408190526200003491620000c9565b8181600062000042620000c5565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060018055600280546001600160a01b039384166001600160a01b0319918216179091556003805492909316911617905550620001209050565b3390565b60008060408385031215620000dc578182fd5b8251620000e98162000107565b6020840151909250620000fc8162000107565b809150509250929050565b6001600160a01b03811681146200011d57600080fd5b50565b613d3f80620001306000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063e38a4b6b11610066578063e38a4b6b146101e0578063e726d680146101f3578063f2fde38b14610206578063f5586e0514610219576100f5565b80638da5cb5b146101a8578063979d7e86146101bd57806398172dd8146101c5578063e05a66e0146101cd576100f5565b8063715018a6116100d3578063715018a61461015957806372540003146101615780637aebd2a814610182578063811322fb14610195576100f5565b8063645a26bd146100fa5780636778e0e9146101245780636b6ba66414610144575b600080fd5b61010d6101083660046129f5565b61022c565b60405161011b92919061331b565b60405180910390f35b6101376101323660046129ae565b610245565b60405161011b9190613334565b610157610152366004612a25565b610270565b005b610157610525565b61017461016f3660046129f5565b6105d9565b60405161011b9291906135eb565b6101576101903660046129f5565b610602565b6101376101a3366004612a7e565b610983565b6101b0610999565b60405161011b91906132ed565b6101b06109a8565b6101b06109b7565b6101376101db366004612a98565b6109c6565b6101576101ee366004612be5565b6109e4565b610137610201366004612e60565b610c69565b610157610214366004612976565b610dbe565b610137610227366004612e60565b610ec8565b606081901c6bffffffffffffffffffffffff8216915091565b6bffffffffffffffffffffffff19606083901b166bffffffffffffffffffffffff8216175b92915050565b60025460405163747be51f60e11b81526001600160a01b039091169063e8f7ca3e906102a2908590339060040161333d565b602060405180830381600087803b1580156102bc57600080fd5b505af11580156102d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f491906129d9565b6103195760405162461bcd60e51b81526004016103109061382c565b60405180910390fd5b60025460405163f52f84e160e01b81526000916001600160a01b03169063f52f84e19061034a908690600401613334565b60206040518083038186803b15801561036257600080fd5b505afa158015610376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039a9190612a0d565b146103b75760405162461bcd60e51b815260040161031090613970565b600254604051631d7a1ab960e21b81526000916001600160a01b0316906375e86ae4906103e8908690600401613334565b60206040518083038186803b15801561040057600080fd5b505afa158015610414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104389190612a0d565b146104555760405162461bcd60e51b8152600401610310906137de565b60025460405163b828204160e01b81526000916104dc916001600160a01b039091169063b82820419061048c908790600401613334565b60206040518083038186803b1580156104a457600080fd5b505afa1580156104b8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016f9190612a0d565b91505060006104ea836105d9565b9150508115806104f957508181105b6105155760405162461bcd60e51b8152600401610310906136df565b61051f8484610f3c565b50505050565b61052d611334565b6000546001600160a01b0390811691161461058f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000808060f884901c60218111156105ed57fe5b92505067ffffffffffffffff83169050915091565b600254604051631392c59160e11b81526001600160a01b03909116906327258b2290610632908490600401613334565b60206040518083038186803b15801561064a57600080fd5b505afa15801561065e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068291906129d9565b61069e5760405162461bcd60e51b815260040161031090613877565b60025460405163c139626b60e01b81526000916001600160a01b03169063c139626b906106cf908590600401613334565b60206040518083038186803b1580156106e757600080fd5b505afa1580156106fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071f9190612992565b600254604051630316dd6960e21b81529192506000916001600160a01b0390911690630c5b75a490610755908690600401613334565b602060405180830381600087803b15801561076f57600080fd5b505af1158015610783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a79190612a0d565b90508061083157600254604051631d7a1ab960e21b81526001600160a01b03909116906375e86ae4906107de908690600401613334565b60206040518083038186803b1580156107f657600080fd5b505afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e9190612a0d565b90505b8015801561084757506001600160a01b03821615155b156108cd5760405163019ad70360e41b81526001600160a01b038316906319ad703090610878908690600401613334565b602060405180830381600087803b15801561089257600080fd5b505af11580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca9190612a0d565b90505b80610957576002546040516361db73e160e11b81526001600160a01b039091169063c3b6e7c290610902908690600401613334565b602060405180830381600087803b15801561091c57600080fd5b505af1158015610930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109549190612a0d565b90505b806109745760405162461bcd60e51b815260040161031090613748565b61097e8382610f3c565b505050565b600081602181111561099157fe5b90505b919050565b6000546001600160a01b031690565b6002546001600160a01b031681565b6003546001600160a01b031681565b60008160f88460218111156109d757fe5b60ff16901b179392505050565b6001600160a01b03831615801590610a7757506010836001600160a01b031663cb2ef6f76040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3257600080fd5b505afa158015610a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6a9190612a62565b6013811115610a7557fe5b145b610a935760405162461bcd60e51b815260040161031090613625565b60008742604051602001610aa8929190613a1b565b60408051601f19818403018152919052805160209091012090506003610ad66104208a016104008b01612a46565b6004811115610ae157fe5b1415610b09576103a0880135610b095760405162461bcd60e51b815260040161031090613682565b610b116125aa565b60405163790f7d6160e11b81526001600160a01b0386169063f21efac290610b3d908c90600401613a0c565b6101206040518083038186803b158015610b5657600080fd5b505afa158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8e9190612b60565b60025460405163e3fbb89b60e01b81529192506001600160a01b03169063e3fbb89b90610bd19085908d9086908e908e908e908e9030908f908f906004016134bc565b600060405180830381600087803b158015610beb57600080fd5b505af1158015610bff573d6000803e3d6000fd5b508492507fc5df678b84aa92f5f59981df8c9997b366d886de25771c5f753015c2e14e907a915060109050610c3760208a018a612976565b610c4760608b0160408c01612976565b604051610c56939291906135bb565b60405180910390a2505050505050505050565b600081851415610c7a575083610db6565b6001846008811115610c8857fe5b1480610c9f57506003846008811115610c9d57fe5b145b15610cb557610cae8584611338565b9050610db6565b6002846008811115610cc357fe5b1480610cda57506004846008811115610cd857fe5b145b15610d1e576000610ceb8685611338565b9050610cf686611394565b610cff82611394565b1415610d0c579050610db6565b610d1686856113ac565b915050610db6565b6005846008811115610d2c57fe5b1480610d4357506007846008811115610d4157fe5b145b15610d5257610cae85846113ac565b6006846008811115610d6057fe5b1480610d7757506008846008811115610d7557fe5b145b15610db3576000610d8886856113ac565b9050610d9386611394565b610d9c82611394565b1415610da9579050610db6565b610d168685611338565b50835b949350505050565b610dc6611334565b6000546001600160a01b03908116911614610e28576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610e6d5760405162461bcd60e51b8152600401808060200182810382526026815260200180613cba6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006003846008811115610ed857fe5b1480610eef57506004846008811115610eed57fe5b145b80610f0557506007846008811115610f0357fe5b145b80610f1b57506008846008811115610f1957fe5b145b15610f27575083610db6565b610f3385858585610c69565b95945050505050565b60026001541415610f94576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001819055546040516367ad768960e11b81526000916001600160a01b03169063cf5aed1290610fca908690600401613420565b60206040518083038186803b158015610fe257600080fd5b505afa158015610ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101a9190612ea7565b60ff16600581111561102857fe5b9050600081600581111561103857fe5b148061104f5750600181600581111561104d57fe5b145b806110655750600281600581111561106357fe5b145b6110815760405162461bcd60e51b8152600401610310906139bb565b60008061108d846105d9565b60025460405163ecef557760e01b815292945090925042916112379184916001600160a01b039091169063ecef5577906110cb908b906004016133db565b60206040518083038186803b1580156110e357600080fd5b505afa1580156110f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111b9190612ea7565b60ff16600881111561112957fe5b60025460405163ecef557760e01b81526001600160a01b039091169063ecef557790611159908c90600401613468565b60206040518083038186803b15801561117157600080fd5b505afa158015611185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a99190612ea7565b60ff1660018111156111b757fe5b60025460405163135b9f4d60e01b81526001600160a01b039091169063135b9f4d906111e7908d90600401613402565b60206040518083038186803b1580156111ff57600080fd5b505afa158015611213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102019190612a0d565b11156112555760405162461bcd60e51b81526004016103109061391c565b60008061126287876113fa565b9092509050600182151514156112d95760025460405163de07a17360e01b81526001600160a01b039091169063de07a173906112a6908a908a908690600401613362565b600060405180830381600087803b1580156112c057600080fd5b505af11580156112d4573d6000803e3d6000fd5b505050505b867fd255be8589971f117e0e4377177282fb7cce66e378bfb1b7eafddd05e4f181e960018415151461130c57600161130e565b855b858460405161131f93929190613606565b60405180910390a25050600180555050505050565b3390565b6000600182600181111561134857fe5b141561138d57611357836117ee565b600614156113715761136a836002611801565b905061026a565b61137a836117ee565b6007141561138d5761136a836001611801565b5090919050565b60006113a4620151808304611816565b509392505050565b600060018260018111156113bc57fe5b141561138d576113cb836117ee565b600614156113de5761136a8360016118ac565b6113e7836117ee565b6007141561138d5761136a8360026118ac565b6000806114056125f7565b6002546040516335f1cded60e11b81526001600160a01b0390911690636be39bda90611435908890600401613334565b6104a06040518083038186803b15801561144e57600080fd5b505afa158015611462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114869190612cb6565b90506114906125aa565b6002546040516309648a9d60e01b81526001600160a01b03909116906309648a9d906114c0908990600401613334565b6101206040518083038186803b1580156114d957600080fd5b505afa1580156114ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115119190612b60565b60025460405163ee43eda160e01b81529192506000916001600160a01b039091169063ee43eda190611547908a90600401613334565b60206040518083038186803b15801561155f57600080fd5b505afa158015611573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115979190612992565b90506000825160058111156115a857fe5b1461163157600254604051631ba316dd60e11b81526001600160a01b03909116906337462dba906115dd908a90600401613334565b6101206040518083038186803b1580156115f657600080fd5b505afa15801561160a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162e9190612b60565b91505b600061163c876105d9565b915050600061164e898487878c6118c1565b90506116586125aa565b6116658a8588888d611990565b905060006116748b8b85611a58565b9050806117795760008651600581111561168a57fe5b14156116f557600254604051631fd045ef60e11b81526001600160a01b0390911690633fa08bde906116c2908e908a906004016134a7565b600060405180830381600087803b1580156116dc57600080fd5b505af11580156116f0573d6000803e3d6000fd5b505050505b60025460405163d981e77360e01b81526001600160a01b039091169063d981e77390611727908e908e90600401613354565b600060405180830381600087803b15801561174157600080fd5b505af1158015611755573d6000803e3d6000fd5b5050505060006117666001866109c6565b90506117758c878a8685611990565b9250505b600254604051631f1617c560e31b81526001600160a01b039091169063f8b0be28906117ab908e9086906004016134a7565b600060405180830381600087803b1580156117c557600080fd5b505af11580156117d9573d6000803e3d6000fd5b50929d949c50939a5050505050505050505050565b6007620151809091046003010660010190565b62015180810282018281101561026a57600080fd5b60008080836226496581018262023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f846050028161186d57fe5b0590506000605061098f83020585039050600b820560301994909401606402929092018301996002600c90940290910392909201975095509350505050565b62015180810282038281111561026a57600080fd5b60008060006118cf846105d9565b9150915060006118ee82886080015189602001518a6101600151610ec8565b905060606118fd8a8584611e23565b6040516305a25a5760e41b81529091506001600160a01b038a1690635a25a57090611932908b908b908b908790600401613a38565b60206040518083038186803b15801561194a57600080fd5b505afa15801561195e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119829190612a0d565b9a9950505050505050505050565b6119986125aa565b6000806119a4846105d9565b9150915060006119c382886080015189602001518a6101600151610ec8565b905060606119d28a858461204b565b604051639a90ea0d60e01b81529091506001600160a01b038a1690639a90ea0d90611a07908b908b908b908790600401613a38565b6101206040518083038186803b158015611a2057600080fd5b505afa158015611a34573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119829190612b60565b60008315801590611a6857508215155b611a845760405162461bcd60e51b8152600401610310906138bf565b81611a9157506001611e1c565b60025460405163eb01255960e01b81526000916001600160a01b03169063eb01255990611ac290889060040161339d565b60206040518083038186803b158015611ada57600080fd5b505afa158015611aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b129190612992565b9050611b1c6126dc565b600254604051635e353ebb60e11b81526001600160a01b039091169063bc6a7d7690611b4c908990600401613378565b60806040518083038186803b158015611b6457600080fd5b505afa158015611b78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9c9190612e45565b9050600481606001516004811115611bb057fe5b1415611bc5578051611bc19061022c565b5091505b611bcd612703565b60025460405163e50e0ef760e01b81526001600160a01b039091169063e50e0ef790611bfd908a90600401613334565b60806040518083038186803b158015611c1557600080fd5b505afa158015611c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4d9190612ae2565b90506000806000871315611c7c575060408201516001600160a01b038216611c7757826020015191505b611c95565b5081516001600160a01b038216611c9557826060015191505b6000808813611ca8578760001902611caa565b875b905080866001600160a01b031663dd62ed3e84306040518363ffffffff1660e01b8152600401611cdb929190613301565b60206040518083038186803b158015611cf357600080fd5b505afa158015611d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2b9190612a0d565b1080611db257506040516370a0823160e01b815281906001600160a01b038816906370a0823190611d609086906004016132ed565b60206040518083038186803b158015611d7857600080fd5b505afa158015611d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db09190612a0d565b105b15611dfc57897f4f269a19b64cfff0bdee7fd3cdaec44e1fe38ce2ff55d3009a89fac6ecbe9f2c604051611de59061372a565b60405180910390a260009650505050505050611e1c565b611e116001600160a01b0387168385846122b6565b600196505050505050505b9392505050565b60025460405163eb01255960e01b81526060916000916001600160a01b039091169063eb01255990611e5990889060040161339d565b60206040518083038186803b158015611e7157600080fd5b505afa158015611e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea99190612992565b60025460405163eb01255960e01b81529192506000916001600160a01b039091169063eb01255990611edf9089906004016133b7565b60206040518083038186803b158015611ef757600080fd5b505afa158015611f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2f9190612992565b9050806001600160a01b0316826001600160a01b0316146120325760035460405160009182916001600160a01b03909116906308a4ec1090611f779087908790602001613301565b60405160208183030381529060405280519060200120886040518363ffffffff1660e01b8152600401611fab929190613354565b604080518083038186803b158015611fc257600080fd5b505afa158015611fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffa9190612ab3565b91509150801561202f57816040516020016120159190613334565b604051602081830303815290604052945050505050611e1c565b50505b5050604080516000815260208101909152949350505050565b6060600183602181111561205b57fe5b141561208857426040516020016120729190613334565b6040516020818303038152906040529050611e1c565b601983602181111561209657fe5b14806120ad575060058360218111156120ab57fe5b145b1561229f576120ba6126dc565b600254604051635e353ebb60e11b81526001600160a01b039091169063bc6a7d76906120ea908890600401613482565b60806040518083038186803b15801561210257600080fd5b505afa158015612116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213a9190612e45565b905060038160600151600481111561214e57fe5b141561229d5780516020820151604051631392c59160e11b81526001600160a01b038216906327258b2290612187908590600401613334565b60206040518083038186803b15801561219f57600080fd5b505afa1580156121b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d791906129d9565b15156001146121f85760405162461bcd60e51b815260040161031090613789565b604051636a899b9b60e01b81526001600160a01b03821690636a899b9b90612224908590600401613445565b60206040518083038186803b15801561223c57600080fd5b505afa158015612250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122749190612a0d565b6040516020016122849190613334565b6040516020818303038152906040529350505050611e1c565b505b505060408051600081526020810190915292915050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261051f9085906060612360826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123bc9092919063ffffffff16565b80519091501561097e5780806020019051602081101561237f57600080fd5b505161097e5760405162461bcd60e51b815260040180806020018281038252602a815260200180613ce0602a913960400191505060405180910390fd5b6060610db6848460008560606123d185612571565b612422576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106124615780518252601f199092019160209182019101612442565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146124c3576040519150601f19603f3d011682016040523d82523d6000602084013e6124c8565b606091505b509150915081156124dc579150610db69050565b8051156124ec5780518082602001fd5b8360405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561253657818101518382015260200161251e565b50505050905090810190601f1680156125635780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610db6575050151592915050565b604080516101208101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60408051610300810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016126a361272a565b81526020016126b061272a565b81526020016126bd61274d565b81526020016126ca6126dc565b81526020016126d76126dc565b905290565b604080516080810182526000808252602082018190529091820190815260200160006126d7565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040805160608101909152600080825260208201905b8152600060209091015290565b60408051608081019091526000808252602082019081526020016000612740565b803561099481613c3b565b805161099481613c3b565b803561099481613c5e565b805161099481613c5e565b803561099481613c6b565b805161099481613c6b565b803561099481613c78565b805161099481613c78565b803561099481613c92565b805161099481613c92565b803561099481613c9f565b805161099481613c9f565b803561099481613cac565b805161099481613cac565b80356022811061099457600080fd5b600060808284031215612828578081fd5b50919050565b60006080828403121561283f578081fd5b6040516080810181811067ffffffffffffffff8211171561285c57fe5b80604052508091508251815260208301516020820152604083015161288081613c85565b6040820152606083015161289381613c85565b6060919091015292915050565b6000608082840312156128b1578081fd5b6040516080810181811067ffffffffffffffff821117156128ce57fe5b80604052508091508251815260208301516128e881613c78565b602082015260408301516128fb81613c6b565b6040820152606083015161289381613c50565b60006060828403121561291f578081fd5b6040516060810181811067ffffffffffffffff8211171561293c57fe5b806040525080915082518152602083015161295681613c78565b6020820152604083015161296981613c50565b6040919091015292915050565b600060208284031215612987578081fd5b8135611e1c81613c3b565b6000602082840312156129a3578081fd5b8151611e1c81613c3b565b600080604083850312156129c0578081fd5b82356129cb81613c3b565b946020939093013593505050565b6000602082840312156129ea578081fd5b8151611e1c81613c50565b600060208284031215612a06578081fd5b5035919050565b600060208284031215612a1e578081fd5b5051919050565b60008060408385031215612a37578182fd5b50508035926020909101359150565b600060208284031215612a57578081fd5b8135611e1c81613c85565b600060208284031215612a73578081fd5b8151611e1c81613c9f565b600060208284031215612a8f578081fd5b611e1c82612808565b60008060408385031215612aaa578182fd5b6129cb83612808565b60008060408385031215612ac5578182fd5b825191506020830151612ad781613c50565b809150509250929050565b600060808284031215612af3578081fd5b6040516080810181811067ffffffffffffffff82111715612b1057fe5b6040528251612b1e81613c3b565b81526020830151612b2e81613c3b565b60208201526040830151612b4181613c3b565b60408201526060830151612b5481613c3b565b60608201529392505050565b6000610120808385031215612b73578182fd5b612b7c81613bf6565b9050612b87836127bb565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b60008060008060008060008789036105a0811215612c01578384fd5b6104a080821215612c10578485fd5b899850880135905067ffffffffffffffff80821115612c2d578485fd5b818a0191508a601f830112612c40578485fd5b813581811115612c4e578586fd5b8b60208083028501011115612c61578586fd5b602083019850809750505050612c7b896104c08a01612817565b9350612c8a610540890161276e565b9250612c99610560890161276e565b9150612ca8610580890161276e565b905092959891949750929550565b60006104a08284031215612cc8578081fd5b612cd3610300613bf6565b612cdc836127e7565b8152612cea602084016127a5565b6020820152612cfb604084016127d1565b6040820152612d0c606084016127fd565b6060820152612d1d6080840161278f565b6080820152612d2e60a084016127a5565b60a0820152612d3f60c084016127a5565b60c0820152612d5060e084016127bb565b60e0820152610100612d63818501612779565b90820152610120612d75848201612779565b908201526101408381015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e08084015190820152610200808401519082015261022080840151908201526102408084015190820152610260612deb8582860161290e565b908201526102c0612dfe8585830161290e565b610280830152612e128561032086016128a0565b6102a0830152612e26856103a0860161282e565b90820152612e3884610420850161282e565b6102e08201529392505050565b600060808284031215612e56578081fd5b611e1c838361282e565b60008060008060808587031215612e75578182fd5b843593506020850135612e8781613c5e565b92506040850135612e9781613c6b565b9396929550929360600135925050565b600060208284031215612eb8578081fd5b815160ff81168114611e1c578182fd5b6001600160a01b03169052565b60008151808452815b81811015612efa57602081850181015186830182015201612ede565b81811115612f0b5782602083870101525b50601f01601f19169290920160200192915050565b60098110612f2a57fe5b9052565b612f2a81613c1a565b612f2a81613c27565b600d8110612f2a57fe5b60148110612f2a57fe5b600b8110612f2a57fe5b60228110612f2a57fe5b8051612f7381613c27565b808352506020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152505050565b612fdf82612fda836127dc565b612f4a565b612feb6020820161279a565b612ff86020840182612f2e565b50613005604082016127c6565b6130126040840182612f40565b5061301f606082016127f2565b61302c6060840182612f54565b5061303960808201612784565b6130466080840182612f20565b5061305360a0820161279a565b61306060a0840182612f2e565b5061306d60c0820161279a565b61307a60c0840182612f2e565b5061308760e082016127b0565b61309460e0840182612f37565b506101006130a381830161276e565b6130af82850182612ec8565b50506101206130bf81830161276e565b6130cb82850182612ec8565b50506101408181013590830152610160808201359083015261018080820135908301526101a080820135908301526101c080820135908301526101e0808201359083015261020080820135908301526102208082013590830152610240808201359083015261026061314181840182840161328e565b506102c061315381840182840161328e565b50610320613165818401828401613200565b506103a0613177818401828401613185565b5061042061097e8184018284015b803582526020810135602083015260408101356131a181613c85565b6131aa81613c31565b604083015260608101356131bd81613c85565b6131c681613c31565b806060840152505050565b805182526020810151602083015260408101516131ed81613c31565b604083015260608101516131c681613c31565b80358252602081013561321281613c78565b61321b81613c27565b6020830152604081013561322e81613c6b565b61323781613c1a565b6040830152606081013561324a81613c50565b8015156060840152505050565b80518252602081015161326981613c27565b6020830152604081015161327c81613c1a565b60408301526060908101511515910152565b8035825260208101356132a081613c78565b6132a981613c27565b602083015260408101356132bc81613c50565b8015156040840152505050565b8051825260208101516132db81613c27565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b90815260200190565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b9081527231b7b73a3930b1ba2932b332b932b731b2af9960691b602082015260400190565b9081526763757272656e637960c01b602082015260400190565b90815271736574746c656d656e7443757272656e637960701b602082015260400190565b90815274313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b602082015260400190565b9081526b6d617475726974794461746560a01b602082015260400190565b90815272636f6e7472616374506572666f726d616e636560681b602082015260400190565b908152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b602082015260400190565b9081526731b0b632b73230b960c11b602082015260400190565b90815272636f6e74726163745265666572656e63655f3160681b602082015260400190565b8281526101408101611e1c6020830184612f68565b60006107008c83526134d1602084018d612fcd565b6134df6104c084018c612f68565b6105e0830181905282018890526107206001600160fb1b03891115613502578182fd5b60208902808b83860137830101908152863561351d81613c3b565b6001600160a01b0390811661060084015260208801359061353d82613c3b565b90811661062084015260408801359061355582613c3b565b90811661064084015260608801359061356d82613c3b565b16610660830152613582610680830187612ec8565b6135906106a0830186612ec8565b61359e6106c0830185612ec8565b6135ac6106e0830184612ec8565b9b9a5050505050505050505050565b606081016135c98286612f4a565b6001600160a01b03938416602083015291909216604090920191909152919050565b604081016135f98285612f5e565b8260208301529392505050565b606081016136148286612f5e565b602082019390935260400152919050565b60208082526038908201527f414e4e4163746f722e696e697469616c697a653a20434f4e54524143545f545960408201527f50455f4f465f454e47494e455f554e535550504f525445440000000000000000606082015260800190565b60208082526038908201527f4345474143746f722e696e697469616c697a653a20494e56414c49445f434f4e60408201527f54524143545f5245464552454e43455f315f4f424a4543540000000000000000606082015260800190565b6020808252602b908201527f426173654163746f722e70726f6772657373576974683a20464f554e445f454160408201526a149312515497d15591539560aa1b606082015260800190565b71494e53554646494349454e545f46554e445360701b815260200190565b60208082526021908201527f426173654163746f722e70726f67726573733a204e4f5f4e4558545f4556454e6040820152601560fa1b606082015260800190565b60208082526035908201527f426173654163746f722e67657445787465726e616c44617461466f725354463a604082015274081054d4d15517d113d154d7d393d517d1561254d5605a1b606082015260800190565b6020808252602e908201527f426173654163746f722e70726f6772657373576974683a20464f554e445f554e60408201526d1111549316525391d7d15591539560921b606082015260800190565b6020808252602b908201527f426173654163746f722e70726f6772657373576974683a20554e415554484f5260408201526a24ad22a22fa9a2a72222a960a91b606082015260800190565b60208082526028908201527f426173654163746f722e70726f67726573733a2041535345545f444f45535f4e60408201526713d517d1561254d560c21b606082015260800190565b6020808252603b908201527f426173654163746f722e736574746c655061796f6666466f724576656e743a2060408201527f494e56414c49445f46554e4354494f4e5f504152414d45544552530000000000606082015260800190565b60208082526034908201527f426173654163746f722e70726f636573734576656e743a204e4558545f455645604082015273139517d393d517d6515517d4d0d211511553115160621b606082015260800190565b6020808252602b908201527f426173654163746f722e70726f6772657373576974683a20464f554e445f504560408201526a1391125391d7d15591539560aa1b606082015260800190565b60208082526031908201527f426173654163746f722e70726f636573734576656e743a2041535345545f524560408201527041434845445f46494e414c5f535441544560781b606082015260800190565b6104a0810161026a8284612fcd565b6104c08101613a2a8285612fcd565b826104a08301529392505050565b6000610600613a48838851612f4a565b6020870151613a5a6020850182612f2e565b506040870151613a6d6040850182612f40565b506060870151613a806060850182612f54565b506080870151613a936080850182612f20565b5060a0870151613aa660a0850182612f2e565b5060c0870151613ab960c0850182612f2e565b5060e0870151613acc60e0850182612f37565b5061010080880151613ae082860182612ec8565b505061012080880151613af582860182612ec8565b50506101408781015190840152610160808801519084015261018080880151908401526101a080880151908401526101c080880151908401526101e0808801519084015261020080880151908401526102208088015190840152610240808801519084015261026080880151613b6d828601826132c9565b50506102808701516102c0613b84818601836132c9565b6102a08901519150613b9a610320860183613257565b8801519050613bad6103a08501826131d1565b506102e0870151613bc26104208501826131d1565b50613bd16104a0840187612f68565b846105c0840152806105e0840152613beb81840185612ed5565b979650505050505050565b60405181810167ffffffffffffffff81118282101715613c1257fe5b604052919050565b60028110613c2457fe5b50565b60068110613c2457fe5b60058110613c2457fe5b6001600160a01b0381168114613c2457600080fd5b8015158114613c2457600080fd5b60098110613c2457600080fd5b60028110613c2457600080fd5b60068110613c2457600080fd5b60058110613c2457600080fd5b600d8110613c2457600080fd5b60148110613c2457600080fd5b600b8110613c2457600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220244250102d32a6c609abefea359c1794d96a5860dc6087372ac3fead9a1dc37364736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80638da5cb5b11610097578063e38a4b6b11610066578063e38a4b6b146101e0578063e726d680146101f3578063f2fde38b14610206578063f5586e0514610219576100f5565b80638da5cb5b146101a8578063979d7e86146101bd57806398172dd8146101c5578063e05a66e0146101cd576100f5565b8063715018a6116100d3578063715018a61461015957806372540003146101615780637aebd2a814610182578063811322fb14610195576100f5565b8063645a26bd146100fa5780636778e0e9146101245780636b6ba66414610144575b600080fd5b61010d6101083660046129f5565b61022c565b60405161011b92919061331b565b60405180910390f35b6101376101323660046129ae565b610245565b60405161011b9190613334565b610157610152366004612a25565b610270565b005b610157610525565b61017461016f3660046129f5565b6105d9565b60405161011b9291906135eb565b6101576101903660046129f5565b610602565b6101376101a3366004612a7e565b610983565b6101b0610999565b60405161011b91906132ed565b6101b06109a8565b6101b06109b7565b6101376101db366004612a98565b6109c6565b6101576101ee366004612be5565b6109e4565b610137610201366004612e60565b610c69565b610157610214366004612976565b610dbe565b610137610227366004612e60565b610ec8565b606081901c6bffffffffffffffffffffffff8216915091565b6bffffffffffffffffffffffff19606083901b166bffffffffffffffffffffffff8216175b92915050565b60025460405163747be51f60e11b81526001600160a01b039091169063e8f7ca3e906102a2908590339060040161333d565b602060405180830381600087803b1580156102bc57600080fd5b505af11580156102d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f491906129d9565b6103195760405162461bcd60e51b81526004016103109061382c565b60405180910390fd5b60025460405163f52f84e160e01b81526000916001600160a01b03169063f52f84e19061034a908690600401613334565b60206040518083038186803b15801561036257600080fd5b505afa158015610376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039a9190612a0d565b146103b75760405162461bcd60e51b815260040161031090613970565b600254604051631d7a1ab960e21b81526000916001600160a01b0316906375e86ae4906103e8908690600401613334565b60206040518083038186803b15801561040057600080fd5b505afa158015610414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104389190612a0d565b146104555760405162461bcd60e51b8152600401610310906137de565b60025460405163b828204160e01b81526000916104dc916001600160a01b039091169063b82820419061048c908790600401613334565b60206040518083038186803b1580156104a457600080fd5b505afa1580156104b8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016f9190612a0d565b91505060006104ea836105d9565b9150508115806104f957508181105b6105155760405162461bcd60e51b8152600401610310906136df565b61051f8484610f3c565b50505050565b61052d611334565b6000546001600160a01b0390811691161461058f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000808060f884901c60218111156105ed57fe5b92505067ffffffffffffffff83169050915091565b600254604051631392c59160e11b81526001600160a01b03909116906327258b2290610632908490600401613334565b60206040518083038186803b15801561064a57600080fd5b505afa15801561065e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068291906129d9565b61069e5760405162461bcd60e51b815260040161031090613877565b60025460405163c139626b60e01b81526000916001600160a01b03169063c139626b906106cf908590600401613334565b60206040518083038186803b1580156106e757600080fd5b505afa1580156106fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071f9190612992565b600254604051630316dd6960e21b81529192506000916001600160a01b0390911690630c5b75a490610755908690600401613334565b602060405180830381600087803b15801561076f57600080fd5b505af1158015610783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a79190612a0d565b90508061083157600254604051631d7a1ab960e21b81526001600160a01b03909116906375e86ae4906107de908690600401613334565b60206040518083038186803b1580156107f657600080fd5b505afa15801561080a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082e9190612a0d565b90505b8015801561084757506001600160a01b03821615155b156108cd5760405163019ad70360e41b81526001600160a01b038316906319ad703090610878908690600401613334565b602060405180830381600087803b15801561089257600080fd5b505af11580156108a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ca9190612a0d565b90505b80610957576002546040516361db73e160e11b81526001600160a01b039091169063c3b6e7c290610902908690600401613334565b602060405180830381600087803b15801561091c57600080fd5b505af1158015610930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109549190612a0d565b90505b806109745760405162461bcd60e51b815260040161031090613748565b61097e8382610f3c565b505050565b600081602181111561099157fe5b90505b919050565b6000546001600160a01b031690565b6002546001600160a01b031681565b6003546001600160a01b031681565b60008160f88460218111156109d757fe5b60ff16901b179392505050565b6001600160a01b03831615801590610a7757506010836001600160a01b031663cb2ef6f76040518163ffffffff1660e01b815260040160206040518083038186803b158015610a3257600080fd5b505afa158015610a46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6a9190612a62565b6013811115610a7557fe5b145b610a935760405162461bcd60e51b815260040161031090613625565b60008742604051602001610aa8929190613a1b565b60408051601f19818403018152919052805160209091012090506003610ad66104208a016104008b01612a46565b6004811115610ae157fe5b1415610b09576103a0880135610b095760405162461bcd60e51b815260040161031090613682565b610b116125aa565b60405163790f7d6160e11b81526001600160a01b0386169063f21efac290610b3d908c90600401613a0c565b6101206040518083038186803b158015610b5657600080fd5b505afa158015610b6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8e9190612b60565b60025460405163e3fbb89b60e01b81529192506001600160a01b03169063e3fbb89b90610bd19085908d9086908e908e908e908e9030908f908f906004016134bc565b600060405180830381600087803b158015610beb57600080fd5b505af1158015610bff573d6000803e3d6000fd5b508492507fc5df678b84aa92f5f59981df8c9997b366d886de25771c5f753015c2e14e907a915060109050610c3760208a018a612976565b610c4760608b0160408c01612976565b604051610c56939291906135bb565b60405180910390a2505050505050505050565b600081851415610c7a575083610db6565b6001846008811115610c8857fe5b1480610c9f57506003846008811115610c9d57fe5b145b15610cb557610cae8584611338565b9050610db6565b6002846008811115610cc357fe5b1480610cda57506004846008811115610cd857fe5b145b15610d1e576000610ceb8685611338565b9050610cf686611394565b610cff82611394565b1415610d0c579050610db6565b610d1686856113ac565b915050610db6565b6005846008811115610d2c57fe5b1480610d4357506007846008811115610d4157fe5b145b15610d5257610cae85846113ac565b6006846008811115610d6057fe5b1480610d7757506008846008811115610d7557fe5b145b15610db3576000610d8886856113ac565b9050610d9386611394565b610d9c82611394565b1415610da9579050610db6565b610d168685611338565b50835b949350505050565b610dc6611334565b6000546001600160a01b03908116911614610e28576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610e6d5760405162461bcd60e51b8152600401808060200182810382526026815260200180613cba6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006003846008811115610ed857fe5b1480610eef57506004846008811115610eed57fe5b145b80610f0557506007846008811115610f0357fe5b145b80610f1b57506008846008811115610f1957fe5b145b15610f27575083610db6565b610f3385858585610c69565b95945050505050565b60026001541415610f94576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001819055546040516367ad768960e11b81526000916001600160a01b03169063cf5aed1290610fca908690600401613420565b60206040518083038186803b158015610fe257600080fd5b505afa158015610ff6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101a9190612ea7565b60ff16600581111561102857fe5b9050600081600581111561103857fe5b148061104f5750600181600581111561104d57fe5b145b806110655750600281600581111561106357fe5b145b6110815760405162461bcd60e51b8152600401610310906139bb565b60008061108d846105d9565b60025460405163ecef557760e01b815292945090925042916112379184916001600160a01b039091169063ecef5577906110cb908b906004016133db565b60206040518083038186803b1580156110e357600080fd5b505afa1580156110f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111b9190612ea7565b60ff16600881111561112957fe5b60025460405163ecef557760e01b81526001600160a01b039091169063ecef557790611159908c90600401613468565b60206040518083038186803b15801561117157600080fd5b505afa158015611185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a99190612ea7565b60ff1660018111156111b757fe5b60025460405163135b9f4d60e01b81526001600160a01b039091169063135b9f4d906111e7908d90600401613402565b60206040518083038186803b1580156111ff57600080fd5b505afa158015611213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102019190612a0d565b11156112555760405162461bcd60e51b81526004016103109061391c565b60008061126287876113fa565b9092509050600182151514156112d95760025460405163de07a17360e01b81526001600160a01b039091169063de07a173906112a6908a908a908690600401613362565b600060405180830381600087803b1580156112c057600080fd5b505af11580156112d4573d6000803e3d6000fd5b505050505b867fd255be8589971f117e0e4377177282fb7cce66e378bfb1b7eafddd05e4f181e960018415151461130c57600161130e565b855b858460405161131f93929190613606565b60405180910390a25050600180555050505050565b3390565b6000600182600181111561134857fe5b141561138d57611357836117ee565b600614156113715761136a836002611801565b905061026a565b61137a836117ee565b6007141561138d5761136a836001611801565b5090919050565b60006113a4620151808304611816565b509392505050565b600060018260018111156113bc57fe5b141561138d576113cb836117ee565b600614156113de5761136a8360016118ac565b6113e7836117ee565b6007141561138d5761136a8360026118ac565b6000806114056125f7565b6002546040516335f1cded60e11b81526001600160a01b0390911690636be39bda90611435908890600401613334565b6104a06040518083038186803b15801561144e57600080fd5b505afa158015611462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114869190612cb6565b90506114906125aa565b6002546040516309648a9d60e01b81526001600160a01b03909116906309648a9d906114c0908990600401613334565b6101206040518083038186803b1580156114d957600080fd5b505afa1580156114ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115119190612b60565b60025460405163ee43eda160e01b81529192506000916001600160a01b039091169063ee43eda190611547908a90600401613334565b60206040518083038186803b15801561155f57600080fd5b505afa158015611573573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115979190612992565b90506000825160058111156115a857fe5b1461163157600254604051631ba316dd60e11b81526001600160a01b03909116906337462dba906115dd908a90600401613334565b6101206040518083038186803b1580156115f657600080fd5b505afa15801561160a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162e9190612b60565b91505b600061163c876105d9565b915050600061164e898487878c6118c1565b90506116586125aa565b6116658a8588888d611990565b905060006116748b8b85611a58565b9050806117795760008651600581111561168a57fe5b14156116f557600254604051631fd045ef60e11b81526001600160a01b0390911690633fa08bde906116c2908e908a906004016134a7565b600060405180830381600087803b1580156116dc57600080fd5b505af11580156116f0573d6000803e3d6000fd5b505050505b60025460405163d981e77360e01b81526001600160a01b039091169063d981e77390611727908e908e90600401613354565b600060405180830381600087803b15801561174157600080fd5b505af1158015611755573d6000803e3d6000fd5b5050505060006117666001866109c6565b90506117758c878a8685611990565b9250505b600254604051631f1617c560e31b81526001600160a01b039091169063f8b0be28906117ab908e9086906004016134a7565b600060405180830381600087803b1580156117c557600080fd5b505af11580156117d9573d6000803e3d6000fd5b50929d949c50939a5050505050505050505050565b6007620151809091046003010660010190565b62015180810282018281101561026a57600080fd5b60008080836226496581018262023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f846050028161186d57fe5b0590506000605061098f83020585039050600b820560301994909401606402929092018301996002600c90940290910392909201975095509350505050565b62015180810282038281111561026a57600080fd5b60008060006118cf846105d9565b9150915060006118ee82886080015189602001518a6101600151610ec8565b905060606118fd8a8584611e23565b6040516305a25a5760e41b81529091506001600160a01b038a1690635a25a57090611932908b908b908b908790600401613a38565b60206040518083038186803b15801561194a57600080fd5b505afa15801561195e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119829190612a0d565b9a9950505050505050505050565b6119986125aa565b6000806119a4846105d9565b9150915060006119c382886080015189602001518a6101600151610ec8565b905060606119d28a858461204b565b604051639a90ea0d60e01b81529091506001600160a01b038a1690639a90ea0d90611a07908b908b908b908790600401613a38565b6101206040518083038186803b158015611a2057600080fd5b505afa158015611a34573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119829190612b60565b60008315801590611a6857508215155b611a845760405162461bcd60e51b8152600401610310906138bf565b81611a9157506001611e1c565b60025460405163eb01255960e01b81526000916001600160a01b03169063eb01255990611ac290889060040161339d565b60206040518083038186803b158015611ada57600080fd5b505afa158015611aee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b129190612992565b9050611b1c6126dc565b600254604051635e353ebb60e11b81526001600160a01b039091169063bc6a7d7690611b4c908990600401613378565b60806040518083038186803b158015611b6457600080fd5b505afa158015611b78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9c9190612e45565b9050600481606001516004811115611bb057fe5b1415611bc5578051611bc19061022c565b5091505b611bcd612703565b60025460405163e50e0ef760e01b81526001600160a01b039091169063e50e0ef790611bfd908a90600401613334565b60806040518083038186803b158015611c1557600080fd5b505afa158015611c29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4d9190612ae2565b90506000806000871315611c7c575060408201516001600160a01b038216611c7757826020015191505b611c95565b5081516001600160a01b038216611c9557826060015191505b6000808813611ca8578760001902611caa565b875b905080866001600160a01b031663dd62ed3e84306040518363ffffffff1660e01b8152600401611cdb929190613301565b60206040518083038186803b158015611cf357600080fd5b505afa158015611d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2b9190612a0d565b1080611db257506040516370a0823160e01b815281906001600160a01b038816906370a0823190611d609086906004016132ed565b60206040518083038186803b158015611d7857600080fd5b505afa158015611d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db09190612a0d565b105b15611dfc57897f4f269a19b64cfff0bdee7fd3cdaec44e1fe38ce2ff55d3009a89fac6ecbe9f2c604051611de59061372a565b60405180910390a260009650505050505050611e1c565b611e116001600160a01b0387168385846122b6565b600196505050505050505b9392505050565b60025460405163eb01255960e01b81526060916000916001600160a01b039091169063eb01255990611e5990889060040161339d565b60206040518083038186803b158015611e7157600080fd5b505afa158015611e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea99190612992565b60025460405163eb01255960e01b81529192506000916001600160a01b039091169063eb01255990611edf9089906004016133b7565b60206040518083038186803b158015611ef757600080fd5b505afa158015611f0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2f9190612992565b9050806001600160a01b0316826001600160a01b0316146120325760035460405160009182916001600160a01b03909116906308a4ec1090611f779087908790602001613301565b60405160208183030381529060405280519060200120886040518363ffffffff1660e01b8152600401611fab929190613354565b604080518083038186803b158015611fc257600080fd5b505afa158015611fd6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ffa9190612ab3565b91509150801561202f57816040516020016120159190613334565b604051602081830303815290604052945050505050611e1c565b50505b5050604080516000815260208101909152949350505050565b6060600183602181111561205b57fe5b141561208857426040516020016120729190613334565b6040516020818303038152906040529050611e1c565b601983602181111561209657fe5b14806120ad575060058360218111156120ab57fe5b145b1561229f576120ba6126dc565b600254604051635e353ebb60e11b81526001600160a01b039091169063bc6a7d76906120ea908890600401613482565b60806040518083038186803b15801561210257600080fd5b505afa158015612116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213a9190612e45565b905060038160600151600481111561214e57fe5b141561229d5780516020820151604051631392c59160e11b81526001600160a01b038216906327258b2290612187908590600401613334565b60206040518083038186803b15801561219f57600080fd5b505afa1580156121b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121d791906129d9565b15156001146121f85760405162461bcd60e51b815260040161031090613789565b604051636a899b9b60e01b81526001600160a01b03821690636a899b9b90612224908590600401613445565b60206040518083038186803b15801561223c57600080fd5b505afa158015612250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122749190612a0d565b6040516020016122849190613334565b6040516020818303038152906040529350505050611e1c565b505b505060408051600081526020810190915292915050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261051f9085906060612360826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123bc9092919063ffffffff16565b80519091501561097e5780806020019051602081101561237f57600080fd5b505161097e5760405162461bcd60e51b815260040180806020018281038252602a815260200180613ce0602a913960400191505060405180910390fd5b6060610db6848460008560606123d185612571565b612422576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106124615780518252601f199092019160209182019101612442565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146124c3576040519150601f19603f3d011682016040523d82523d6000602084013e6124c8565b606091505b509150915081156124dc579150610db69050565b8051156124ec5780518082602001fd5b8360405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561253657818101518382015260200161251e565b50505050905090810190601f1680156125635780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610db6575050151592915050565b604080516101208101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60408051610300810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016126a361272a565b81526020016126b061272a565b81526020016126bd61274d565b81526020016126ca6126dc565b81526020016126d76126dc565b905290565b604080516080810182526000808252602082018190529091820190815260200160006126d7565b60408051608081018252600080825260208201819052918101829052606081019190915290565b6040805160608101909152600080825260208201905b8152600060209091015290565b60408051608081019091526000808252602082019081526020016000612740565b803561099481613c3b565b805161099481613c3b565b803561099481613c5e565b805161099481613c5e565b803561099481613c6b565b805161099481613c6b565b803561099481613c78565b805161099481613c78565b803561099481613c92565b805161099481613c92565b803561099481613c9f565b805161099481613c9f565b803561099481613cac565b805161099481613cac565b80356022811061099457600080fd5b600060808284031215612828578081fd5b50919050565b60006080828403121561283f578081fd5b6040516080810181811067ffffffffffffffff8211171561285c57fe5b80604052508091508251815260208301516020820152604083015161288081613c85565b6040820152606083015161289381613c85565b6060919091015292915050565b6000608082840312156128b1578081fd5b6040516080810181811067ffffffffffffffff821117156128ce57fe5b80604052508091508251815260208301516128e881613c78565b602082015260408301516128fb81613c6b565b6040820152606083015161289381613c50565b60006060828403121561291f578081fd5b6040516060810181811067ffffffffffffffff8211171561293c57fe5b806040525080915082518152602083015161295681613c78565b6020820152604083015161296981613c50565b6040919091015292915050565b600060208284031215612987578081fd5b8135611e1c81613c3b565b6000602082840312156129a3578081fd5b8151611e1c81613c3b565b600080604083850312156129c0578081fd5b82356129cb81613c3b565b946020939093013593505050565b6000602082840312156129ea578081fd5b8151611e1c81613c50565b600060208284031215612a06578081fd5b5035919050565b600060208284031215612a1e578081fd5b5051919050565b60008060408385031215612a37578182fd5b50508035926020909101359150565b600060208284031215612a57578081fd5b8135611e1c81613c85565b600060208284031215612a73578081fd5b8151611e1c81613c9f565b600060208284031215612a8f578081fd5b611e1c82612808565b60008060408385031215612aaa578182fd5b6129cb83612808565b60008060408385031215612ac5578182fd5b825191506020830151612ad781613c50565b809150509250929050565b600060808284031215612af3578081fd5b6040516080810181811067ffffffffffffffff82111715612b1057fe5b6040528251612b1e81613c3b565b81526020830151612b2e81613c3b565b60208201526040830151612b4181613c3b565b60408201526060830151612b5481613c3b565b60608201529392505050565b6000610120808385031215612b73578182fd5b612b7c81613bf6565b9050612b87836127bb565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b60008060008060008060008789036105a0811215612c01578384fd5b6104a080821215612c10578485fd5b899850880135905067ffffffffffffffff80821115612c2d578485fd5b818a0191508a601f830112612c40578485fd5b813581811115612c4e578586fd5b8b60208083028501011115612c61578586fd5b602083019850809750505050612c7b896104c08a01612817565b9350612c8a610540890161276e565b9250612c99610560890161276e565b9150612ca8610580890161276e565b905092959891949750929550565b60006104a08284031215612cc8578081fd5b612cd3610300613bf6565b612cdc836127e7565b8152612cea602084016127a5565b6020820152612cfb604084016127d1565b6040820152612d0c606084016127fd565b6060820152612d1d6080840161278f565b6080820152612d2e60a084016127a5565b60a0820152612d3f60c084016127a5565b60c0820152612d5060e084016127bb565b60e0820152610100612d63818501612779565b90820152610120612d75848201612779565b908201526101408381015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e08084015190820152610200808401519082015261022080840151908201526102408084015190820152610260612deb8582860161290e565b908201526102c0612dfe8585830161290e565b610280830152612e128561032086016128a0565b6102a0830152612e26856103a0860161282e565b90820152612e3884610420850161282e565b6102e08201529392505050565b600060808284031215612e56578081fd5b611e1c838361282e565b60008060008060808587031215612e75578182fd5b843593506020850135612e8781613c5e565b92506040850135612e9781613c6b565b9396929550929360600135925050565b600060208284031215612eb8578081fd5b815160ff81168114611e1c578182fd5b6001600160a01b03169052565b60008151808452815b81811015612efa57602081850181015186830182015201612ede565b81811115612f0b5782602083870101525b50601f01601f19169290920160200192915050565b60098110612f2a57fe5b9052565b612f2a81613c1a565b612f2a81613c27565b600d8110612f2a57fe5b60148110612f2a57fe5b600b8110612f2a57fe5b60228110612f2a57fe5b8051612f7381613c27565b808352506020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152505050565b612fdf82612fda836127dc565b612f4a565b612feb6020820161279a565b612ff86020840182612f2e565b50613005604082016127c6565b6130126040840182612f40565b5061301f606082016127f2565b61302c6060840182612f54565b5061303960808201612784565b6130466080840182612f20565b5061305360a0820161279a565b61306060a0840182612f2e565b5061306d60c0820161279a565b61307a60c0840182612f2e565b5061308760e082016127b0565b61309460e0840182612f37565b506101006130a381830161276e565b6130af82850182612ec8565b50506101206130bf81830161276e565b6130cb82850182612ec8565b50506101408181013590830152610160808201359083015261018080820135908301526101a080820135908301526101c080820135908301526101e0808201359083015261020080820135908301526102208082013590830152610240808201359083015261026061314181840182840161328e565b506102c061315381840182840161328e565b50610320613165818401828401613200565b506103a0613177818401828401613185565b5061042061097e8184018284015b803582526020810135602083015260408101356131a181613c85565b6131aa81613c31565b604083015260608101356131bd81613c85565b6131c681613c31565b806060840152505050565b805182526020810151602083015260408101516131ed81613c31565b604083015260608101516131c681613c31565b80358252602081013561321281613c78565b61321b81613c27565b6020830152604081013561322e81613c6b565b61323781613c1a565b6040830152606081013561324a81613c50565b8015156060840152505050565b80518252602081015161326981613c27565b6020830152604081015161327c81613c1a565b60408301526060908101511515910152565b8035825260208101356132a081613c78565b6132a981613c27565b602083015260408101356132bc81613c50565b8015156040840152505050565b8051825260208101516132db81613c27565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b90815260200190565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b9081527231b7b73a3930b1ba2932b332b932b731b2af9960691b602082015260400190565b9081526763757272656e637960c01b602082015260400190565b90815271736574746c656d656e7443757272656e637960701b602082015260400190565b90815274313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b602082015260400190565b9081526b6d617475726974794461746560a01b602082015260400190565b90815272636f6e7472616374506572666f726d616e636560681b602082015260400190565b908152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b602082015260400190565b9081526731b0b632b73230b960c11b602082015260400190565b90815272636f6e74726163745265666572656e63655f3160681b602082015260400190565b8281526101408101611e1c6020830184612f68565b60006107008c83526134d1602084018d612fcd565b6134df6104c084018c612f68565b6105e0830181905282018890526107206001600160fb1b03891115613502578182fd5b60208902808b83860137830101908152863561351d81613c3b565b6001600160a01b0390811661060084015260208801359061353d82613c3b565b90811661062084015260408801359061355582613c3b565b90811661064084015260608801359061356d82613c3b565b16610660830152613582610680830187612ec8565b6135906106a0830186612ec8565b61359e6106c0830185612ec8565b6135ac6106e0830184612ec8565b9b9a5050505050505050505050565b606081016135c98286612f4a565b6001600160a01b03938416602083015291909216604090920191909152919050565b604081016135f98285612f5e565b8260208301529392505050565b606081016136148286612f5e565b602082019390935260400152919050565b60208082526038908201527f414e4e4163746f722e696e697469616c697a653a20434f4e54524143545f545960408201527f50455f4f465f454e47494e455f554e535550504f525445440000000000000000606082015260800190565b60208082526038908201527f4345474143746f722e696e697469616c697a653a20494e56414c49445f434f4e60408201527f54524143545f5245464552454e43455f315f4f424a4543540000000000000000606082015260800190565b6020808252602b908201527f426173654163746f722e70726f6772657373576974683a20464f554e445f454160408201526a149312515497d15591539560aa1b606082015260800190565b71494e53554646494349454e545f46554e445360701b815260200190565b60208082526021908201527f426173654163746f722e70726f67726573733a204e4f5f4e4558545f4556454e6040820152601560fa1b606082015260800190565b60208082526035908201527f426173654163746f722e67657445787465726e616c44617461466f725354463a604082015274081054d4d15517d113d154d7d393d517d1561254d5605a1b606082015260800190565b6020808252602e908201527f426173654163746f722e70726f6772657373576974683a20464f554e445f554e60408201526d1111549316525391d7d15591539560921b606082015260800190565b6020808252602b908201527f426173654163746f722e70726f6772657373576974683a20554e415554484f5260408201526a24ad22a22fa9a2a72222a960a91b606082015260800190565b60208082526028908201527f426173654163746f722e70726f67726573733a2041535345545f444f45535f4e60408201526713d517d1561254d560c21b606082015260800190565b6020808252603b908201527f426173654163746f722e736574746c655061796f6666466f724576656e743a2060408201527f494e56414c49445f46554e4354494f4e5f504152414d45544552530000000000606082015260800190565b60208082526034908201527f426173654163746f722e70726f636573734576656e743a204e4558545f455645604082015273139517d393d517d6515517d4d0d211511553115160621b606082015260800190565b6020808252602b908201527f426173654163746f722e70726f6772657373576974683a20464f554e445f504560408201526a1391125391d7d15591539560aa1b606082015260800190565b60208082526031908201527f426173654163746f722e70726f636573734576656e743a2041535345545f524560408201527041434845445f46494e414c5f535441544560781b606082015260800190565b6104a0810161026a8284612fcd565b6104c08101613a2a8285612fcd565b826104a08301529392505050565b6000610600613a48838851612f4a565b6020870151613a5a6020850182612f2e565b506040870151613a6d6040850182612f40565b506060870151613a806060850182612f54565b506080870151613a936080850182612f20565b5060a0870151613aa660a0850182612f2e565b5060c0870151613ab960c0850182612f2e565b5060e0870151613acc60e0850182612f37565b5061010080880151613ae082860182612ec8565b505061012080880151613af582860182612ec8565b50506101408781015190840152610160808801519084015261018080880151908401526101a080880151908401526101c080880151908401526101e0808801519084015261020080880151908401526102208088015190840152610240808801519084015261026080880151613b6d828601826132c9565b50506102808701516102c0613b84818601836132c9565b6102a08901519150613b9a610320860183613257565b8801519050613bad6103a08501826131d1565b506102e0870151613bc26104208501826131d1565b50613bd16104a0840187612f68565b846105c0840152806105e0840152613beb81840185612ed5565b979650505050505050565b60405181810167ffffffffffffffff81118282101715613c1257fe5b604052919050565b60028110613c2457fe5b50565b60068110613c2457fe5b60058110613c2457fe5b6001600160a01b0381168114613c2457600080fd5b8015158114613c2457600080fd5b60098110613c2457600080fd5b60028110613c2457600080fd5b60068110613c2457600080fd5b60058110613c2457600080fd5b600d8110613c2457600080fd5b60148110613c2457600080fd5b600b8110613c2457600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220244250102d32a6c609abefea359c1794d96a5860dc6087372ac3fead9a1dc37364736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "initialize((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(bytes32,bytes32,uint8,uint8),(bytes32,bytes32,uint8,uint8)),bytes32[],(address,address,address,address),address,address,address)": {
        "params": {
          "admin": "address of the admin of the asset (optional)",
          "engine": "address of the ACTUS engine used for the spec. ContractType",
          "extension": "address of the extension (optional)",
          "ownership": "ownership of the asset",
          "schedule": "schedule of the asset",
          "terms": "asset specific terms"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "progress(bytes32)": {
        "details": "Emits ProgressedAsset if the state of the asset was updated.",
        "params": {
          "assetId": "id of the asset"
        }
      },
      "progressWith(bytes32,bytes32)": {
        "details": "Emits ProgressedAsset if the state of the asset was updated.",
        "params": {
          "_event": "the unscheduled event",
          "assetId": "id of the asset"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "CEGActor",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getEpochOffset(uint8)": {
        "notice": "Returns the epoch offset for a given event type to determine the correct order of events if multiple events have the same timestamp"
      },
      "initialize((uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,address,address,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool),(bytes32,bytes32,uint8,uint8),(bytes32,bytes32,uint8,uint8)),bytes32[],(address,address,address,address),address,address,address)": {
        "notice": "Derives initial state of the asset terms and stores together with terms, schedule, ownership, engine, admin of the asset in the contract types specific AssetRegistry."
      },
      "progress(bytes32)": {
        "notice": "Proceeds with the next state of the asset based on the terms, the last state, market object data and the settlement status of current obligation, derived from either a prev. pending event, an event generated based on the current state of an underlying asset or the assets schedule."
      },
      "progressWith(bytes32,bytes32)": {
        "notice": "Proceeds with the next state of the asset based on the terms, the last state, market object data and the settlement status of current obligation, derived from a provided (unscheduled) event Reverts if the provided event violates the order of events."
      },
      "shiftCalcTime(uint256,uint8,uint8,uint256)": {
        "notice": "Used in POFs and STFs for DCFs. No shifting is applied if a Calc/Shift instead of Shift/Calc BDC is provided."
      }
    },
    "notice": "TODO",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/Core/CEG/CEGActor.sol:CEGActor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1609,
        "contract": "contracts/Core/CEG/CEGActor.sol:CEGActor",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 25958,
        "contract": "contracts/Core/CEG/CEGActor.sol:CEGActor",
        "label": "assetRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IAssetRegistry)27223"
      },
      {
        "astId": 25960,
        "contract": "contracts/Core/CEG/CEGActor.sol:CEGActor",
        "label": "defaultOracleProxy",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IObserverOracleProxy)29384"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAssetRegistry)27223": {
        "encoding": "inplace",
        "label": "contract IAssetRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IObserverOracleProxy)29384": {
        "encoding": "inplace",
        "label": "contract IObserverOracleProxy",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}