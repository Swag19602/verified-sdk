/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class TestCore extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): TestCore;
  methods: {
    MAX_CYCLE_SIZE(): TransactionObject<string>;

    MAX_EVENT_SCHEDULE_SIZE(): TransactionObject<string>;

    ONE_POINT_ZERO(): TransactionObject<string>;

    PRECISION(): TransactionObject<string>;

    _computeDatesFromCycleSegment(
      cycleStart: number | string,
      cycleEnd: number | string,
      cycle: {
        i: number | string;
        p: number | string;
        s: number | string;
        isSet: boolean;
      },
      eomc: number | string,
      addEndTime: boolean,
      segmentStart: number | string,
      segmentEnd: number | string
    ): TransactionObject<string[]>;

    _getNextCycleDate(
      cycle: {
        i: number | string;
        p: number | string;
        s: number | string;
        isSet: boolean;
      },
      cycleStart: number | string,
      cycleIndex: number | string
    ): TransactionObject<string>;

    _getTimestampPlusPeriod(
      period: { i: number | string; p: number | string; isSet: boolean },
      timestamp: number | string
    ): TransactionObject<string>;

    _isInSegment(
      timestamp: number | string,
      startTimestamp: number | string,
      endTimestamp: number | string
    ): TransactionObject<boolean>;

    _roleSign(contractRole: number | string): TransactionObject<string>;

    _yearFraction(
      startTimestamp: number | string,
      endTimestamp: number | string,
      ipdc: number | string,
      maturityDate: number | string
    ): TransactionObject<string>;

    adjustEndOfMonthConvention(
      eomc: number | string,
      startTime: number | string,
      cycle: {
        i: number | string;
        p: number | string;
        s: number | string;
        isSet: boolean;
      }
    ): TransactionObject<string>;

    computeEventTimeForEvent(
      _event: string | number[],
      bdc: number | string,
      calendar: number | string,
      maturityDate: number | string
    ): TransactionObject<string>;

    decodeEvent(
      _event: string | number[]
    ): TransactionObject<{
      0: string;
      1: string;
    }>;

    encodeEvent(
      eventType: number | string,
      scheduleTime: number | string
    ): TransactionObject<string>;

    getEpochOffset(eventType: number | string): TransactionObject<string>;

    shiftCalcTime(
      timestamp: number | string,
      convention: number | string,
      calendar: number | string,
      maturityDate: number | string
    ): TransactionObject<string>;

    shiftEventTime(
      timestamp: number | string,
      convention: number | string,
      calendar: number | string,
      maturityDate: number | string
    ): TransactionObject<string>;
  };
  events: {
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
