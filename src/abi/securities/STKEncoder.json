{
  "address": "0xCC7438CBE0531e6f8B72991769407945eF00C805",
  "abi": [],
  "transactionHash": "0xe9fa8a14a70390de05517427889f49b1b0a0759c95d71a02616131591a59fcbb",
  "receipt": {
    "to": null,
    "from": "0xf6bb741F0C106a504943eaE908C3b67bcf4bF1CC",
    "contractAddress": "0xCC7438CBE0531e6f8B72991769407945eF00C805",
    "transactionIndex": 8,
    "gasUsed": "2336507",
    "logsBloom": "0x
    "blockHash": "0x5d4f53b2762c8397fcf6157cce5db54d637113721dd40ebc3b97dac0e8158cff",
    "transactionHash": "0xe9fa8a14a70390de05517427889f49b1b0a0759c95d71a02616131591a59fcbb",
    "logs": [],
    "blockNumber": 7713005,
    "cumulativeGasUsed": "2974720",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "37e2a100a6f868553298dee57e286371",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decodeAndGetFinalizedSTKState(Asset storage)\":{\"details\":\"Decode and load the finalized STKState of the asset\"},\"decodeAndGetSTKState(Asset storage)\":{\"details\":\"Decode and load the STKState of the asset\"},\"decodeAndGetSTKTerms(Asset storage)\":{\"details\":\"Decode and loads STKTerms\"},\"encodeAndSetFinalizedSTKState(Asset storage,STKState)\":{\"details\":\"Tightly pack and store finalized STKState\"},\"encodeAndSetSTKState(Asset storage,STKState)\":{\"details\":\"Tightly pack and store STKState\"},\"encodeAndSetSTKTerms(Asset storage,STKTerms)\":{\"details\":\"Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"encodeAndSetSTKTerms(Asset storage,STKTerms)\":{\"notice\":\"All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Core/STK/STKEncoder.sol\":\"STKEncoder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ACTUS/Core/ACTUSConstants.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @title ACTUSConstants\\n * @notice Contains all type definitions for ACTUS. See ACTUS-Dictionary for definitions\\n */\\ncontract ACTUSConstants {\\n\\n    // constants used throughout\\n    uint256 constant public PRECISION = 18;\\n    int256 constant public ONE_POINT_ZERO = 1 * 10 ** 18;\\n    uint256 constant public MAX_CYCLE_SIZE = 120;\\n    uint256 constant public MAX_EVENT_SCHEDULE_SIZE = 120;\\n}\\n\",\"keccak256\":\"0x1568471e72800002ad945bf084f96368f5dfb597105f2e3f11534905abda9495\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/ACTUSTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n/**\\n * Commit: https://github.com/atpar/actus-dictionary/commit/b85b9b378967de6bfc4d8b6687b520c48bce9890\\n * Date: 2020-10-06\\n */\\n\\n// IPS\\nenum P {D, W, M, Q, H, Y} // P=[D=Days, W=Weeks, M=Months, Q=Quarters, H=Halfyear, Y=Year]\\nenum S {LONG, SHORT} // S=[+=long stub,- short stub, {} if S empty then - for short stub]\\nstruct IPS {\\n    uint256 i; // I=Integer\\n    P p;\\n    S s;\\n    bool isSet;\\n}\\n\\nstruct IP {\\n    uint256 i;\\n    P p;\\n    bool isSet;\\n}\\n\\n// Number of enum options should be limited to 256 (8 bits) such that 255 enums can be packed fit into 256 bits (bytes32)\\nenum BusinessDayConvention {NOS, SCF, SCMF, CSF, CSMF, SCP, SCMP, CSP, CSMP}\\nenum Calendar {NC, MF}\\nenum ContractPerformance {PF, DL, DQ, DF, MD, TD}\\nenum ContractReferenceType {CNT, CID, MOC, EID, CST}\\nenum ContractReferenceRole {UDL, FIL, SEL, COVE, COVI}\\nenum ContractRole {RPA, RPL, RFL, PFL, RF, PF, BUY, SEL, COL, CNO, UDL, UDLP, UDLM}\\nenum ContractType {PAM, ANN, NAM, LAM, LAX, CLM, UMP, CSH, STK, COM, SWAPS, SWPPV, FXOUT, CAPFL, FUTUR, OPTNS, CEG, CEC, CERTF, COLLA}\\nenum CouponType {NOC, FIX, FCN, PRF}\\nenum CyclePointOfInterestPayment {B, E}\\nenum CyclePointOfRateReset {B, E}\\nenum DayCountConvention {AA, A360, A365, _30E360ISDA, _30E360, _28E336, ONE, OBYT, HRSAA, MINAA, SECAA}\\nenum EndOfMonthConvention {SD, EOM}\\n//               0   1    2    3    4   5   6   7   8   9  10    11  12   13   14   15   16   17   18   19   20   21   22   23   24   25  26  27    28   29  30  31  32  33\\nenum EventType {NE, CE, ISS, IED, PRD, FP, PR, PD, PY, PP, IP, IPCI, RRF, RR, DIF, DIX, DIP, COF, COP, REF, REX, REP, SPF, SPS, EXO, EXE, ST, SC, IPCB, PRF, MC, TD, MD, AD}\\nenum FeeBasis {A, N}\\n// enum GuaranteedExposure {NO, NI, MV} // not implemented\\n// enum InterestCalculationBase {NT, NTIED, NTL} // not implemented\\n// enum PenaltyType {O, A, N, I}\\n// enum PrepaymentEffect {N, A, M} // not implemented\\nenum RedeemableByIssuer {Y, N}\\nenum ScalingEffect {_000, I00, _0N0, IN0}\\n// enum Seniority {S, J} // not implemented\\n\\nstruct ContractReference {\\n    bytes32 object;\\n    bytes32 object2; // workaround for solc bug (replace object and object2 with single bytes attribute)\\n    ContractReferenceType _type;\\n    ContractReferenceRole role;\\n}\\n\\nstruct UnderlyingState {\\n    int256 exerciseAmount;\\n    bool isSet;\\n}\\n\\nstruct ANNState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n    int256 nextPrincipalRedemptionPayment;\\n}\\n\\nstruct CECState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n\\n    int256 feeAccrued;\\n    int256 exerciseAmount;\\n}\\n\\nstruct CEGState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    int256 feeAccrued;\\n    int256 exerciseAmount;\\n}\\n\\nstruct CERTFState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastCouponFixingDate;\\n\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n}\\n\\nstruct PAMState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n}\\n\\nstruct STKState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastDividendFixingDate;\\n    // uint256 dividendFixingDate; // not implemented\\n    // uint256 dividendExDate; // not implemented\\n    // uint256 dividendPaymentDate; // not implemented\\n    // uint256 splitSettlementDate; // not implemented\\n    // uint256 redemptionExDate; // not implemented\\n    // uint256 redemptionPaymentDate; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n    int256 dividendPaymentAmount;\\n    int256 splitRatio;\\n}\\n\\nstruct COLLAState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    int256 accruedInterest;\\n    int256 nominalInterestRate;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n}\\n\\nstruct ANNTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // InterestCalculationBase interestCalculationBase; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 ammortizationDate; // not implemented\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    // uint256 cycleAnchorDateOfInterestCalculationBase; // not implemented\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    uint256 cycleAnchorDateOfPrincipalRedemption;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 nextPrincipalRedemptionPayment;\\n    // int256 coverageOfCreditEnhancement;\\n    // int256 interestCalculationBaseAmount; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    IPS cycleOfPrincipalRedemption;\\n    // IPS cycleOfOptionality; // not implemented\\n    // IPS cycleOfInterestCalculationBase; // not implemented\\n}\\n\\nstruct CECTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ContractPerformance creditEventTypeCovered;\\n    FeeBasis feeBasis;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    // uint256 exerciseDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 feeRate;\\n    // int256 exerciseAmount; // state only\\n    int256 coverageOfCreditEnhancement;\\n\\n    // IP settlementPeriod; // not implemented\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CEGTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    ContractPerformance creditEventTypeCovered;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 exerciseDate; // state only\\n    // uint256 nonPerformingDate; // state only\\n\\n    int256 notionalPrincipal;\\n    // int256 delinquencyRate; not implemented\\n    int256 feeAccrued;\\n    int256 feeRate;\\n    int256 priceAtPurchaseDate;\\n    int256 coverageOfCreditEnhancement;\\n    // int256 exerciseAmount; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP settlementPeriod; // not implemented\\n\\n    IPS cycleOfFee;\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CERTFTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    CouponType couponType;\\n    // ContractPerformance contractPerformance; state only\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 issueDate;\\n    // uint256 lastCouponFixingDate; // state only\\n    uint256 cycleAnchorDateOfRedemption;\\n    uint256 cycleAnchorDateOfTermination;\\n    uint256 cycleAnchorDateOfCoupon;\\n\\n    int256 nominalPrice;\\n    int256 issuePrice;\\n    // int256 delinquencyRate; // not implemented\\n    int256 quantity;\\n    // int256 exerciseQuantity; // state only\\n    // int256 exerciseQuantityOrdered; // state only\\n    // int256 marginFactor;  // state only\\n    // int256 adjustmentFactor; // state only\\n    int256 denominationRatio;\\n    int256 couponRate;\\n    // int256 exerciseAmount; // state only\\n    // int256 couponAmountFixed; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    IP settlementPeriod;\\n    IP fixingPeriod;\\n    IP redemptionRecordPeriod;\\n\\n    IPS cycleOfRedemption;\\n    IPS cycleOfTermination;\\n    IPS cycleOfCoupon;\\n\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct PAMTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // CyclePointOfInterestPayment cyclePointOfInterestPayment; // not implemented\\n    // CyclePointOfRateReset cyclePointOfRateReset; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; // not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    // IPS cycleOfOptionality; // not implemented\\n}\\n\\nstruct STKTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    RedeemableByIssuer redeemableByIssuer;\\n    // Seniority seniority; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 issueDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfDividend;\\n\\n    int256 nominalPrice;\\n    int256 notionalPrincipal;\\n    int256 issuePrice;\\n    int256 quantity;\\n    int256 priceAtPurchaseDate;\\n    int256 redemptionPrice;\\n    int256 priceAtTerminationDate;\\n\\n    IP dividendRecordPeriod;\\n    IP dividendPaymentPeriod;\\n    IP splitSettlementPeriod;\\n    IP redemptionRecordPeriod;\\n    IP redemptionPaymentPeriod;\\n\\n    IPS cycleOfDividend;\\n}\\n\\nstruct COLLATerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    // ContractPerformance contractPerformance; // state only\\n\\n    bytes32 marketObjectCodeOfCollateral;\\n\\n    address currency;\\n    address settlementCurrency;\\n    address collateralCurrency;\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 premiumDiscountAtIED;\\n    int256 coverageOfCollateral;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n\\n    IPS cycleOfInterestPayment;\\n}\\n\",\"keccak256\":\"0x79bdd18aa3c6bdb9bb27e50b140bf43977ced292fdf89c2b2a237a0ec6c719fb\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/BaseRegistryStorage.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Conversions.sol\\\";\\nimport \\\"../SharedTypes.sol\\\";\\nimport \\\"./Schedule/ScheduleEncoder.sol\\\";\\n\\n\\nstruct Settlement {\\n    bool isSettled;\\n    int256 payoff;\\n}\\n\\nstruct Asset {\\n    // boolean indicating that asset exists / is registered\\n    bool isSet;\\n    // address of the ACTUS Engine used for computing the State and the Payoff of the asset\\n    address engine;\\n    // address of the Asset Actor which is allowed to update the State of the asset\\n    address actor;\\n    // address of the Extension which is able to generate unscheduled events for the asset\\n    address extension;\\n    // schedule of the asset\\n    Schedule schedule;\\n    // ownership of the asset\\n    AssetOwnership ownership;\\n    // method level access control - stores which address can a specific method\\n    // method signature => address => has access\\n    mapping (bytes4 => mapping (address => bool)) access;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedTerms;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedState;\\n    // indicates whether a specific event was settled\\n    mapping (bytes32 => Settlement) settlement;\\n}\\n\\n/**\\n * @title BaseRegistryStorage\\n * @notice Describes the storage of the AssetRegistry\\n * Contains getter and setter methods for encoding, decoding data to optimize gas cost.\\n * Circumvents storing default values by relying on the characteristic of mappings returning zero for not set values.\\n */\\nabstract contract BaseRegistryStorage {\\n\\n    using ScheduleEncoder for Asset;\\n\\n    // AssetId => Asset\\n    mapping (bytes32 => Asset) internal assets;\\n}\\n\",\"keccak256\":\"0x3e8beac681f832d8b6dcf0a1be328ae129c7d71e7ab75ebe2d0809edcc813b46\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Schedule/ScheduleEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary ScheduleEncoder {\\n\\n    function encodeAndSetSchedule(Asset storage asset, bytes32[] memory schedule) internal {\\n        for (uint256 i = 0; i < schedule.length; i++) {\\n            if (schedule[i] == bytes32(0)) break;\\n            asset.schedule.events[i] = schedule[i];\\n            asset.schedule.length = i + 1;\\n        }\\n    }\\n\\n    function decodeAndGetSchedule(Asset storage asset) internal view returns (bytes32[] memory) {\\n        bytes32[] memory schedule = new bytes32[](asset.schedule.length);\\n\\n        for (uint256 i = 0; i < asset.schedule.length; i++) {\\n            schedule[i] = asset.schedule.events[i];\\n        }\\n\\n        return schedule;\\n    }\\n}\\n\",\"keccak256\":\"0x420da04c67322d387c9b0fbeb00accc59a63fb9c10cb7b4c21f955792c4ad236\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/Conversions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SharedTypes.sol\\\";\\n\\n\\ncontract Conversions {\\n\\n    function encodeCollateralAsObject(address collateralToken, uint256 collateralAmount)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(collateralToken))) << 96 | bytes32(uint256(uint96(collateralAmount)));\\n    }\\n\\n    function decodeCollateralObject(bytes32 object)\\n        public\\n        pure\\n        returns (address, uint256)\\n    {\\n        return (\\n            address(uint160(uint256(object >> 96))),\\n            uint256(uint96(uint256(object)))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcc273a4272ffd03ef3f6fd329590a25049482661820ee4dcc953d28eeb4a9a95\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/SharedTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../ACTUS/Core/ACTUSTypes.sol\\\";\\nimport \\\"../../ACTUS/Core/ACTUSConstants.sol\\\";\\n\\n\\nstruct AssetOwnership {\\n    // account which has to fulfill all obligations for the creator side\\n    address creatorObligor;\\n    // account to which all cashflows to which the creator is the beneficiary are forwarded\\n    address creatorBeneficiary;\\n    // account which has to fulfill all obligations for the counterparty\\n    address counterpartyObligor;\\n    // account to which all cashflows to which the counterparty is the beneficiary are forwarded\\n    address counterpartyBeneficiary;\\n}\\n\\n// scheduleTime and EventType are tightly packed and encoded as bytes32\\nstruct Schedule {\\n    // schedule times of cyclic events (used if no schedule is set)\\n    mapping(EventType => uint256) lastScheduleTimeOfCyclicEvent;\\n    // index of event => bytes32 encoded event\\n    mapping(uint256 => bytes32) events;\\n    // the length of the schedule, used to determine the end of the schedule\\n    uint256 length;\\n    // pointer to index of the next event in the schedule\\n    uint256 nextScheduleIndex;\\n    // last event which could not be settled\\n    bytes32 pendingEvent;\\n    // last non-cyclic event which was processed (used if no schedule is set)\\n    bytes32 lastNonCyclicEvent;\\n}\\n\",\"keccak256\":\"0xadbb252a62b8641f01338ce1650d5d59ccc4a6f3f0e62c49e7b16bf51d2a46b8\",\"license\":\"Apache-2.0\"},\"contracts/Core/STK/STKEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Base/SharedTypes.sol\\\";\\nimport \\\"../Base/AssetRegistry/BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary STKEncoder {\\n\\n    function storeInPackedTerms(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedTerms[attributeKey] == value) return;\\n        asset.packedTerms[attributeKey] = value;\\n    }\\n\\n    function storeInPackedState(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedState[attributeKey] == value) return;\\n        asset.packedState[attributeKey] = value;\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\\n     * @notice All non zero values of the overwrittenTerms object are stored.\\n     * It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\\n     */\\n    function encodeAndSetSTKTerms(Asset storage asset, STKTerms memory terms) external {\\n        storeInPackedTerms(\\n            asset,\\n            \\\"enums\\\",\\n            bytes32(uint256(uint8(terms.contractType))) << 248 |\\n            bytes32(uint256(uint8(terms.calendar))) << 240 |\\n            bytes32(uint256(uint8(terms.contractRole))) << 232 |\\n            bytes32(uint256(uint8(terms.dayCountConvention))) << 224 |\\n            bytes32(uint256(uint8(terms.businessDayConvention))) << 216 |\\n            bytes32(uint256(uint8(terms.endOfMonthConvention))) << 208 |\\n            bytes32(uint256(uint8(terms.redeemableByIssuer))) << 200\\n        );\\n\\n        storeInPackedTerms(asset, \\\"currency\\\", bytes32(uint256(terms.currency) << 96));\\n        storeInPackedTerms(asset, \\\"settlementCurrency\\\", bytes32(uint256(terms.settlementCurrency) << 96));\\n\\n        storeInPackedTerms(asset, \\\"statusDate\\\", bytes32(terms.statusDate));\\n        storeInPackedTerms(asset, \\\"issueDate\\\", bytes32(terms.issueDate));\\n        storeInPackedTerms(asset, \\\"purchaseDate\\\", bytes32(terms.purchaseDate));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfDividend\\\", bytes32(terms.cycleAnchorDateOfDividend));\\n\\n        storeInPackedTerms(asset, \\\"nominalPrice\\\", bytes32(terms.nominalPrice));\\n        storeInPackedTerms(asset, \\\"notionalPrincipal\\\", bytes32(terms.notionalPrincipal));\\n        storeInPackedTerms(asset, \\\"issuePrice\\\", bytes32(terms.issuePrice));\\n        storeInPackedTerms(asset, \\\"quantity\\\", bytes32(terms.quantity));\\n        storeInPackedTerms(asset, \\\"priceAtPurchaseDate\\\", bytes32(terms.priceAtPurchaseDate));\\n        storeInPackedTerms(asset, \\\"priceAtTerminationDate\\\", bytes32(terms.priceAtTerminationDate));\\n        storeInPackedTerms(asset, \\\"redemptionPrice\\\", bytes32(terms.redemptionPrice));\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"dividendRecordPeriod\\\",\\n            bytes32(uint256(terms.dividendRecordPeriod.i)) << 24 |\\n            bytes32(uint256(terms.dividendRecordPeriod.p)) << 16 |\\n            bytes32(uint256((terms.dividendRecordPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"dividendPaymentPeriod\\\",\\n            bytes32(uint256(terms.dividendPaymentPeriod.i)) << 24 |\\n            bytes32(uint256(terms.dividendPaymentPeriod.p)) << 16 |\\n            bytes32(uint256((terms.dividendPaymentPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"splitSettlementPeriod\\\",\\n            bytes32(uint256(terms.splitSettlementPeriod.i)) << 24 |\\n            bytes32(uint256(terms.splitSettlementPeriod.p)) << 16 |\\n            bytes32(uint256((terms.splitSettlementPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"redemptionRecordPeriod\\\",\\n            bytes32(uint256(terms.redemptionRecordPeriod.i)) << 24 |\\n            bytes32(uint256(terms.redemptionRecordPeriod.p)) << 16 |\\n            bytes32(uint256((terms.redemptionRecordPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"redemptionPaymentPeriod\\\",\\n            bytes32(uint256(terms.redemptionPaymentPeriod.i)) << 24 |\\n            bytes32(uint256(terms.redemptionPaymentPeriod.p)) << 16 |\\n            bytes32(uint256((terms.redemptionPaymentPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfDividend\\\",\\n            bytes32(uint256(terms.cycleOfDividend.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfDividend.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfDividend.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfDividend.isSet) ? 1 : 0))\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and loads STKTerms\\n     */\\n    function decodeAndGetSTKTerms(Asset storage asset) external view returns (STKTerms memory) {\\n        return STKTerms(\\n            ContractType(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248))),\\n            Calendar(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240))),\\n            ContractRole(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232))),\\n            DayCountConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224))),\\n            BusinessDayConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216))),\\n            EndOfMonthConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208))),\\n            RedeemableByIssuer(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200))),\\n\\n            address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96)),\\n            address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96)),\\n\\n            uint256(asset.packedTerms[\\\"statusDate\\\"]),\\n            uint256(asset.packedTerms[\\\"issueDate\\\"]),\\n            uint256(asset.packedTerms[\\\"purchaseDate\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfDividend\\\"]),\\n\\n            int256(asset.packedTerms[\\\"nominalPrice\\\"]),\\n            int256(asset.packedTerms[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedTerms[\\\"issuePrice\\\"]),\\n            int256(asset.packedTerms[\\\"quantity\\\"]),\\n            int256(asset.packedTerms[\\\"priceAtPurchaseDate\\\"]),\\n            int256(asset.packedTerms[\\\"priceAtTerminationDate\\\"]),\\n            int256(asset.packedTerms[\\\"redemptionPrice\\\"]),\\n\\n            IP(\\n                uint256(asset.packedTerms[\\\"dividendRecordPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"dividendRecordPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"dividendRecordPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"dividendPaymentPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"dividendPaymentPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"dividendPaymentPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"splitSettlementPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"splitSettlementPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"splitSettlementPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"redemptionRecordPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"redemptionRecordPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"redemptionRecordPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"redemptionPaymentPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"redemptionPaymentPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"redemptionPaymentPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfDividend\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfDividend\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfDividend\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfDividend\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            )\\n        );\\n    }\\n\\n    function decodeAndGetEnumValueForSTKAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractType\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"calendar\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240));\\n        } else if (attributeKey == bytes32(\\\"contractRole\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232));\\n        } else if (attributeKey == bytes32(\\\"dayCountConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224));\\n        } else if (attributeKey == bytes32(\\\"businessDayConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216));\\n        } else if (attributeKey == bytes32(\\\"endOfMonthConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208));\\n        } else if (attributeKey == bytes32(\\\"redeemableByIssuer\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetAddressValueForForSTKAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (address)\\n    {\\n        if (attributeKey == bytes32(\\\"currency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96));\\n        } else if (attributeKey == bytes32(\\\"settlementCurrency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96));\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function decodeAndGetBytes32ValueForForSTKAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return asset.packedTerms[attributeKey];\\n    }\\n\\n    function decodeAndGetUIntValueForForSTKAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForForSTKAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetPeriodValueForForSTKAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IP memory)\\n    {\\n        if (\\n            attributeKey == bytes32(\\\"dividendRecordPeriod\\\")\\n            || attributeKey == bytes32(\\\"dividendPaymentPeriod\\\")\\n            || attributeKey == bytes32(\\\"splitSettlementPeriod\\\")\\n            || attributeKey == bytes32(\\\"redemptionRecordPeriod\\\")\\n            || attributeKey == bytes32(\\\"redemptionPaymentPeriod\\\")\\n        ) {\\n            return IP(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                (asset.packedTerms[attributeKey] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IP(0, P(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetCycleValueForForSTKAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IPS memory)\\n    {\\n        if ( attributeKey == bytes32(\\\"cycleOfDividend\\\") ) {\\n            return IPS(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[attributeKey] >> 8))),\\n                (asset.packedTerms[attributeKey] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IPS(0, P(0), S(0), false);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store STKState\\n     */\\n    function encodeAndSetSTKState(Asset storage asset, STKState memory state) external {\\n        storeInPackedState(asset, \\\"contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"exerciseDate\\\", bytes32(state.exerciseDate));\\n        storeInPackedState(asset, \\\"terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"lastDividendFixingDate\\\", bytes32(state.lastDividendFixingDate));\\n        storeInPackedState(asset, \\\"notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"exerciseAmount\\\", bytes32(state.exerciseAmount));\\n        storeInPackedState(asset, \\\"exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n        storeInPackedState(asset, \\\"quantity\\\", bytes32(state.quantity));\\n        storeInPackedState(asset, \\\"couponAmountFixed\\\", bytes32(state.couponAmountFixed));\\n        storeInPackedState(asset, \\\"marginFactor\\\", bytes32(state.marginFactor));\\n        storeInPackedState(asset, \\\"adjustmentFactor\\\", bytes32(state.adjustmentFactor));\\n        storeInPackedState(asset, \\\"dividendPaymentAmount\\\", bytes32(state.dividendPaymentAmount));\\n        storeInPackedState(asset, \\\"splitRatio\\\", bytes32(state.splitRatio));\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store finalized STKState\\n     */\\n    function encodeAndSetFinalizedSTKState(Asset storage asset, STKState memory state) external {\\n        storeInPackedState(asset, \\\"F_contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"F_statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"F_nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"F_maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"F_exerciseDate\\\", bytes32(state.exerciseDate));\\n        storeInPackedState(asset, \\\"F_terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"F_lastDividendFixingDate\\\", bytes32(state.lastDividendFixingDate));\\n        storeInPackedState(asset, \\\"F_notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"F_exerciseAmount\\\", bytes32(state.exerciseAmount));\\n        storeInPackedState(asset, \\\"F_exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n        storeInPackedState(asset, \\\"F_quantity\\\", bytes32(state.quantity));\\n        storeInPackedState(asset, \\\"F_couponAmountFixed\\\", bytes32(state.couponAmountFixed));\\n        storeInPackedState(asset, \\\"F_marginFactor\\\", bytes32(state.marginFactor));\\n        storeInPackedState(asset, \\\"F_adjustmentFactor\\\", bytes32(state.adjustmentFactor));\\n        storeInPackedState(asset, \\\"F_dividendPaymentAmount\\\", bytes32(state.dividendPaymentAmount));\\n        storeInPackedState(asset, \\\"F_splitRatio\\\", bytes32(state.splitRatio));\\n    }\\n\\n    /**\\n     * @dev Decode and load the STKState of the asset\\n     */\\n    function decodeAndGetSTKState(Asset storage asset)\\n        external\\n        view\\n        returns (STKState memory)\\n    {\\n        return STKState(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"statusDate\\\"]),\\n            uint256(asset.packedState[\\\"nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"exerciseDate\\\"]),\\n            uint256(asset.packedState[\\\"terminationDate\\\"]),\\n            uint256(asset.packedState[\\\"lastDividendFixingDate\\\"]),\\n            int256(asset.packedState[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"exerciseAmomunt\\\"]),\\n            int256(asset.packedState[\\\"exerciseQuantity\\\"]),\\n            int256(asset.packedState[\\\"quantity\\\"]),\\n            int256(asset.packedState[\\\"couponAmountFixed\\\"]),\\n            int256(asset.packedState[\\\"marginFactor\\\"]),\\n            int256(asset.packedState[\\\"adjustmentFactor\\\"]),\\n            int256(asset.packedState[\\\"dividendPaymentAmount\\\"]),\\n            int256(asset.packedState[\\\"splitRatio\\\"])\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and load the finalized STKState of the asset\\n     */\\n    function decodeAndGetFinalizedSTKState(Asset storage asset)\\n        external\\n        view\\n        returns (STKState memory)\\n    {\\n        return STKState(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"F_statusDate\\\"]),\\n            uint256(asset.packedState[\\\"F_nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"F_maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"F_exerciseDate\\\"]),\\n            uint256(asset.packedState[\\\"F_terminationDate\\\"]),\\n            uint256(asset.packedState[\\\"F_lastDividendFixingDate\\\"]),\\n            int256(asset.packedState[\\\"F_notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"F_exerciseAmomunt\\\"]),\\n            int256(asset.packedState[\\\"F_exerciseQuantity\\\"]),\\n            int256(asset.packedState[\\\"F_quantity\\\"]),\\n            int256(asset.packedState[\\\"F_couponAmountFixed\\\"]),\\n            int256(asset.packedState[\\\"F_marginFactor\\\"]),\\n            int256(asset.packedState[\\\"F_adjustmentFactor\\\"]),\\n            int256(asset.packedState[\\\"F_dividendPaymentAmount\\\"]),\\n            int256(asset.packedState[\\\"F_splitRatio\\\"])\\n        );\\n    }\\n\\n    function decodeAndGetEnumValueForSTKStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"F_contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetUIntValueForSTKStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedState[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForSTKStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedState[attributeKey]);\\n    }\\n}\\n\",\"keccak256\":\"0x1f341a822b54872a4f28758b3a15fab9ef04a5de25b5a007cbba97f05338f8fd\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x61294d610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061010a5760003560e01c8063839ebf60116100a1578063aadcc0d711610070578063aadcc0d714610158578063c779967714610233578063ce3f6e3014610253578063fc7c1f94146102735761010a565b8063839ebf60146101ed578063974b2c77146101da5780639c9442b61461020d578063a04692af146102205761010a565b806369d88996116100dd57806369d889961461019a5780636aa96857146101585780636eff8f1f146101ba57806371599c60146101da5761010a565b80631ef758d11461010f5780634dbb8477146101385780635fe316eb146101585780636954c42914610178575b600080fd5b61012261011d366004612276565b610293565b60405161012f919061262d565b60405180910390f35b61014b61014636600461225e565b6103a2565b60405161012f9190612709565b61016b610166366004612276565b610bbb565b60405161012f9190612624565b81801561018457600080fd5b50610198610193366004612297565b610bd1565b005b6101ad6101a836600461225e565b610e2a565b60405161012f9190612649565b6101cd6101c8366004612276565b6110a4565b60405161012f919061263b565b61016b6101e8366004612276565b6111e7565b6102006101fb366004612276565b6111fd565b60405161012f91906128b4565b6101ad61021b36600461225e565b6113b6565b61020061022e366004612276565b611610565b81801561023f57600080fd5b5061019861024e36600461238f565b6116b4565b610266610261366004612276565b611bfa565b60405161012f9190612610565b81801561027f57600080fd5b5061019861028e366004612297565b611c82565b61029b611f51565b6e18de58db1953d9911a5d9a59195b99608a1b82141561037257604080516080810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff1660058111156102f457fe5b60058111156102ff57fe5b8152602001600885600e01600086815260200190815260200160002054901c60001c60ff16600181111561032f57fe5b600181111561033a57fe5b81526000848152600e86016020908152604090912054910190600190811614610364576000610367565b60015b15159052905061039c565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290505b92915050565b6103aa611f7b565b604080516103408101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c60138111156103df57fe5b60138111156103ea57fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561042257fe5b600181111561042d57fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c81111561046557fe5b600c81111561047057fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600a8111156104a857fe5b600a8111156104b357fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660088111156104eb57fe5b60088111156104f657fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561052e57fe5b600181111561053957fe5b815260200160c884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561057157fe5b600181111561057c57fe5b81526763757272656e637960c01b6000908152600e85016020818152604080842054606090811c8387015271736574746c656d656e7443757272656e637960701b855283835281852054811c82870152697374617475734461746560b01b855283835281852054818701526869737375654461746560b81b85528383528185205460808701526b70757263686173654461746560a01b85528383528185205460a08701527818de58db19505b98da1bdc91185d1953d9911a5d9a59195b99603a1b85528383528185205460c08701526b6e6f6d696e616c507269636560a01b85528383528185205460e0870152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b855283835281852054610100870152696973737565507269636560b01b855283835281852054610120870152677175616e7469747960c01b855283835281852054610140870152727072696365417450757263686173654461746560681b85528383528185205461016087015275707269636541745465726d696e6174696f6e4461746560501b8552838352818520546101808701526e726564656d7074696f6e507269636560881b8552838352818520546101a08701528151908101825273191a5d9a59195b99149958dbdc9914195c9a5bd960621b80865284845291852054601881901c8252919094529181526101c09093019282019060101c60ff16600581111561078857fe5b600581111561079357fe5b815273191a5d9a59195b99149958dbdc9914195c9a5bd960621b6000908152600e8701602090815260409091205491019060081c6001908116146107d85760006107db565b60015b1515905281526040805160608101825274191a5d9a59195b9914185e5b595b9d14195c9a5bd9605a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561083d57fe5b600581111561084857fe5b815274191a5d9a59195b9914185e5b595b9d14195c9a5bd9605a1b6000908152600e8701602090815260409091205491019060081c60019081161461088e576000610891565b60015b15159052815260408051606081018252741cdc1b1a5d14d95d1d1b195b595b9d14195c9a5bd9605a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff1660058111156108f357fe5b60058111156108fe57fe5b8152741cdc1b1a5d14d95d1d1b195b595b9d14195c9a5bd9605a1b6000908152600e8701602090815260409091205491019060081c600190811614610944576000610947565b60015b15159052815260408051606081018252751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff1660058111156109aa57fe5b60058111156109b557fe5b8152751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b6000908152600e8701602090815260409091205491019060081c6001908116146109fc5760006109ff565b60015b15159052815260408051606081018252761c9959195b5c1d1a5bdb94185e5b595b9d14195c9a5bd9604a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610a6357fe5b6005811115610a6e57fe5b8152761c9959195b5c1d1a5bdb94185e5b595b9d14195c9a5bd9604a1b6000908152600e8701602090815260409091205491019060081c600190811614610ab6576000610ab9565b60015b151590528152604080516080810182526e18de58db1953d9911a5d9a59195b99608a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610b1557fe5b6005811115610b2057fe5b8152602001600886600e0160006e18de58db1953d9911a5d9a59195b99608a1b815260200190815260200160002054901c60001c60ff166001811115610b6257fe5b6001811115610b6d57fe5b81526e18de58db1953d9911a5d9a59195b99608a1b6000908152600e87016020908152604090912054910190600190811614610baa576000610bad565b60015b15159052905290505b919050565b6000908152600e91909101602052604090205490565b610c088272636f6e7472616374506572666f726d616e636560681b60f884600001516005811115610bfe57fe5b60ff16901b611ee9565b610c2782697374617475734461746560b01b836020015160001b611ee9565b610c4d82706e6f6e506572666f726d696e674461746560781b836040015160001b611ee9565b610c6e826b6d617475726974794461746560a01b836060015160001b611ee9565b610c8f826b65786572636973654461746560a01b836080015160001b611ee9565b610cb3826e7465726d696e6174696f6e4461746560881b8360a0015160001b611ee9565b610cde82756c6173744469766964656e64466978696e674461746560501b8360c0015160001b611ee9565b610d0482701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b8360e0015160001b611ee9565b610d28826d195e195c98da5cd9505b5bdd5b9d60921b83610100015160001b611ee9565b610d4e826f65786572636973655175616e7469747960801b83610120015160001b611ee9565b610d6c82677175616e7469747960c01b83610140015160001b611ee9565b610d93827018dbdd5c1bdb905b5bdd5b9d119a5e1959607a1b83610160015160001b611ee9565b610db5826b36b0b933b4b72330b1ba37b960a11b83610180015160001b611ee9565b610ddb826f30b2353ab9ba36b2b73a2330b1ba37b960811b836101a0015160001b611ee9565b610e068274191a5d9a59195b9914185e5b595b9d105b5bdd5b9d605a1b836101c0015160001b611ee9565b610e26826973706c6974526174696f60b01b836101e0015160001b611ee9565b5050565b610e32612074565b604080516102008101825274465f636f6e7472616374506572666f726d616e636560581b6000908152600f85016020529190912054819060f81c6005811115610e7757fe5b6005811115610e8257fe5b81526b465f7374617475734461746560a01b6000908152600f850160208181526040808420548286015272465f6e6f6e506572666f726d696e674461746560681b845282825280842054818601526d465f6d617475726974794461746560901b84528282528084205460608601526d465f65786572636973654461746560901b845282825280842054608086015270465f7465726d696e6174696f6e4461746560781b84528282528084205460a086015277465f6c6173744469766964656e64466978696e674461746560401b84528282528084205460c0860152721197db9bdd1a5bdb985b141c9a5b98da5c185b606a1b84528282528084205460e0860152701197d95e195c98da5cd9505b5bdb5d5b9d607a1b84528282528084205461010086015271465f65786572636973655175616e7469747960701b84528282528084205461012086015269465f7175616e7469747960b01b845282825280842054610140860152721197d8dbdd5c1bdb905b5bdd5b9d119a5e1959606a1b8452828252808420546101608601526d232fb6b0b933b4b72330b1ba37b960911b84528282528084205461018086015271232fb0b2353ab9ba36b2b73a2330b1ba37b960711b8452828252808420546101a0860152761197d91a5d9a59195b9914185e5b595b9d105b5bdd5b9d604a1b8452828252808420546101c08601526b465f73706c6974526174696f60a01b84529190529020546101e0909101529050919050565b6110ac6120f2565b73191a5d9a59195b99149958dbdc9914195c9a5bd960621b8214806110e8575074191a5d9a59195b9914185e5b595b9d14195c9a5bd9605a1b82145b8061110a5750741cdc1b1a5d14d95d1d1b195b595b9d14195c9a5bd9605a1b82145b8061112d5750751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b82145b806111515750761c9959195b5c1d1a5bdb94185e5b595b9d14195c9a5bd9604a1b82145b156111cd57604080516060810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561119557fe5b60058111156111a057fe5b81526000848152600e8601602090815260409091205491019060081c600190811614610364576000610367565b60408051606081019091526000808252602082019061038f565b6000908152600f91909101602052604090205490565b60006b636f6e74726163745479706560a01b821415611239575064656e756d7360d81b6000908152600e8301602052604090205460f81c61039c565b6731b0b632b73230b960c11b82141561126f575064656e756d7360d81b6000908152600e8301602052604090205460f01c61039c565b6b636f6e7472616374526f6c6560a01b8214156112a9575064656e756d7360d81b6000908152600e8301602052604090205460e81c61039c565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b8214156112e9575064656e756d7360d81b6000908152600e8301602052604090205460e01c61039c565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b82141561132c575064656e756d7360d81b6000908152600e8301602052604090205460d81c61039c565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b82141561136e575064656e756d7360d81b6000908152600e8301602052604090205460d01c61039c565b713932b232b2b6b0b13632a13ca4b9b9bab2b960711b8214156113ae575064656e756d7360d81b6000908152600e8301602052604090205460c81c61039c565b50600061039c565b6113be612074565b604080516102008101825272636f6e7472616374506572666f726d616e636560681b6000908152600f85016020529190912054819060f81c600581111561140157fe5b600581111561140c57fe5b8152697374617475734461746560b01b6000908152600f8501602081815260408084205482860152706e6f6e506572666f726d696e674461746560781b845282825280842054818601526b6d617475726974794461746560a01b84528282528084205460608601526b65786572636973654461746560a01b84528282528084205460808601526e7465726d696e6174696f6e4461746560881b84528282528084205460a0860152756c6173744469766964656e64466978696e674461746560501b84528282528084205460c0860152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b84528282528084205460e08601526e195e195c98da5cd9505b5bdb5d5b9d608a1b8452828252808420546101008601526f65786572636973655175616e7469747960801b845282825280842054610120860152677175616e7469747960c01b8452828252808420546101408601527018dbdd5c1bdb905b5bdd5b9d119a5e1959607a1b8452828252808420546101608601526b36b0b933b4b72330b1ba37b960a11b8452828252808420546101808601526f30b2353ab9ba36b2b73a2330b1ba37b960811b8452828252808420546101a086015274191a5d9a59195b9914185e5b595b9d105b5bdd5b9d605a1b8452828252808420546101c08601526973706c6974526174696f60b01b84529190529020546101e0909101529050919050565b600072636f6e7472616374506572666f726d616e636560681b821415611661575072636f6e7472616374506572666f726d616e636560681b6000908152600f8301602052604090205460f81c61039c565b74465f636f6e7472616374506572666f726d616e636560581b8214156113ae575074465f636f6e7472616374506572666f726d616e636560581b6000908152600f8301602052604090205460f81c61039c565b61177f8264656e756d7360d81b60c88460c0015160018111156116d357fe5b60ff1660001b901b60d08560a0015160018111156116ed57fe5b60ff1660001b901b60d88660800151600881111561170757fe5b60ff1660001b901b60e08760600151600a81111561172157fe5b60ff1660001b901b60e88860400151600c81111561173b57fe5b60ff1660001b901b60f08960200151600181111561175557fe5b60ff1660001b901b60f88a60000151601381111561176f57fe5b60ff16901b171717171717611f1f565b6117a9826763757272656e637960c01b60608460e001516001600160a01b0316901b60001b611f1f565b6117de8271736574746c656d656e7443757272656e637960701b60608461010001516001600160a01b0316901b60001b611f1f565b6117fe82697374617475734461746560b01b83610120015160001b611f1f565b61181d826869737375654461746560b81b83610140015160001b611f1f565b61183f826b70757263686173654461746560a01b83610160015160001b611f1f565b61186e827818de58db19505b98da1bdc91185d1953d9911a5d9a59195b99603a1b83610180015160001b611f1f565b611890826b6e6f6d696e616c507269636560a01b836101a0015160001b611f1f565b6118b782701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b836101c0015160001b611f1f565b6118d782696973737565507269636560b01b836101e0015160001b611f1f565b6118f582677175616e7469747960c01b83610200015160001b611f1f565b61191e82727072696365417450757263686173654461746560681b83610220015160001b611f1f565b61194a8275707269636541745465726d696e6174696f6e4461746560501b83610260015160001b611f1f565b61196f826e726564656d7074696f6e507269636560881b83610240015160001b611f1f565b6119d78273191a5d9a59195b99149958dbdc9914195c9a5bd960621b6008846102800151604001516119a25760006119a5565b60015b60ff1660001b901b60108561028001516020015160058111156119c457fe5b6102808701515160181b911b1717611f1f565b611a408274191a5d9a59195b9914185e5b595b9d14195c9a5bd9605a1b6008846102a0015160400151611a0b576000611a0e565b60015b60ff1660001b901b6010856102a00151602001516005811115611a2d57fe5b6102a08701515160181b911b1717611f1f565b611aa982741cdc1b1a5d14d95d1d1b195b595b9d14195c9a5bd9605a1b6008846102c0015160400151611a74576000611a77565b60015b60ff1660001b901b6010856102c00151602001516005811115611a9657fe5b6102c08701515160181b911b1717611f1f565b611b1382751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b6008846102e0015160400151611ade576000611ae1565b60015b60ff1660001b901b6010856102e00151602001516005811115611b0057fe5b6102e08701515160181b911b1717611f1f565b611b7e82761c9959195b5c1d1a5bdb94185e5b595b9d14195c9a5bd9604a1b600884610300015160400151611b49576000611b4c565b60015b60ff1660001b901b6010856103000151602001516005811115611b6b57fe5b6103008701515160181b911b1717611f1f565b610e26826e18de58db1953d9911a5d9a59195b99608a1b83610320015160600151611baa576000611bad565b60015b60ff1660001b6008856103200151604001516001811115611bca57fe5b60001b901b6010866103200151602001516005811115611be657fe5b6103208801515160181b911b171717611f1f565b60006763757272656e637960c01b821415611c3557506763757272656e637960c01b6000908152600e8301602052604090205460601c61039c565b71736574746c656d656e7443757272656e637960701b8214156113ae575071736574746c656d656e7443757272656e637960701b6000908152600e8301602052604090205460601c61039c565b611cb18274465f636f6e7472616374506572666f726d616e636560581b60f884600001516005811115610bfe57fe5b611cd2826b465f7374617475734461746560a01b836020015160001b611ee9565b611cfa8272465f6e6f6e506572666f726d696e674461746560681b836040015160001b611ee9565b611d1d826d465f6d617475726974794461746560901b836060015160001b611ee9565b611d40826d465f65786572636973654461746560901b836080015160001b611ee9565b611d668270465f7465726d696e6174696f6e4461746560781b8360a0015160001b611ee9565b611d938277465f6c6173744469766964656e64466978696e674461746560401b8360c0015160001b611ee9565b611dbb82721197db9bdd1a5bdb985b141c9a5b98da5c185b606a1b8360e0015160001b611ee9565b611de1826f1197d95e195c98da5cd9505b5bdd5b9d60821b83610100015160001b611ee9565b611e098271465f65786572636973655175616e7469747960701b83610120015160001b611ee9565b611e298269465f7175616e7469747960b01b83610140015160001b611ee9565b611e5282721197d8dbdd5c1bdb905b5bdd5b9d119a5e1959606a1b83610160015160001b611ee9565b611e76826d232fb6b0b933b4b72330b1ba37b960911b83610180015160001b611ee9565b611e9e8271232fb0b2353ab9ba36b2b73a2330b1ba37b960711b836101a0015160001b611ee9565b611ecb82761197d91a5d9a59195b9914185e5b595b9d105b5bdd5b9d604a1b836101c0015160001b611ee9565b610e26826b465f73706c6974526174696f60a01b836101e0015160001b5b6000828152600f84016020526040902054811415611f0657611f1a565b6000828152600f8401602052604090208190555b505050565b6000828152600e84016020526040902054811415611f3c57611f1a565b6000918252600e929092016020526040902055565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290565b604080516103408101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200161202e6120f2565b815260200161203b6120f2565b81526020016120486120f2565b81526020016120556120f2565b81526020016120626120f2565b815260200161206f611f51565b905290565b60408051610200810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516060810190915260008082526020820190611f6e565b80356001600160a01b0381168114610bb657600080fd5b80358015158114610bb657600080fd5b803560098110610bb657600080fd5b8035610bb6816128fd565b8035610bb68161290a565b8035600d8110610bb657600080fd5b803560148110610bb657600080fd5b8035600b8110610bb657600080fd5b600060808284031215612196578081fd5b6040516080810181811067ffffffffffffffff821117156121b357fe5b6040528235815290508060208301356121cb8161290a565b602082015260408301356121de816128fd565b60408201526121ef60608401612123565b60608201525092915050565b60006060828403121561220c578081fd5b6040516060810181811067ffffffffffffffff8211171561222957fe5b6040528235815290508060208301356122418161290a565b602082015261225260408401612123565b60408201525092915050565b60006020828403121561226f578081fd5b5035919050565b60008060408385031215612288578081fd5b50508035926020909101359150565b6000808284036102208112156122ab578283fd5b8335925061020080601f19830112156122c2578283fd5b6122cb816128c2565b91506122d96020860161214d565b825260408501356020830152606085013560408301526080850135606083015260a0850135608083015260c085013560a083015260e085013560c08301526101008086013560e084015261012080870135828501526101409150818701358185015250610160808701358285015261018091508187013581850152506101a080870135828501526101c091508187013581850152506101e080870135828501528287013581850152505050809150509250929050565b6000808284036105008112156123a3578283fd5b833592506104e0601f19820112156123b9578182fd5b506123c56103406128c2565b6123d160208501612167565b81526123df60408501612142565b60208201526123f060608501612158565b604082015261240160808501612176565b606082015261241260a08501612133565b608082015261242360c08501612142565b60a082015261243460e08501612142565b60c082015261010061244781860161210c565b60e083015261012061245a81870161210c565b828401526101409150818601358184015250610160808601358284015261018091508186013581840152506101a080860135828401526101c091508186013581840152506101e08086013582840152610200915081860135818401525061022080860135828401526102409150818601358184015250610260808601358284015261028091508186013581840152506102a06124f8878288016121fb565b82840152610300915061250d878388016121fb565b9083015261251f8661036087016121fb565b6102c0830152612533866103c087016121fb565b6102e08301526125478661042087016121fb565b90820152612559856104808601612185565b610320820152809150509250929050565b6001600160a01b03169052565b6009811061258157fe5b9052565b612581816128e6565b612581816128f3565b600d811061258157fe5b6014811061258157fe5b600b811061258157fe5b8051825260208101516125c7816128f3565b602083015260408101516125da816128e6565b60408301526060908101511515910152565b8051825260208101516125fe816128f3565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b90815260200190565b6080810161039c82846125b5565b6060810161039c82846125ec565b60006102008201905061265d82845161258e565b6020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e08301526101008084015181840152506101208084015181840152506101408084015181840152506101608084015181840152506101808084015181840152506101a08084015181840152506101c08084015181840152506101e080840151818401525092915050565b60006104e08201905061271d8284516125a1565b602083015161272f6020840182612585565b5060408301516127426040840182612597565b50606083015161275560608401826125ab565b5060808301516127686080840182612577565b5060a083015161277b60a0840182612585565b5060c083015161278e60c0840182612585565b5060e08301516127a160e084018261256a565b50610100808401516127b58285018261256a565b505061012083810151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151612843828501826125ec565b50506102a08301516102e061285a818501836125ec565b6102c085015191506128706103408501836125ec565b84015190506128836103a08401826125ec565b506103008301516128986104008401826125ec565b506103208301516128ad6104608401826125b5565b5092915050565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156128de57fe5b604052919050565b600281106128f057fe5b50565b600681106128f057fe5b600281106128f057600080fd5b600681106128f057600080fdfea2646970667358221220a7155ac95c5be2f4a04f1d037ecfd61a5483cba0ac707fabdedd2e02c3c8b0fc64736f6c63430007040033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061010a5760003560e01c8063839ebf60116100a1578063aadcc0d711610070578063aadcc0d714610158578063c779967714610233578063ce3f6e3014610253578063fc7c1f94146102735761010a565b8063839ebf60146101ed578063974b2c77146101da5780639c9442b61461020d578063a04692af146102205761010a565b806369d88996116100dd57806369d889961461019a5780636aa96857146101585780636eff8f1f146101ba57806371599c60146101da5761010a565b80631ef758d11461010f5780634dbb8477146101385780635fe316eb146101585780636954c42914610178575b600080fd5b61012261011d366004612276565b610293565b60405161012f919061262d565b60405180910390f35b61014b61014636600461225e565b6103a2565b60405161012f9190612709565b61016b610166366004612276565b610bbb565b60405161012f9190612624565b81801561018457600080fd5b50610198610193366004612297565b610bd1565b005b6101ad6101a836600461225e565b610e2a565b60405161012f9190612649565b6101cd6101c8366004612276565b6110a4565b60405161012f919061263b565b61016b6101e8366004612276565b6111e7565b6102006101fb366004612276565b6111fd565b60405161012f91906128b4565b6101ad61021b36600461225e565b6113b6565b61020061022e366004612276565b611610565b81801561023f57600080fd5b5061019861024e36600461238f565b6116b4565b610266610261366004612276565b611bfa565b60405161012f9190612610565b81801561027f57600080fd5b5061019861028e366004612297565b611c82565b61029b611f51565b6e18de58db1953d9911a5d9a59195b99608a1b82141561037257604080516080810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff1660058111156102f457fe5b60058111156102ff57fe5b8152602001600885600e01600086815260200190815260200160002054901c60001c60ff16600181111561032f57fe5b600181111561033a57fe5b81526000848152600e86016020908152604090912054910190600190811614610364576000610367565b60015b15159052905061039c565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290505b92915050565b6103aa611f7b565b604080516103408101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c60138111156103df57fe5b60138111156103ea57fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561042257fe5b600181111561042d57fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c81111561046557fe5b600c81111561047057fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600a8111156104a857fe5b600a8111156104b357fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660088111156104eb57fe5b60088111156104f657fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561052e57fe5b600181111561053957fe5b815260200160c884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561057157fe5b600181111561057c57fe5b81526763757272656e637960c01b6000908152600e85016020818152604080842054606090811c8387015271736574746c656d656e7443757272656e637960701b855283835281852054811c82870152697374617475734461746560b01b855283835281852054818701526869737375654461746560b81b85528383528185205460808701526b70757263686173654461746560a01b85528383528185205460a08701527818de58db19505b98da1bdc91185d1953d9911a5d9a59195b99603a1b85528383528185205460c08701526b6e6f6d696e616c507269636560a01b85528383528185205460e0870152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b855283835281852054610100870152696973737565507269636560b01b855283835281852054610120870152677175616e7469747960c01b855283835281852054610140870152727072696365417450757263686173654461746560681b85528383528185205461016087015275707269636541745465726d696e6174696f6e4461746560501b8552838352818520546101808701526e726564656d7074696f6e507269636560881b8552838352818520546101a08701528151908101825273191a5d9a59195b99149958dbdc9914195c9a5bd960621b80865284845291852054601881901c8252919094529181526101c09093019282019060101c60ff16600581111561078857fe5b600581111561079357fe5b815273191a5d9a59195b99149958dbdc9914195c9a5bd960621b6000908152600e8701602090815260409091205491019060081c6001908116146107d85760006107db565b60015b1515905281526040805160608101825274191a5d9a59195b9914185e5b595b9d14195c9a5bd9605a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561083d57fe5b600581111561084857fe5b815274191a5d9a59195b9914185e5b595b9d14195c9a5bd9605a1b6000908152600e8701602090815260409091205491019060081c60019081161461088e576000610891565b60015b15159052815260408051606081018252741cdc1b1a5d14d95d1d1b195b595b9d14195c9a5bd9605a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff1660058111156108f357fe5b60058111156108fe57fe5b8152741cdc1b1a5d14d95d1d1b195b595b9d14195c9a5bd9605a1b6000908152600e8701602090815260409091205491019060081c600190811614610944576000610947565b60015b15159052815260408051606081018252751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff1660058111156109aa57fe5b60058111156109b557fe5b8152751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b6000908152600e8701602090815260409091205491019060081c6001908116146109fc5760006109ff565b60015b15159052815260408051606081018252761c9959195b5c1d1a5bdb94185e5b595b9d14195c9a5bd9604a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610a6357fe5b6005811115610a6e57fe5b8152761c9959195b5c1d1a5bdb94185e5b595b9d14195c9a5bd9604a1b6000908152600e8701602090815260409091205491019060081c600190811614610ab6576000610ab9565b60015b151590528152604080516080810182526e18de58db1953d9911a5d9a59195b99608a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610b1557fe5b6005811115610b2057fe5b8152602001600886600e0160006e18de58db1953d9911a5d9a59195b99608a1b815260200190815260200160002054901c60001c60ff166001811115610b6257fe5b6001811115610b6d57fe5b81526e18de58db1953d9911a5d9a59195b99608a1b6000908152600e87016020908152604090912054910190600190811614610baa576000610bad565b60015b15159052905290505b919050565b6000908152600e91909101602052604090205490565b610c088272636f6e7472616374506572666f726d616e636560681b60f884600001516005811115610bfe57fe5b60ff16901b611ee9565b610c2782697374617475734461746560b01b836020015160001b611ee9565b610c4d82706e6f6e506572666f726d696e674461746560781b836040015160001b611ee9565b610c6e826b6d617475726974794461746560a01b836060015160001b611ee9565b610c8f826b65786572636973654461746560a01b836080015160001b611ee9565b610cb3826e7465726d696e6174696f6e4461746560881b8360a0015160001b611ee9565b610cde82756c6173744469766964656e64466978696e674461746560501b8360c0015160001b611ee9565b610d0482701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b8360e0015160001b611ee9565b610d28826d195e195c98da5cd9505b5bdd5b9d60921b83610100015160001b611ee9565b610d4e826f65786572636973655175616e7469747960801b83610120015160001b611ee9565b610d6c82677175616e7469747960c01b83610140015160001b611ee9565b610d93827018dbdd5c1bdb905b5bdd5b9d119a5e1959607a1b83610160015160001b611ee9565b610db5826b36b0b933b4b72330b1ba37b960a11b83610180015160001b611ee9565b610ddb826f30b2353ab9ba36b2b73a2330b1ba37b960811b836101a0015160001b611ee9565b610e068274191a5d9a59195b9914185e5b595b9d105b5bdd5b9d605a1b836101c0015160001b611ee9565b610e26826973706c6974526174696f60b01b836101e0015160001b611ee9565b5050565b610e32612074565b604080516102008101825274465f636f6e7472616374506572666f726d616e636560581b6000908152600f85016020529190912054819060f81c6005811115610e7757fe5b6005811115610e8257fe5b81526b465f7374617475734461746560a01b6000908152600f850160208181526040808420548286015272465f6e6f6e506572666f726d696e674461746560681b845282825280842054818601526d465f6d617475726974794461746560901b84528282528084205460608601526d465f65786572636973654461746560901b845282825280842054608086015270465f7465726d696e6174696f6e4461746560781b84528282528084205460a086015277465f6c6173744469766964656e64466978696e674461746560401b84528282528084205460c0860152721197db9bdd1a5bdb985b141c9a5b98da5c185b606a1b84528282528084205460e0860152701197d95e195c98da5cd9505b5bdb5d5b9d607a1b84528282528084205461010086015271465f65786572636973655175616e7469747960701b84528282528084205461012086015269465f7175616e7469747960b01b845282825280842054610140860152721197d8dbdd5c1bdb905b5bdd5b9d119a5e1959606a1b8452828252808420546101608601526d232fb6b0b933b4b72330b1ba37b960911b84528282528084205461018086015271232fb0b2353ab9ba36b2b73a2330b1ba37b960711b8452828252808420546101a0860152761197d91a5d9a59195b9914185e5b595b9d105b5bdd5b9d604a1b8452828252808420546101c08601526b465f73706c6974526174696f60a01b84529190529020546101e0909101529050919050565b6110ac6120f2565b73191a5d9a59195b99149958dbdc9914195c9a5bd960621b8214806110e8575074191a5d9a59195b9914185e5b595b9d14195c9a5bd9605a1b82145b8061110a5750741cdc1b1a5d14d95d1d1b195b595b9d14195c9a5bd9605a1b82145b8061112d5750751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b82145b806111515750761c9959195b5c1d1a5bdb94185e5b595b9d14195c9a5bd9604a1b82145b156111cd57604080516060810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561119557fe5b60058111156111a057fe5b81526000848152600e8601602090815260409091205491019060081c600190811614610364576000610367565b60408051606081019091526000808252602082019061038f565b6000908152600f91909101602052604090205490565b60006b636f6e74726163745479706560a01b821415611239575064656e756d7360d81b6000908152600e8301602052604090205460f81c61039c565b6731b0b632b73230b960c11b82141561126f575064656e756d7360d81b6000908152600e8301602052604090205460f01c61039c565b6b636f6e7472616374526f6c6560a01b8214156112a9575064656e756d7360d81b6000908152600e8301602052604090205460e81c61039c565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b8214156112e9575064656e756d7360d81b6000908152600e8301602052604090205460e01c61039c565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b82141561132c575064656e756d7360d81b6000908152600e8301602052604090205460d81c61039c565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b82141561136e575064656e756d7360d81b6000908152600e8301602052604090205460d01c61039c565b713932b232b2b6b0b13632a13ca4b9b9bab2b960711b8214156113ae575064656e756d7360d81b6000908152600e8301602052604090205460c81c61039c565b50600061039c565b6113be612074565b604080516102008101825272636f6e7472616374506572666f726d616e636560681b6000908152600f85016020529190912054819060f81c600581111561140157fe5b600581111561140c57fe5b8152697374617475734461746560b01b6000908152600f8501602081815260408084205482860152706e6f6e506572666f726d696e674461746560781b845282825280842054818601526b6d617475726974794461746560a01b84528282528084205460608601526b65786572636973654461746560a01b84528282528084205460808601526e7465726d696e6174696f6e4461746560881b84528282528084205460a0860152756c6173744469766964656e64466978696e674461746560501b84528282528084205460c0860152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b84528282528084205460e08601526e195e195c98da5cd9505b5bdb5d5b9d608a1b8452828252808420546101008601526f65786572636973655175616e7469747960801b845282825280842054610120860152677175616e7469747960c01b8452828252808420546101408601527018dbdd5c1bdb905b5bdd5b9d119a5e1959607a1b8452828252808420546101608601526b36b0b933b4b72330b1ba37b960a11b8452828252808420546101808601526f30b2353ab9ba36b2b73a2330b1ba37b960811b8452828252808420546101a086015274191a5d9a59195b9914185e5b595b9d105b5bdd5b9d605a1b8452828252808420546101c08601526973706c6974526174696f60b01b84529190529020546101e0909101529050919050565b600072636f6e7472616374506572666f726d616e636560681b821415611661575072636f6e7472616374506572666f726d616e636560681b6000908152600f8301602052604090205460f81c61039c565b74465f636f6e7472616374506572666f726d616e636560581b8214156113ae575074465f636f6e7472616374506572666f726d616e636560581b6000908152600f8301602052604090205460f81c61039c565b61177f8264656e756d7360d81b60c88460c0015160018111156116d357fe5b60ff1660001b901b60d08560a0015160018111156116ed57fe5b60ff1660001b901b60d88660800151600881111561170757fe5b60ff1660001b901b60e08760600151600a81111561172157fe5b60ff1660001b901b60e88860400151600c81111561173b57fe5b60ff1660001b901b60f08960200151600181111561175557fe5b60ff1660001b901b60f88a60000151601381111561176f57fe5b60ff16901b171717171717611f1f565b6117a9826763757272656e637960c01b60608460e001516001600160a01b0316901b60001b611f1f565b6117de8271736574746c656d656e7443757272656e637960701b60608461010001516001600160a01b0316901b60001b611f1f565b6117fe82697374617475734461746560b01b83610120015160001b611f1f565b61181d826869737375654461746560b81b83610140015160001b611f1f565b61183f826b70757263686173654461746560a01b83610160015160001b611f1f565b61186e827818de58db19505b98da1bdc91185d1953d9911a5d9a59195b99603a1b83610180015160001b611f1f565b611890826b6e6f6d696e616c507269636560a01b836101a0015160001b611f1f565b6118b782701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b836101c0015160001b611f1f565b6118d782696973737565507269636560b01b836101e0015160001b611f1f565b6118f582677175616e7469747960c01b83610200015160001b611f1f565b61191e82727072696365417450757263686173654461746560681b83610220015160001b611f1f565b61194a8275707269636541745465726d696e6174696f6e4461746560501b83610260015160001b611f1f565b61196f826e726564656d7074696f6e507269636560881b83610240015160001b611f1f565b6119d78273191a5d9a59195b99149958dbdc9914195c9a5bd960621b6008846102800151604001516119a25760006119a5565b60015b60ff1660001b901b60108561028001516020015160058111156119c457fe5b6102808701515160181b911b1717611f1f565b611a408274191a5d9a59195b9914185e5b595b9d14195c9a5bd9605a1b6008846102a0015160400151611a0b576000611a0e565b60015b60ff1660001b901b6010856102a00151602001516005811115611a2d57fe5b6102a08701515160181b911b1717611f1f565b611aa982741cdc1b1a5d14d95d1d1b195b595b9d14195c9a5bd9605a1b6008846102c0015160400151611a74576000611a77565b60015b60ff1660001b901b6010856102c00151602001516005811115611a9657fe5b6102c08701515160181b911b1717611f1f565b611b1382751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b6008846102e0015160400151611ade576000611ae1565b60015b60ff1660001b901b6010856102e00151602001516005811115611b0057fe5b6102e08701515160181b911b1717611f1f565b611b7e82761c9959195b5c1d1a5bdb94185e5b595b9d14195c9a5bd9604a1b600884610300015160400151611b49576000611b4c565b60015b60ff1660001b901b6010856103000151602001516005811115611b6b57fe5b6103008701515160181b911b1717611f1f565b610e26826e18de58db1953d9911a5d9a59195b99608a1b83610320015160600151611baa576000611bad565b60015b60ff1660001b6008856103200151604001516001811115611bca57fe5b60001b901b6010866103200151602001516005811115611be657fe5b6103208801515160181b911b171717611f1f565b60006763757272656e637960c01b821415611c3557506763757272656e637960c01b6000908152600e8301602052604090205460601c61039c565b71736574746c656d656e7443757272656e637960701b8214156113ae575071736574746c656d656e7443757272656e637960701b6000908152600e8301602052604090205460601c61039c565b611cb18274465f636f6e7472616374506572666f726d616e636560581b60f884600001516005811115610bfe57fe5b611cd2826b465f7374617475734461746560a01b836020015160001b611ee9565b611cfa8272465f6e6f6e506572666f726d696e674461746560681b836040015160001b611ee9565b611d1d826d465f6d617475726974794461746560901b836060015160001b611ee9565b611d40826d465f65786572636973654461746560901b836080015160001b611ee9565b611d668270465f7465726d696e6174696f6e4461746560781b8360a0015160001b611ee9565b611d938277465f6c6173744469766964656e64466978696e674461746560401b8360c0015160001b611ee9565b611dbb82721197db9bdd1a5bdb985b141c9a5b98da5c185b606a1b8360e0015160001b611ee9565b611de1826f1197d95e195c98da5cd9505b5bdd5b9d60821b83610100015160001b611ee9565b611e098271465f65786572636973655175616e7469747960701b83610120015160001b611ee9565b611e298269465f7175616e7469747960b01b83610140015160001b611ee9565b611e5282721197d8dbdd5c1bdb905b5bdd5b9d119a5e1959606a1b83610160015160001b611ee9565b611e76826d232fb6b0b933b4b72330b1ba37b960911b83610180015160001b611ee9565b611e9e8271232fb0b2353ab9ba36b2b73a2330b1ba37b960711b836101a0015160001b611ee9565b611ecb82761197d91a5d9a59195b9914185e5b595b9d105b5bdd5b9d604a1b836101c0015160001b611ee9565b610e26826b465f73706c6974526174696f60a01b836101e0015160001b5b6000828152600f84016020526040902054811415611f0657611f1a565b6000828152600f8401602052604090208190555b505050565b6000828152600e84016020526040902054811415611f3c57611f1a565b6000918252600e929092016020526040902055565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290565b604080516103408101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200161202e6120f2565b815260200161203b6120f2565b81526020016120486120f2565b81526020016120556120f2565b81526020016120626120f2565b815260200161206f611f51565b905290565b60408051610200810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516060810190915260008082526020820190611f6e565b80356001600160a01b0381168114610bb657600080fd5b80358015158114610bb657600080fd5b803560098110610bb657600080fd5b8035610bb6816128fd565b8035610bb68161290a565b8035600d8110610bb657600080fd5b803560148110610bb657600080fd5b8035600b8110610bb657600080fd5b600060808284031215612196578081fd5b6040516080810181811067ffffffffffffffff821117156121b357fe5b6040528235815290508060208301356121cb8161290a565b602082015260408301356121de816128fd565b60408201526121ef60608401612123565b60608201525092915050565b60006060828403121561220c578081fd5b6040516060810181811067ffffffffffffffff8211171561222957fe5b6040528235815290508060208301356122418161290a565b602082015261225260408401612123565b60408201525092915050565b60006020828403121561226f578081fd5b5035919050565b60008060408385031215612288578081fd5b50508035926020909101359150565b6000808284036102208112156122ab578283fd5b8335925061020080601f19830112156122c2578283fd5b6122cb816128c2565b91506122d96020860161214d565b825260408501356020830152606085013560408301526080850135606083015260a0850135608083015260c085013560a083015260e085013560c08301526101008086013560e084015261012080870135828501526101409150818701358185015250610160808701358285015261018091508187013581850152506101a080870135828501526101c091508187013581850152506101e080870135828501528287013581850152505050809150509250929050565b6000808284036105008112156123a3578283fd5b833592506104e0601f19820112156123b9578182fd5b506123c56103406128c2565b6123d160208501612167565b81526123df60408501612142565b60208201526123f060608501612158565b604082015261240160808501612176565b606082015261241260a08501612133565b608082015261242360c08501612142565b60a082015261243460e08501612142565b60c082015261010061244781860161210c565b60e083015261012061245a81870161210c565b828401526101409150818601358184015250610160808601358284015261018091508186013581840152506101a080860135828401526101c091508186013581840152506101e08086013582840152610200915081860135818401525061022080860135828401526102409150818601358184015250610260808601358284015261028091508186013581840152506102a06124f8878288016121fb565b82840152610300915061250d878388016121fb565b9083015261251f8661036087016121fb565b6102c0830152612533866103c087016121fb565b6102e08301526125478661042087016121fb565b90820152612559856104808601612185565b610320820152809150509250929050565b6001600160a01b03169052565b6009811061258157fe5b9052565b612581816128e6565b612581816128f3565b600d811061258157fe5b6014811061258157fe5b600b811061258157fe5b8051825260208101516125c7816128f3565b602083015260408101516125da816128e6565b60408301526060908101511515910152565b8051825260208101516125fe816128f3565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b90815260200190565b6080810161039c82846125b5565b6060810161039c82846125ec565b60006102008201905061265d82845161258e565b6020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e08301526101008084015181840152506101208084015181840152506101408084015181840152506101608084015181840152506101808084015181840152506101a08084015181840152506101c08084015181840152506101e080840151818401525092915050565b60006104e08201905061271d8284516125a1565b602083015161272f6020840182612585565b5060408301516127426040840182612597565b50606083015161275560608401826125ab565b5060808301516127686080840182612577565b5060a083015161277b60a0840182612585565b5060c083015161278e60c0840182612585565b5060e08301516127a160e084018261256a565b50610100808401516127b58285018261256a565b505061012083810151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151612843828501826125ec565b50506102a08301516102e061285a818501836125ec565b6102c085015191506128706103408501836125ec565b84015190506128836103a08401826125ec565b506103008301516128986104008401826125ec565b506103208301516128ad6104608401826125b5565b5092915050565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156128de57fe5b604052919050565b600281106128f057fe5b50565b600681106128f057fe5b600281106128f057600080fd5b600681106128f057600080fdfea2646970667358221220a7155ac95c5be2f4a04f1d037ecfd61a5483cba0ac707fabdedd2e02c3c8b0fc64736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decodeAndGetFinalizedSTKState(Asset storage)": {
        "details": "Decode and load the finalized STKState of the asset"
      },
      "decodeAndGetSTKState(Asset storage)": {
        "details": "Decode and load the STKState of the asset"
      },
      "decodeAndGetSTKTerms(Asset storage)": {
        "details": "Decode and loads STKTerms"
      },
      "encodeAndSetFinalizedSTKState(Asset storage,STKState)": {
        "details": "Tightly pack and store finalized STKState"
      },
      "encodeAndSetSTKState(Asset storage,STKState)": {
        "details": "Tightly pack and store STKState"
      },
      "encodeAndSetSTKTerms(Asset storage,STKTerms)": {
        "details": "Tightly pack and store only non-zero overwritten terms (LifecycleTerms)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "encodeAndSetSTKTerms(Asset storage,STKTerms)": {
        "notice": "All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}