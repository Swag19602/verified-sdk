/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class OpenOracleProxy extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): OpenOracleProxy;
  methods: {
    bytes32ToString(_bytes32: string | number[]): TransactionObject<string>;

    getData(
      identifier: string | number[]
    ): TransactionObject<{
      0: string;
      1: boolean;
    }>;

    openOracle(): TransactionObject<string>;

    owner(): TransactionObject<string>;

    renounceOwnership(): TransactionObject<void>;

    source(): TransactionObject<string>;

    transferOwnership(newOwner: string): TransactionObject<void>;

    updateSource(_source: string): TransactionObject<void>;
  };
  events: {
    OwnershipTransferred: ContractEvent<{
      previousOwner: string;
      newOwner: string;
      0: string;
      1: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
