/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class COLLACustodian extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): COLLACustodian;
  methods: {
    addCollateral(
      assetId: string | number[],
      addAmount: number | string
    ): TransactionObject<void>;

    assetRegistry(): TransactionObject<string>;

    claimCollateral(assetId: string | number[]): TransactionObject<void>;

    computeMinCollateralAmount(
      assetId: string | number[]
    ): TransactionObject<string>;

    decodeCollateralObject(
      object: string | number[]
    ): TransactionObject<{
      0: string;
      1: string;
    }>;

    decodeEvent(
      _event: string | number[]
    ): TransactionObject<{
      0: string;
      1: string;
    }>;

    deriveCollateralizerAndCreditor(
      assetId: string | number[]
    ): TransactionObject<{
      collateralizer: string;
      creditor: string;
      0: string;
      1: string;
    }>;

    encodeCollateralAsObject(
      collateralToken: string,
      collateralAmount: number | string
    ): TransactionObject<string>;

    encodeEvent(
      eventType: number | string,
      scheduleTime: number | string
    ): TransactionObject<string>;

    getEpochOffset(eventType: number | string): TransactionObject<string>;

    isUndercollateralized(
      assetId: string | number[]
    ): TransactionObject<boolean>;

    onProgress(assetId: string | number[]): TransactionObject<string>;

    priceFeed(): TransactionObject<string>;

    withdrawCollateral(
      assetId: string | number[],
      withdrawAmount: number | string
    ): TransactionObject<void>;
  };
  events: {
    AddedCollateral: ContractEvent<{
      assetId: string;
      collateralizer: string;
      collateralAmount: string;
      0: string;
      1: string;
      2: string;
    }>;
    ClaimedCollateral: ContractEvent<{
      assetId: string;
      creditor: string;
      claimedAmount: string;
      0: string;
      1: string;
      2: string;
    }>;
    WithdrewCollateral: ContractEvent<{
      assetId: string;
      collateralizer: string;
      withdrawnAmount: string;
      0: string;
      1: string;
      2: string;
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
