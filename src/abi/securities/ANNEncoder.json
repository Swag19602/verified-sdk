{
  "address": "0xe1f475a235720539De8B78f8BA65e3ec765c8E91",
  "abi": [],
  "transactionHash": "0xd278a4082b4bbb14283194e94443c437e7bd67e2048403f4a97c98f1bb98ca8a",
  "receipt": {
    "to": null,
    "from": "0xf6bb741F0C106a504943eaE908C3b67bcf4bF1CC",
    "contractAddress": "0xe1f475a235720539De8B78f8BA65e3ec765c8E91",
    "transactionIndex": 6,
    "gasUsed": "2837702",
    "logsBloom": "0x
    "blockHash": "0x4668e72a1f2ebd4d444bf019f7245e3f58c73eb7897fd65b500ce5a1b34a32bf",
    "transactionHash": "0xd278a4082b4bbb14283194e94443c437e7bd67e2048403f4a97c98f1bb98ca8a",
    "logs": [],
    "blockNumber": 7712999,
    "cumulativeGasUsed": "3814329",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "37e2a100a6f868553298dee57e286371",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decodeAndGetANNState(Asset storage)\":{\"details\":\"Decode and load the ANNState of the asset\"},\"decodeAndGetANNTerms(Asset storage)\":{\"details\":\"Decode and loads ANNTerms\"},\"decodeAndGetFinalizedANNState(Asset storage)\":{\"details\":\"Decode and load the finalized ANNState of the asset\"},\"encodeAndSetANNState(Asset storage,ANNState)\":{\"details\":\"Tightly pack and store ANNState\"},\"encodeAndSetANNTerms(Asset storage,ANNTerms)\":{\"details\":\"Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\"},\"encodeAndSetFinalizedANNState(Asset storage,ANNState)\":{\"details\":\"Tightly pack and store finalized ANNState\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"encodeAndSetANNTerms(Asset storage,ANNTerms)\":{\"notice\":\"All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Core/ANN/ANNEncoder.sol\":\"ANNEncoder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ACTUS/Core/ACTUSConstants.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @title ACTUSConstants\\n * @notice Contains all type definitions for ACTUS. See ACTUS-Dictionary for definitions\\n */\\ncontract ACTUSConstants {\\n\\n    // constants used throughout\\n    uint256 constant public PRECISION = 18;\\n    int256 constant public ONE_POINT_ZERO = 1 * 10 ** 18;\\n    uint256 constant public MAX_CYCLE_SIZE = 120;\\n    uint256 constant public MAX_EVENT_SCHEDULE_SIZE = 120;\\n}\\n\",\"keccak256\":\"0x1568471e72800002ad945bf084f96368f5dfb597105f2e3f11534905abda9495\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/ACTUSTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n/**\\n * Commit: https://github.com/atpar/actus-dictionary/commit/b85b9b378967de6bfc4d8b6687b520c48bce9890\\n * Date: 2020-10-06\\n */\\n\\n// IPS\\nenum P {D, W, M, Q, H, Y} // P=[D=Days, W=Weeks, M=Months, Q=Quarters, H=Halfyear, Y=Year]\\nenum S {LONG, SHORT} // S=[+=long stub,- short stub, {} if S empty then - for short stub]\\nstruct IPS {\\n    uint256 i; // I=Integer\\n    P p;\\n    S s;\\n    bool isSet;\\n}\\n\\nstruct IP {\\n    uint256 i;\\n    P p;\\n    bool isSet;\\n}\\n\\n// Number of enum options should be limited to 256 (8 bits) such that 255 enums can be packed fit into 256 bits (bytes32)\\nenum BusinessDayConvention {NOS, SCF, SCMF, CSF, CSMF, SCP, SCMP, CSP, CSMP}\\nenum Calendar {NC, MF}\\nenum ContractPerformance {PF, DL, DQ, DF, MD, TD}\\nenum ContractReferenceType {CNT, CID, MOC, EID, CST}\\nenum ContractReferenceRole {UDL, FIL, SEL, COVE, COVI}\\nenum ContractRole {RPA, RPL, RFL, PFL, RF, PF, BUY, SEL, COL, CNO, UDL, UDLP, UDLM}\\nenum ContractType {PAM, ANN, NAM, LAM, LAX, CLM, UMP, CSH, STK, COM, SWAPS, SWPPV, FXOUT, CAPFL, FUTUR, OPTNS, CEG, CEC, CERTF, COLLA}\\nenum CouponType {NOC, FIX, FCN, PRF}\\nenum CyclePointOfInterestPayment {B, E}\\nenum CyclePointOfRateReset {B, E}\\nenum DayCountConvention {AA, A360, A365, _30E360ISDA, _30E360, _28E336, ONE, OBYT, HRSAA, MINAA, SECAA}\\nenum EndOfMonthConvention {SD, EOM}\\n//               0   1    2    3    4   5   6   7   8   9  10    11  12   13   14   15   16   17   18   19   20   21   22   23   24   25  26  27    28   29  30  31  32  33\\nenum EventType {NE, CE, ISS, IED, PRD, FP, PR, PD, PY, PP, IP, IPCI, RRF, RR, DIF, DIX, DIP, COF, COP, REF, REX, REP, SPF, SPS, EXO, EXE, ST, SC, IPCB, PRF, MC, TD, MD, AD}\\nenum FeeBasis {A, N}\\n// enum GuaranteedExposure {NO, NI, MV} // not implemented\\n// enum InterestCalculationBase {NT, NTIED, NTL} // not implemented\\n// enum PenaltyType {O, A, N, I}\\n// enum PrepaymentEffect {N, A, M} // not implemented\\nenum RedeemableByIssuer {Y, N}\\nenum ScalingEffect {_000, I00, _0N0, IN0}\\n// enum Seniority {S, J} // not implemented\\n\\nstruct ContractReference {\\n    bytes32 object;\\n    bytes32 object2; // workaround for solc bug (replace object and object2 with single bytes attribute)\\n    ContractReferenceType _type;\\n    ContractReferenceRole role;\\n}\\n\\nstruct UnderlyingState {\\n    int256 exerciseAmount;\\n    bool isSet;\\n}\\n\\nstruct ANNState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n    int256 nextPrincipalRedemptionPayment;\\n}\\n\\nstruct CECState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n\\n    int256 feeAccrued;\\n    int256 exerciseAmount;\\n}\\n\\nstruct CEGState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    int256 feeAccrued;\\n    int256 exerciseAmount;\\n}\\n\\nstruct CERTFState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastCouponFixingDate;\\n\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n}\\n\\nstruct PAMState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n}\\n\\nstruct STKState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastDividendFixingDate;\\n    // uint256 dividendFixingDate; // not implemented\\n    // uint256 dividendExDate; // not implemented\\n    // uint256 dividendPaymentDate; // not implemented\\n    // uint256 splitSettlementDate; // not implemented\\n    // uint256 redemptionExDate; // not implemented\\n    // uint256 redemptionPaymentDate; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n    int256 dividendPaymentAmount;\\n    int256 splitRatio;\\n}\\n\\nstruct COLLAState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    int256 accruedInterest;\\n    int256 nominalInterestRate;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n}\\n\\nstruct ANNTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // InterestCalculationBase interestCalculationBase; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 ammortizationDate; // not implemented\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    // uint256 cycleAnchorDateOfInterestCalculationBase; // not implemented\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    uint256 cycleAnchorDateOfPrincipalRedemption;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 nextPrincipalRedemptionPayment;\\n    // int256 coverageOfCreditEnhancement;\\n    // int256 interestCalculationBaseAmount; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    IPS cycleOfPrincipalRedemption;\\n    // IPS cycleOfOptionality; // not implemented\\n    // IPS cycleOfInterestCalculationBase; // not implemented\\n}\\n\\nstruct CECTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ContractPerformance creditEventTypeCovered;\\n    FeeBasis feeBasis;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    // uint256 exerciseDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 feeRate;\\n    // int256 exerciseAmount; // state only\\n    int256 coverageOfCreditEnhancement;\\n\\n    // IP settlementPeriod; // not implemented\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CEGTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    ContractPerformance creditEventTypeCovered;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 exerciseDate; // state only\\n    // uint256 nonPerformingDate; // state only\\n\\n    int256 notionalPrincipal;\\n    // int256 delinquencyRate; not implemented\\n    int256 feeAccrued;\\n    int256 feeRate;\\n    int256 priceAtPurchaseDate;\\n    int256 coverageOfCreditEnhancement;\\n    // int256 exerciseAmount; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP settlementPeriod; // not implemented\\n\\n    IPS cycleOfFee;\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CERTFTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    CouponType couponType;\\n    // ContractPerformance contractPerformance; state only\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 issueDate;\\n    // uint256 lastCouponFixingDate; // state only\\n    uint256 cycleAnchorDateOfRedemption;\\n    uint256 cycleAnchorDateOfTermination;\\n    uint256 cycleAnchorDateOfCoupon;\\n\\n    int256 nominalPrice;\\n    int256 issuePrice;\\n    // int256 delinquencyRate; // not implemented\\n    int256 quantity;\\n    // int256 exerciseQuantity; // state only\\n    // int256 exerciseQuantityOrdered; // state only\\n    // int256 marginFactor;  // state only\\n    // int256 adjustmentFactor; // state only\\n    int256 denominationRatio;\\n    int256 couponRate;\\n    // int256 exerciseAmount; // state only\\n    // int256 couponAmountFixed; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    IP settlementPeriod;\\n    IP fixingPeriod;\\n    IP redemptionRecordPeriod;\\n\\n    IPS cycleOfRedemption;\\n    IPS cycleOfTermination;\\n    IPS cycleOfCoupon;\\n\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct PAMTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // CyclePointOfInterestPayment cyclePointOfInterestPayment; // not implemented\\n    // CyclePointOfRateReset cyclePointOfRateReset; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; // not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    // IPS cycleOfOptionality; // not implemented\\n}\\n\\nstruct STKTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    RedeemableByIssuer redeemableByIssuer;\\n    // Seniority seniority; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 issueDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfDividend;\\n\\n    int256 nominalPrice;\\n    int256 notionalPrincipal;\\n    int256 issuePrice;\\n    int256 quantity;\\n    int256 priceAtPurchaseDate;\\n    int256 redemptionPrice;\\n    int256 priceAtTerminationDate;\\n\\n    IP dividendRecordPeriod;\\n    IP dividendPaymentPeriod;\\n    IP splitSettlementPeriod;\\n    IP redemptionRecordPeriod;\\n    IP redemptionPaymentPeriod;\\n\\n    IPS cycleOfDividend;\\n}\\n\\nstruct COLLATerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    // ContractPerformance contractPerformance; // state only\\n\\n    bytes32 marketObjectCodeOfCollateral;\\n\\n    address currency;\\n    address settlementCurrency;\\n    address collateralCurrency;\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 premiumDiscountAtIED;\\n    int256 coverageOfCollateral;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n\\n    IPS cycleOfInterestPayment;\\n}\\n\",\"keccak256\":\"0x79bdd18aa3c6bdb9bb27e50b140bf43977ced292fdf89c2b2a237a0ec6c719fb\",\"license\":\"Apache-2.0\"},\"contracts/Core/ANN/ANNEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Base/SharedTypes.sol\\\";\\nimport \\\"../Base/AssetRegistry/BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary ANNEncoder {\\n\\n    function storeInPackedTerms(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedTerms[attributeKey] == value) return;\\n        asset.packedTerms[attributeKey] = value;\\n    }\\n\\n    function storeInPackedState(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedState[attributeKey] == value) return;\\n        asset.packedState[attributeKey] = value;\\n    }\\n    \\n    /**\\n     * @dev Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\\n     * @notice All non zero values of the overwrittenTerms object are stored.\\n     * It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\\n     */\\n    function encodeAndSetANNTerms(Asset storage asset, ANNTerms memory terms) external {\\n        storeInPackedTerms(\\n            asset,\\n            \\\"enums\\\",\\n            bytes32(uint256(uint8(terms.contractType))) << 248 |\\n            bytes32(uint256(uint8(terms.calendar))) << 240 |\\n            bytes32(uint256(uint8(terms.contractRole))) << 232 |\\n            bytes32(uint256(uint8(terms.dayCountConvention))) << 224 |\\n            bytes32(uint256(uint8(terms.businessDayConvention))) << 216 |\\n            bytes32(uint256(uint8(terms.endOfMonthConvention))) << 208 |\\n            bytes32(uint256(uint8(terms.scalingEffect))) << 200 |\\n            bytes32(uint256(uint8(terms.feeBasis))) << 192\\n        );\\n\\n        storeInPackedTerms(asset, \\\"currency\\\", bytes32(uint256(terms.currency) << 96));\\n        storeInPackedTerms(asset, \\\"settlementCurrency\\\", bytes32(uint256(terms.settlementCurrency) << 96));\\n\\n        storeInPackedTerms(asset, \\\"marketObjectCodeRateReset\\\", bytes32(terms.marketObjectCodeRateReset));\\n\\n        storeInPackedTerms(asset, \\\"statusDate\\\", bytes32(terms.statusDate));\\n        storeInPackedTerms(asset, \\\"initialExchangeDate\\\", bytes32(terms.initialExchangeDate));\\n        storeInPackedTerms(asset, \\\"maturityDate\\\", bytes32(terms.maturityDate));\\n        storeInPackedTerms(asset, \\\"issueDate\\\", bytes32(terms.issueDate));\\n        storeInPackedTerms(asset, \\\"purchaseDate\\\", bytes32(terms.purchaseDate));\\n        storeInPackedTerms(asset, \\\"capitalizationEndDate\\\", bytes32(terms.capitalizationEndDate));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfInterestPayment\\\", bytes32(terms.cycleAnchorDateOfInterestPayment));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfRateReset\\\", bytes32(terms.cycleAnchorDateOfRateReset));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfScalingIndex\\\", bytes32(terms.cycleAnchorDateOfScalingIndex));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfFee\\\", bytes32(terms.cycleAnchorDateOfFee));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfPrincipalRedemp\\\", bytes32(terms.cycleAnchorDateOfPrincipalRedemption));\\n\\n        storeInPackedTerms(asset, \\\"notionalPrincipal\\\", bytes32(terms.notionalPrincipal));\\n        storeInPackedTerms(asset, \\\"nominalInterestRate\\\", bytes32(terms.nominalInterestRate));\\n        storeInPackedTerms(asset, \\\"accruedInterest\\\", bytes32(terms.accruedInterest));\\n        storeInPackedTerms(asset, \\\"rateMultiplier\\\", bytes32(terms.rateMultiplier));\\n        storeInPackedTerms(asset, \\\"rateSpread\\\", bytes32(terms.rateSpread));\\n        storeInPackedTerms(asset, \\\"nextResetRate\\\", bytes32(terms.nextResetRate));\\n        storeInPackedTerms(asset, \\\"feeRate\\\", bytes32(terms.feeRate));\\n        storeInPackedTerms(asset, \\\"feeAccrued\\\", bytes32(terms.feeAccrued));\\n        storeInPackedTerms(asset, \\\"premiumDiscountAtIED\\\", bytes32(terms.premiumDiscountAtIED));\\n        storeInPackedTerms(asset, \\\"priceAtPurchaseDate\\\", bytes32(terms.priceAtPurchaseDate));\\n        storeInPackedTerms(asset, \\\"priceAtTerminationDate\\\", bytes32(terms.priceAtTerminationDate));\\n        storeInPackedTerms(asset, \\\"nextPrincipalRedemptionPayment\\\", bytes32(terms.nextPrincipalRedemptionPayment));\\n        storeInPackedTerms(asset, \\\"lifeCap\\\", bytes32(terms.lifeCap));\\n        storeInPackedTerms(asset, \\\"lifeFloor\\\", bytes32(terms.lifeFloor));\\n        storeInPackedTerms(asset, \\\"periodCap\\\", bytes32(terms.periodCap));\\n        storeInPackedTerms(asset, \\\"periodFloor\\\", bytes32(terms.periodFloor));\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"gracePeriod\\\",\\n            bytes32(uint256(terms.gracePeriod.i)) << 24 |\\n            bytes32(uint256(terms.gracePeriod.p)) << 16 |\\n            bytes32(uint256((terms.gracePeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"delinquencyPeriod\\\",\\n            bytes32(uint256(terms.delinquencyPeriod.i)) << 24 |\\n            bytes32(uint256(terms.delinquencyPeriod.p)) << 16 |\\n            bytes32(uint256((terms.delinquencyPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfInterestPayment\\\",\\n            bytes32(uint256(terms.cycleOfInterestPayment.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfInterestPayment.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfInterestPayment.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfInterestPayment.isSet) ? 1 : 0))\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfRateReset\\\",\\n            bytes32(uint256(terms.cycleOfRateReset.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfRateReset.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfRateReset.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfRateReset.isSet) ? 1 : 0))\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfScalingIndex\\\",\\n            bytes32(uint256(terms.cycleOfScalingIndex.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfScalingIndex.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfScalingIndex.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfScalingIndex.isSet) ? 1 : 0))\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfFee\\\",\\n            bytes32(uint256(terms.cycleOfFee.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfFee.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfFee.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfFee.isSet) ? 1 : 0))\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfPrincipalRedemption\\\",\\n            bytes32(uint256(terms.cycleOfPrincipalRedemption.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfPrincipalRedemption.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfPrincipalRedemption.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfPrincipalRedemption.isSet) ? 1 : 0))\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and loads ANNTerms\\n     */\\n    function decodeAndGetANNTerms(Asset storage asset) external view returns (ANNTerms memory) {\\n        return ANNTerms(\\n            ContractType(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248))),\\n            Calendar(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240))),\\n            ContractRole(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232))),\\n            DayCountConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224))),\\n            BusinessDayConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216))),\\n            EndOfMonthConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208))),\\n            ScalingEffect(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200))),\\n            FeeBasis(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 192))),\\n\\n            address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96)),\\n            address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96)),\\n\\n            asset.packedTerms[\\\"marketObjectCodeRateReset\\\"],\\n\\n            uint256(asset.packedTerms[\\\"statusDate\\\"]),\\n            uint256(asset.packedTerms[\\\"initialExchangeDate\\\"]),\\n            uint256(asset.packedTerms[\\\"maturityDate\\\"]),\\n            uint256(asset.packedTerms[\\\"issueDate\\\"]),\\n            uint256(asset.packedTerms[\\\"purchaseDate\\\"]),\\n            uint256(asset.packedTerms[\\\"capitalizationEndDate\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfInterestPayment\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfRateReset\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfScalingIndex\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfFee\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfPrincipalRedemp\\\"]),\\n\\n            int256(asset.packedTerms[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedTerms[\\\"nominalInterestRate\\\"]),\\n            int256(asset.packedTerms[\\\"accruedInterest\\\"]),\\n            int256(asset.packedTerms[\\\"rateMultiplier\\\"]),\\n            int256(asset.packedTerms[\\\"rateSpread\\\"]),\\n            int256(asset.packedTerms[\\\"nextResetRate\\\"]),\\n            int256(asset.packedTerms[\\\"feeRate\\\"]),\\n            int256(asset.packedTerms[\\\"feeAccrued\\\"]),\\n            int256(asset.packedTerms[\\\"premiumDiscountAtIED\\\"]),\\n            int256(asset.packedTerms[\\\"priceAtPurchaseDate\\\"]),\\n            int256(asset.packedTerms[\\\"priceAtTerminationDate\\\"]),\\n            int256(asset.packedTerms[\\\"nextPrincipalRedemptionPayment\\\"]),\\n            int256(asset.packedTerms[\\\"lifeCap\\\"]),\\n            int256(asset.packedTerms[\\\"lifeFloor\\\"]),\\n            int256(asset.packedTerms[\\\"periodCap\\\"]),\\n            int256(asset.packedTerms[\\\"periodFloor\\\"]),\\n            \\n            IP(\\n                uint256(asset.packedTerms[\\\"gracePeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"gracePeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"gracePeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfInterestPayment\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfInterestPayment\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfInterestPayment\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfInterestPayment\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfRateReset\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfRateReset\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfRateReset\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfRateReset\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfScalingIndex\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfScalingIndex\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfScalingIndex\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfScalingIndex\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfFee\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfFee\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfFee\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfFee\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfPrincipalRedemption\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfPrincipalRedemption\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfPrincipalRedemption\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfPrincipalRedemption\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            )\\n        );\\n    }\\n\\n    function decodeAndGetEnumValueForANNTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == \\\"contractType\\\") {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"calendar\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240));\\n        } else if (attributeKey == bytes32(\\\"contractRole\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232));\\n        } else if (attributeKey == bytes32(\\\"dayCountConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224));\\n        } else if (attributeKey == bytes32(\\\"businessDayConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216));\\n        } else if (attributeKey == bytes32(\\\"endOfMonthConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208));\\n        } else if (attributeKey == bytes32(\\\"scalingEffect\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200));\\n        } else if (attributeKey == bytes32(\\\"feeBasis\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 192));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetAddressValueForANNTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (address)\\n    {\\n        if (attributeKey == bytes32(\\\"currency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96));\\n        } else if (attributeKey == bytes32(\\\"settlementCurrency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96));\\n        } else {\\n            return address(0);\\n        }   \\n    }\\n\\n    function decodeAndGetBytes32ValueForANNTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return asset.packedTerms[attributeKey];\\n    }\\n\\n    function decodeAndGetUIntValueForANNTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForANNTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetPeriodValueForANNTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IP memory)\\n    {\\n        if (\\n            attributeKey == bytes32(\\\"gracePeriod\\\")\\n            || attributeKey == bytes32(\\\"delinquencyPeriod\\\")\\n        ) {\\n            return IP(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                (asset.packedTerms[attributeKey] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IP(0, P(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetCycleValueForANNTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IPS memory)\\n    {\\n        if (\\n            attributeKey == bytes32(\\\"cycleOfInterestPayment\\\")\\n            || attributeKey == bytes32(\\\"cycleRateReset\\\")\\n            || attributeKey == bytes32(\\\"cycleScalingIndex\\\")\\n            || attributeKey == bytes32(\\\"cycleFee\\\")\\n            || attributeKey == bytes32(\\\"cycleOfPrincipalRedemption\\\")\\n        ) {\\n            return IPS(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[attributeKey] >> 8))),\\n                (asset.packedTerms[attributeKey] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IPS(0, P(0), S(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetContractReferenceValueForANNTermsAttribute(Asset storage /* asset */, bytes32 /* attributeKey */)\\n        external\\n        pure\\n        returns (ContractReference memory)\\n    {\\n        return ContractReference(\\n            bytes32(0),\\n            bytes32(0),\\n            ContractReferenceType(0),\\n            ContractReferenceRole(0)\\n        );\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store ANNState\\n     */\\n    function encodeAndSetANNState(Asset storage asset, ANNState memory state) external {\\n        storeInPackedState(asset, \\\"contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"feeAccrued\\\", bytes32(state.feeAccrued));\\n        storeInPackedState(asset, \\\"nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n        storeInPackedState(asset, \\\"nextPrincipalRedemptionPayment\\\", bytes32(state.nextPrincipalRedemptionPayment));\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store finalized ANNState\\n     */\\n    function encodeAndSetFinalizedANNState(Asset storage asset, ANNState memory state) external {\\n        storeInPackedState(asset, \\\"F_contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"F_statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"F_nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"F_maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"F_terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"F_notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"F_accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"F_feeAccrued\\\", bytes32(state.feeAccrued));\\n        storeInPackedState(asset, \\\"F_nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"F_interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"F_notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n        storeInPackedState(asset, \\\"F_nextPrincipalRedemptionPayment\\\", bytes32(state.nextPrincipalRedemptionPayment));\\n    }\\n\\n    /**\\n     * @dev Decode and load the ANNState of the asset\\n     */\\n    function decodeAndGetANNState(Asset storage asset)\\n        external\\n        view\\n        returns (ANNState memory)\\n    {\\n        return ANNState(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"statusDate\\\"]),\\n            uint256(asset.packedState[\\\"nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"terminationDate\\\"]),\\n\\n            int256(asset.packedState[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"feeAccrued\\\"]),\\n            int256(asset.packedState[\\\"nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"notionalScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"nextPrincipalRedemptionPayment\\\"])\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and load the finalized ANNState of the asset\\n     */\\n    function decodeAndGetFinalizedANNState(Asset storage asset)\\n        external\\n        view\\n        returns (ANNState memory)\\n    {\\n        return ANNState(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"F_statusDate\\\"]),\\n            uint256(asset.packedState[\\\"F_nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"F_maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"F_terminationDate\\\"]),\\n\\n            int256(asset.packedState[\\\"F_notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"F_accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"F_feeAccrued\\\"]),\\n            int256(asset.packedState[\\\"F_nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"F_interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"F_notionalScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"F_nextPrincipalRedemptionPayment\\\"])\\n        );\\n    }\\n\\n    function decodeAndGetEnumValueForANNStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"F_contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetUIntValueForANNStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedState[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForANNStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedState[attributeKey]);\\n    }\\n}\",\"keccak256\":\"0x97952ee5f49fd41ff59e864029e1f03b12c682eafe200d46bd5533a236ff25a5\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/BaseRegistryStorage.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Conversions.sol\\\";\\nimport \\\"../SharedTypes.sol\\\";\\nimport \\\"./Schedule/ScheduleEncoder.sol\\\";\\n\\n\\nstruct Settlement {\\n    bool isSettled;\\n    int256 payoff;\\n}\\n\\nstruct Asset {\\n    // boolean indicating that asset exists / is registered\\n    bool isSet;\\n    // address of the ACTUS Engine used for computing the State and the Payoff of the asset\\n    address engine;\\n    // address of the Asset Actor which is allowed to update the State of the asset\\n    address actor;\\n    // address of the Extension which is able to generate unscheduled events for the asset\\n    address extension;\\n    // schedule of the asset\\n    Schedule schedule;\\n    // ownership of the asset\\n    AssetOwnership ownership;\\n    // method level access control - stores which address can a specific method\\n    // method signature => address => has access\\n    mapping (bytes4 => mapping (address => bool)) access;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedTerms;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedState;\\n    // indicates whether a specific event was settled\\n    mapping (bytes32 => Settlement) settlement;\\n}\\n\\n/**\\n * @title BaseRegistryStorage\\n * @notice Describes the storage of the AssetRegistry\\n * Contains getter and setter methods for encoding, decoding data to optimize gas cost.\\n * Circumvents storing default values by relying on the characteristic of mappings returning zero for not set values.\\n */\\nabstract contract BaseRegistryStorage {\\n\\n    using ScheduleEncoder for Asset;\\n\\n    // AssetId => Asset\\n    mapping (bytes32 => Asset) internal assets;\\n}\\n\",\"keccak256\":\"0x3e8beac681f832d8b6dcf0a1be328ae129c7d71e7ab75ebe2d0809edcc813b46\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Schedule/ScheduleEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary ScheduleEncoder {\\n\\n    function encodeAndSetSchedule(Asset storage asset, bytes32[] memory schedule) internal {\\n        for (uint256 i = 0; i < schedule.length; i++) {\\n            if (schedule[i] == bytes32(0)) break;\\n            asset.schedule.events[i] = schedule[i];\\n            asset.schedule.length = i + 1;\\n        }\\n    }\\n\\n    function decodeAndGetSchedule(Asset storage asset) internal view returns (bytes32[] memory) {\\n        bytes32[] memory schedule = new bytes32[](asset.schedule.length);\\n\\n        for (uint256 i = 0; i < asset.schedule.length; i++) {\\n            schedule[i] = asset.schedule.events[i];\\n        }\\n\\n        return schedule;\\n    }\\n}\\n\",\"keccak256\":\"0x420da04c67322d387c9b0fbeb00accc59a63fb9c10cb7b4c21f955792c4ad236\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/Conversions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SharedTypes.sol\\\";\\n\\n\\ncontract Conversions {\\n\\n    function encodeCollateralAsObject(address collateralToken, uint256 collateralAmount)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(collateralToken))) << 96 | bytes32(uint256(uint96(collateralAmount)));\\n    }\\n\\n    function decodeCollateralObject(bytes32 object)\\n        public\\n        pure\\n        returns (address, uint256)\\n    {\\n        return (\\n            address(uint160(uint256(object >> 96))),\\n            uint256(uint96(uint256(object)))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcc273a4272ffd03ef3f6fd329590a25049482661820ee4dcc953d28eeb4a9a95\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/SharedTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../ACTUS/Core/ACTUSTypes.sol\\\";\\nimport \\\"../../ACTUS/Core/ACTUSConstants.sol\\\";\\n\\n\\nstruct AssetOwnership {\\n    // account which has to fulfill all obligations for the creator side\\n    address creatorObligor;\\n    // account to which all cashflows to which the creator is the beneficiary are forwarded\\n    address creatorBeneficiary;\\n    // account which has to fulfill all obligations for the counterparty\\n    address counterpartyObligor;\\n    // account to which all cashflows to which the counterparty is the beneficiary are forwarded\\n    address counterpartyBeneficiary;\\n}\\n\\n// scheduleTime and EventType are tightly packed and encoded as bytes32\\nstruct Schedule {\\n    // schedule times of cyclic events (used if no schedule is set)\\n    mapping(EventType => uint256) lastScheduleTimeOfCyclicEvent;\\n    // index of event => bytes32 encoded event\\n    mapping(uint256 => bytes32) events;\\n    // the length of the schedule, used to determine the end of the schedule\\n    uint256 length;\\n    // pointer to index of the next event in the schedule\\n    uint256 nextScheduleIndex;\\n    // last event which could not be settled\\n    bytes32 pendingEvent;\\n    // last non-cyclic event which was processed (used if no schedule is set)\\n    bytes32 lastNonCyclicEvent;\\n}\\n\",\"keccak256\":\"0xadbb252a62b8641f01338ce1650d5d59ccc4a6f3f0e62c49e7b16bf51d2a46b8\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x613261610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c806379d346b7116100ac578063dc8f76bc1161007b578063dc8f76bc1461022b578063f317a7e61461024b578063f5fb4bf31461026b578063f6e1c28c1461028b578063f9d0abbb1461029e57610115565b806379d346b7146101b65780638198ef6d146101d65780639a2662b0146101f8578063c638f1871461021857610115565b80632e6a8302116100e85780632e6a83021461017657806339c248da1461016357806355c6c2e91461011a5780635f70a7941461019657610115565b806308cb41401461011a57806318cd82771461014357806326fe71261461011a5780632a787cdb14610163575b600080fd5b61012d610128366004612972565b6102be565b60405161013a9190612df4565b60405180910390f35b610156610151366004612972565b6102d6565b60405161013a919061317e565b61012d610171366004612972565b610382565b610189610184366004612972565b610398565b60405161013a9190613170565b6101a96101a4366004612972565b610480565b60405161013a9190613162565b6101c96101c436600461295a565b6105df565b60405161013a9190612e8d565b8180156101e257600080fd5b506101f66101f1366004612a59565b61123f565b005b81801561020457600080fd5b506101f6610213366004612993565b611aea565b610156610226366004612972565b611ce8565b61023e61023936600461295a565b611eca565b60405161013a9190612dfd565b61025e610259366004612972565b6120ac565b60405161013a9190613121565b81801561027757600080fd5b506101f6610286366004612993565b6120df565b61023e61029936600461295a565b6122a7565b6102b16102ac366004612972565b6124b5565b60405161013a9190612de0565b6000818152600e830160205260409020545b92915050565b600072636f6e7472616374506572666f726d616e636560681b821415610327575072636f6e7472616374506572666f726d616e636560681b6000908152600f8301602052604090205460f81c6102d0565b74465f636f6e7472616374506572666f726d616e636560581b82141561037a575074465f636f6e7472616374506572666f726d616e636560581b6000908152600f8301602052604090205460f81c6102d0565b5060006102d0565b6000908152600f91909101602052604090205490565b6103a06125a5565b6a19dc9858d954195c9a5bd960aa1b8214806103cf57507019195b1a5b9c5d595b98de54195c9a5bd9607a1b82145b1561045957604080516060810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561041357fe5b600581111561041e57fe5b81526000848152600e8601602090815260409091205491019060081c60019081161461044b57600061044e565b60015b1515905290506102d0565b6040805160608101909152600080825260208201905b8152600060209091015290506102d0565b6104886125c8565b7518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b8214806104bf57506d18de58db1954985d1954995cd95d60921b82145b806104dd5750700c6f2c6d8caa6c6c2d8d2dcce92dcc8caf607b1b82145b806104f25750676379636c6546656560c01b82145b8061050a575060008051602061320c83398151915282145b156105be57604080516080810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561054e57fe5b600581111561055957fe5b8152602001600885600e01600086815260200190815260200160002054901c60001c60ff16600181111561058957fe5b600181111561059457fe5b81526000848152600e8601602090815260409091205491019060019081161461044b57600061044e565b6040805160808101909152600080825260208201908152602001600061046f565b6105e76125e9565b604080516105a08101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c601381111561061c57fe5b601381111561062757fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561065f57fe5b600181111561066a57fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c8111156106a257fe5b600c8111156106ad57fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600a8111156106e557fe5b600a8111156106f057fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600881111561072857fe5b600881111561073357fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561076b57fe5b600181111561077657fe5b815260200160c884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660038111156107ae57fe5b60038111156107b957fe5b815260200160c084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660018111156107f157fe5b60018111156107fc57fe5b81526763757272656e637960c01b6000908152600e85016020818152604080842054606090811c8387015271736574746c656d656e7443757272656e637960701b855283835281852054811c82870152781b585c9ad95d13d89a9958dd10dbd91954985d1954995cd95d603a1b85528383528185205481870152697374617475734461746560b01b855283835281852054608087015272696e697469616c45786368616e67654461746560681b85528383528185205460a08701526b6d617475726974794461746560a01b85528383528185205460c08701526869737375654461746560b81b85528383528185205460e08701526b70757263686173654461746560a01b855283835281852054610100870152746361706974616c697a6174696f6e456e644461746560581b8552838352818520546101208701527f6379636c65416e63686f72446174654f66496e7465726573745061796d656e748552838352818520546101408701527f6379636c65416e63686f72446174654f665261746552657365740000000000008552838352818520546101608701527f6379636c65416e63686f72446174654f665363616c696e67496e646578000000855283835281852054610180870152736379636c65416e63686f72446174654f6646656560601b8552838352818520546101a08701527f6379636c65416e63686f72446174654f665072696e636970616c526564656d708552838352818520546101c0870152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b8552838352818520546101e0870152726e6f6d696e616c496e7465726573745261746560681b8552838352818520546102008701526e1858d8dc9d5959125b9d195c995cdd608a1b8552838352818520546102208701526d3930ba32a6bab63a34b83634b2b960911b855283835281852054610240870152691c985d1954dc1c99585960b21b8552838352818520546102608701526c6e65787452657365745261746560981b855283835281852054610280870152666665655261746560c81b8552838352818520546102a0870152691999595058d8dc9d595960b21b8552838352818520546102c0870152731c1c995b5a5d5b511a5cd8dbdd5b9d105d12515160621b8552838352818520546102e0870152727072696365417450757263686173654461746560681b85528383528185205461030087015275707269636541745465726d696e6174696f6e4461746560501b8552838352818520546103208701526000805160206131ec8339815191528552838352818520546103408701526606c6966654361760cc1b855283835281852054610360870152683634b332a33637b7b960b91b855283835281852054610380870152680706572696f644361760bc1b8552838352818520546103a08701526a3832b934b7b2233637b7b960a91b8552838352818520546103c0870152815190810182526a19dc9858d954195c9a5bd960aa1b80865284845291852054601881901c8252919094529181526103e09093019282019060101c60ff166005811115610c6c57fe5b6005811115610c7757fe5b81526a19dc9858d954195c9a5bd960aa1b6000908152600e8701602090815260409091205491019060081c600190811614610cb3576000610cb6565b60015b151590528152604080516060810182527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610d1457fe5b6005811115610d1f57fe5b81527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000908152600e8701602090815260409091205491019060081c600190811614610d61576000610d64565b60015b151590528152604080516080810182527518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610dc757fe5b6005811115610dd257fe5b8152602001600886600e0160007518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b815260200190815260200160002054901c60001c60ff166001811115610e1b57fe5b6001811115610e2657fe5b81527518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b6000908152600e87016020908152604090912054910190600190811614610e6a576000610e6d565b60015b151590528152604080516080810182526f18de58db1953d994985d1954995cd95d60821b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610eca57fe5b6005811115610ed557fe5b8152602001600886600e0160006f18de58db1953d994985d1954995cd95d60821b815260200190815260200160002054901c60001c60ff166001811115610f1857fe5b6001811115610f2357fe5b81526f18de58db1953d994985d1954995cd95d60821b6000908152600e87016020908152604090912054910190600190811614610f61576000610f64565b60015b15159052815260408051608081018252720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610fc457fe5b6005811115610fcf57fe5b8152602001600886600e016000720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b815260200190815260200160002054901c60001c60ff16600181111561101557fe5b600181111561102057fe5b8152720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b6000908152600e87016020908152604090912054910190600190811614611061576000611064565b60015b15159052815260408051608081018252696379636c654f6646656560b01b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff1660058111156110bb57fe5b60058111156110c657fe5b8152602001600886600e016000696379636c654f6646656560b01b815260200190815260200160002054901c60001c60ff16600181111561110357fe5b600181111561110e57fe5b8152696379636c654f6646656560b01b6000908152600e87016020908152604090912054910190600190811614611146576000611149565b60015b1515905281526040805160808101825260008051602061320c8339815191526000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff1660058111156111a157fe5b60058111156111ac57fe5b8152602001600886600e01600060008051602061320c833981519152815260200190815260200160002054901c60001c60ff1660018111156111ea57fe5b60018111156111f557fe5b815260008051602061320c8339815191526000908152600e8701602090815260409091205491019060019081161461122e576000611231565b60015b15159052905290505b919050565b6113258264656e756d7360d81b60c08460e00151600181111561125e57fe5b60ff1660001b901b60c88560c00151600381111561127857fe5b60ff1660001b901b60d08660a00151600181111561129257fe5b60ff1660001b901b60d8876080015160088111156112ac57fe5b60ff1660001b901b60e08860600151600a8111156112c657fe5b60ff1660001b901b60e88960400151600c8111156112e057fe5b60ff1660001b901b60f08a6020015160018111156112fa57fe5b60ff1660001b901b60f88b60000151601381111561131457fe5b60ff16901b1717171717171761253d565b611350826763757272656e637960c01b60608461010001516001600160a01b0316901b60001b61253d565b6113858271736574746c656d656e7443757272656e637960701b60608461012001516001600160a01b0316901b60001b61253d565b6113b182781b585c9ad95d13d89a9958dd10dbd91954985d1954995cd95d603a1b83610140015161253d565b6113d182697374617475734461746560b01b83610160015160001b61253d565b6113fa8272696e697469616c45786368616e67654461746560681b83610180015160001b61253d565b61141c826b6d617475726974794461746560a01b836101a0015160001b61253d565b61143b826869737375654461746560b81b836101c0015160001b61253d565b61145d826b70757263686173654461746560a01b836101e0015160001b61253d565b61148882746361706974616c697a6174696f6e456e644461746560581b83610200015160001b61253d565b6114bb827f6379636c65416e63686f72446174654f66496e7465726573745061796d656e7483610220015160001b61253d565b6114ee827f6379636c65416e63686f72446174654f6652617465526573657400000000000083610240015160001b61253d565b611521827f6379636c65416e63686f72446174654f665363616c696e67496e64657800000083610260015160001b61253d565b61154b82736379636c65416e63686f72446174654f6646656560601b83610280015160001b61253d565b61157e827f6379636c65416e63686f72446174654f665072696e636970616c526564656d70836102a0015160001b61253d565b6115a582701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b836102c0015160001b61253d565b6115ce82726e6f6d696e616c496e7465726573745261746560681b836102e0015160001b61253d565b6115f3826e1858d8dc9d5959125b9d195c995cdd608a1b83610300015160001b61253d565b611617826d3930ba32a6bab63a34b83634b2b960911b83610320015160001b61253d565b61163782691c985d1954dc1c99585960b21b83610340015160001b61253d565b61165a826c6e65787452657365745261746560981b83610360015160001b61253d565b61167782666665655261746560c81b83610380015160001b61253d565b61169782691999595058d8dc9d595960b21b836103a0015160001b61253d565b6116c182731c1c995b5a5d5b511a5cd8dbdd5b9d105d12515160621b836103c0015160001b61253d565b6116ea82727072696365417450757263686173654461746560681b836103e0015160001b61253d565b6117168275707269636541745465726d696e6174696f6e4461746560501b83610400015160001b61253d565b611737826000805160206131ec83398151915283610420015160001b61253d565b611754826606c6966654361760cc1b83610440015160001b61253d565b61177382683634b332a33637b7b960b91b83610460015160001b61253d565b61179282680706572696f644361760bc1b83610480015160001b61253d565b6117b3826a3832b934b7b2233637b7b960a91b836104a0015160001b61253d565b611812826a19dc9858d954195c9a5bd960aa1b6008846104c00151604001516117dd5760006117e0565b60015b60ff1660001b901b6010856104c001516020015160058111156117ff57fe5b6104c08701515160181b911b171761253d565b611877827019195b1a5b9c5d595b98de54195c9a5bd9607a1b6008846104e0015160400151611842576000611845565b60015b60ff1660001b901b6010856104e0015160200151600581111561186457fe5b6104e08701515160181b911b171761253d565b6118fa827518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b836105000151606001516118aa5760006118ad565b60015b60ff1660001b60088561050001516040015160018111156118ca57fe5b60001b901b60108661050001516020015160058111156118e657fe5b6105008801515160181b911b17171761253d565b611977826f18de58db1953d994985d1954995cd95d60821b8361052001516060015161192757600061192a565b60015b60ff1660001b600885610520015160400151600181111561194757fe5b60001b901b601086610520015160200151600581111561196357fe5b6105208801515160181b911b17171761253d565b6119f782720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b836105400151606001516119a75760006119aa565b60015b60ff1660001b60088561054001516040015160018111156119c757fe5b60001b901b60108661054001516020015160058111156119e357fe5b6105408801515160181b911b17171761253d565b611a6e82696379636c654f6646656560b01b83610560015160600151611a1e576000611a21565b60015b60ff1660001b6008856105600151604001516001811115611a3e57fe5b60001b901b6010866105600151602001516005811115611a5a57fe5b6105608801515160181b911b17171761253d565b611ae68260008051602061320c83398151915283610580015160600151611a96576000611a99565b60015b60ff1660001b6008856105800151604001516001811115611ab657fe5b60001b901b6010866105800151602001516005811115611ad257fe5b6105808801515160181b911b17171761253d565b5050565b611b238274465f636f6e7472616374506572666f726d616e636560581b60f884600001516005811115611b1957fe5b60ff16901b612573565b611b44826b465f7374617475734461746560a01b836020015160001b612573565b611b6c8272465f6e6f6e506572666f726d696e674461746560681b836040015160001b612573565b611b8f826d465f6d617475726974794461746560901b836060015160001b612573565b611bb58270465f7465726d696e6174696f6e4461746560781b836080015160001b612573565b611bdd82721197db9bdd1a5bdb985b141c9a5b98da5c185b606a1b8360a0015160001b612573565b611c0382701197d858d8dc9d5959125b9d195c995cdd607a1b8360c0015160001b612573565b611c24826b1197d999595058d8dc9d595960a21b8360e0015160001b612573565b611c4f8274465f6e6f6d696e616c496e7465726573745261746560581b83610100015160001b612573565b611c82827f465f696e7465726573745363616c696e674d756c7469706c696572000000000083610120015160001b612573565b611cb5827f465f6e6f74696f6e616c5363616c696e674d756c7469706c696572000000000083610140015160001b612573565b611ae6827f465f6e6578745072696e636970616c526564656d7074696f6e5061796d656e7483610160015160001b612573565b6000816b636f6e74726163745479706560a01b1415611d24575064656e756d7360d81b6000908152600e8301602052604090205460f81c6102d0565b6731b0b632b73230b960c11b821415611d5a575064656e756d7360d81b6000908152600e8301602052604090205460f01c6102d0565b6b636f6e7472616374526f6c6560a01b821415611d94575064656e756d7360d81b6000908152600e8301602052604090205460e81c6102d0565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b821415611dd4575064656e756d7360d81b6000908152600e8301602052604090205460e01c6102d0565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b821415611e17575064656e756d7360d81b6000908152600e8301602052604090205460d81c6102d0565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b821415611e59575064656e756d7360d81b6000908152600e8301602052604090205460d01c6102d0565b6c1cd8d85b1a5b99d159999958dd609a1b821415611e94575064656e756d7360d81b6000908152600e8301602052604090205460c81c6102d0565b67666565426173697360c01b82141561037a575064656e756d7360d81b6000908152600e8301602052604090205460c01c6102d0565b611ed2612770565b604080516101808101825272636f6e7472616374506572666f726d616e636560681b6000908152600f85016020529190912054819060f81c6005811115611f1557fe5b6005811115611f2057fe5b8152697374617475734461746560b01b6000908152600f8501602081815260408084205482860152706e6f6e506572666f726d696e674461746560781b845282825280842054818601526b6d617475726974794461746560a01b84528282528084205460608601526e7465726d696e6174696f6e4461746560881b8452828252808420546080860152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b84528282528084205460a08601526e1858d8dc9d5959125b9d195c995cdd608a1b84528282528084205460c0860152691999595058d8dc9d595960b21b84528282528084205460e0860152726e6f6d696e616c496e7465726573745261746560681b8452828252808420546101008601527834b73a32b932b9ba29b1b0b634b733a6bab63a34b83634b2b960391b845282825280842054610120860152783737ba34b7b730b629b1b0b634b733a6bab63a34b83634b2b960391b8452828252808420546101408601526000805160206131ec8339815191528452919052902054610160909101529050919050565b6120b46127d2565b6040805160808101825260008082526020820181905290918201908152602001600090529392505050565b61210c8272636f6e7472616374506572666f726d616e636560681b60f884600001516005811115611b1957fe5b61212b82697374617475734461746560b01b836020015160001b612573565b61215182706e6f6e506572666f726d696e674461746560781b836040015160001b612573565b612172826b6d617475726974794461746560a01b836060015160001b612573565b612196826e7465726d696e6174696f6e4461746560881b836080015160001b612573565b6121bc82701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b8360a0015160001b612573565b6121e0826e1858d8dc9d5959125b9d195c995cdd608a1b8360c0015160001b612573565b6121ff82691999595058d8dc9d595960b21b8360e0015160001b612573565b61222882726e6f6d696e616c496e7465726573745261746560681b83610100015160001b612573565b612257827834b73a32b932b9ba29b1b0b634b733a6bab63a34b83634b2b960391b83610120015160001b612573565b61228682783737ba34b7b730b629b1b0b634b733a6bab63a34b83634b2b960391b83610140015160001b612573565b611ae6826000805160206131ec83398151915283610160015160001b612573565b6122af612770565b604080516101808101825274465f636f6e7472616374506572666f726d616e636560581b6000908152600f85016020529190912054819060f81c60058111156122f457fe5b60058111156122ff57fe5b81526b465f7374617475734461746560a01b6000908152600f850160208181526040808420548286015272465f6e6f6e506572666f726d696e674461746560681b845282825280842054818601526d465f6d617475726974794461746560901b845282825280842054606086015270465f7465726d696e6174696f6e4461746560781b8452828252808420546080860152721197db9bdd1a5bdb985b141c9a5b98da5c185b606a1b84528282528084205460a0860152701197d858d8dc9d5959125b9d195c995cdd607a1b84528282528084205460c08601526b1197d999595058d8dc9d595960a21b84528282528084205460e086015274465f6e6f6d696e616c496e7465726573745261746560581b8452828252808420546101008601527f465f696e7465726573745363616c696e674d756c7469706c69657200000000008452828252808420546101208601527f465f6e6f74696f6e616c5363616c696e674d756c7469706c69657200000000008452828252808420546101408601527f465f6e6578745072696e636970616c526564656d7074696f6e5061796d656e748452919052902054610160909101529050919050565b60006763757272656e637960c01b8214156124f057506763757272656e637960c01b6000908152600e8301602052604090205460601c6102d0565b71736574746c656d656e7443757272656e637960701b82141561037a575071736574746c656d656e7443757272656e637960701b6000908152600e8301602052604090205460601c6102d0565b6000828152600e8401602052604090205481141561255a5761256e565b6000828152600e8401602052604090208190555b505050565b6000828152600f840160205260409020548114156125905761256e565b6000918252600f929092016020526040902055565b6040805160608101909152600080825260208201905b8152600060209091015290565b604080516080810190915260008082526020820190815260200160006125bb565b604080516105a0810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000801916815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200161271d6125a5565b815260200161272a6125a5565b81526020016127376125c8565b81526020016127446125c8565b81526020016127516125c8565b815260200161275e6125c8565b815260200161276b6125c8565b905290565b604080516101808101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160808101825260008082526020820181905290918201908152602001600061276b565b80356001600160a01b038116811461123a57600080fd5b8035801515811461123a57600080fd5b80356009811061123a57600080fd5b803561123a816131d1565b803561123a816131de565b8035600d811061123a57600080fd5b80356014811061123a57600080fd5b8035600b811061123a57600080fd5b80356004811061123a57600080fd5b600060808284031215612892578081fd5b6040516080810181811067ffffffffffffffff821117156128af57fe5b6040528235815290508060208301356128c7816131de565b602082015260408301356128da816131d1565b60408201526128eb60608401612810565b60608201525092915050565b600060608284031215612908578081fd5b6040516060810181811067ffffffffffffffff8211171561292557fe5b60405282358152905080602083013561293d816131de565b602082015261294e60408401612810565b60408201525092915050565b60006020828403121561296b578081fd5b5035919050565b60008060408385031215612984578081fd5b50508035926020909101359150565b6000808284036101a08112156129a7578283fd5b8335925061018080601f19830112156129be578283fd5b6129c78161318c565b91506129d56020860161283a565b825260408501356020830152606085013560408301526080850135606083015260a0850135608083015260c085013560a083015260e085013560c08301526101008086013560e08401526101208087013582850152610140915081870135818501525061016080870135828501528287013581850152505050809150509250929050565b600080828403610820811215612a6d578283fd5b83359250610800601f1982011215612a83578182fd5b506105a0612a908161318c565b612a9c60208601612854565b8152612aaa6040860161282f565b6020820152612abb60608601612845565b6040820152612acc60808601612863565b6060820152612add60a08601612820565b6080820152612aee60c0860161282f565b60a0820152612aff60e08601612872565b60c0820152610100612b1281870161282f565b60e0830152610120612b258188016127f9565b828401526101409150612b398288016127f9565b8184015250610160808701358284015261018091508187013581840152506101a080870135828401526101c091508187013581840152506101e08087013582840152610200915081870135818401525061022080870135828401526102409150818701358184015250610260808701358284015261028091508187013581840152506102a080870135828401526102c091508187013581840152506102e08087013582840152610300915081870135818401525061032080870135828401526103409150818701358184015250610360808701358284015261038091508187013581840152506103a080870135828401526103c091508187013581840152506103e08087013582840152610400915081870135818401525061042080870135828401526104409150818701358184015250610460808701358284015261048091508187013581840152506104a080870135828401526104c091508187013581840152506104e0612cab888289016128f7565b828401526105409150612cc0888389016128f7565b90830152612cd087878501612881565b610500830152612ce4876106208801612881565b610520830152612cf8876106a08801612881565b90820152612d0a866107208701612881565b610560820152612d1e866107a08701612881565b61058082015280925050509250929050565b6001600160a01b03169052565b60098110612d4757fe5b9052565b612d47816131b0565b612d47816131bd565b600d8110612d4757fe5b60148110612d4757fe5b600b8110612d4757fe5b60048110612d4757fe5b805182526020810151612d97816131bd565b60208301526040810151612daa816131b0565b60408301526060908101511515910152565b805182526020810151612dce816131bd565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b90815260200190565b600061018082019050612e11828451612d54565b6020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525061016080840151818401525092915050565b600061080082019050612ea1828451612d67565b6020830151612eb36020840182612d4b565b506040830151612ec66040840182612d5d565b506060830151612ed96060840182612d71565b506080830151612eec6080840182612d3d565b5060a0830151612eff60a0840182612d4b565b5060c0830151612f1260c0840182612d7b565b5060e0830151612f2560e0840182612d4b565b5061010080840151612f3982850182612d30565b505061012080840151612f4e82850182612d30565b50506101408381015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151908301526102a080840151908301526102c080840151908301526102e08084015190830152610300808401519083015261032080840151908301526103408084015190830152610360808401519083015261038080840151908301526103a080840151908301526103c080840151908301526103e08084015190830152610400808401519083015261042080840151908301526104408084015190830152610460808401519083015261048080840151908301526104a080840151908301526104c08084015161309782850182612dbc565b50506104e08301516105206130ae81850183612dbc565b61050085015191506105806130c581860184612d85565b8186015192506130d9610600860184612d85565b61054086015192506130ef610680860184612d85565b6105608601519250613105610700860184612d85565b850151915061311a9050610780840182612d85565b5092915050565b815181526020808301519082015260408201516080820190613142816131c7565b60408301526060830151613155816131c7565b8060608401525092915050565b608081016102d08284612d85565b606081016102d08284612dbc565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156131a857fe5b604052919050565b600281106131ba57fe5b50565b600681106131ba57fe5b600581106131ba57fe5b600281106131ba57600080fd5b600681106131ba57600080fdfe6e6578745072696e636970616c526564656d7074696f6e5061796d656e7400006379636c654f665072696e636970616c526564656d7074696f6e000000000000a26469706673582212208412d995f8993db89dd339fea5e1d7e187758b5bb14939b0732ad6635113da7e64736f6c63430007040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c806379d346b7116100ac578063dc8f76bc1161007b578063dc8f76bc1461022b578063f317a7e61461024b578063f5fb4bf31461026b578063f6e1c28c1461028b578063f9d0abbb1461029e57610115565b806379d346b7146101b65780638198ef6d146101d65780639a2662b0146101f8578063c638f1871461021857610115565b80632e6a8302116100e85780632e6a83021461017657806339c248da1461016357806355c6c2e91461011a5780635f70a7941461019657610115565b806308cb41401461011a57806318cd82771461014357806326fe71261461011a5780632a787cdb14610163575b600080fd5b61012d610128366004612972565b6102be565b60405161013a9190612df4565b60405180910390f35b610156610151366004612972565b6102d6565b60405161013a919061317e565b61012d610171366004612972565b610382565b610189610184366004612972565b610398565b60405161013a9190613170565b6101a96101a4366004612972565b610480565b60405161013a9190613162565b6101c96101c436600461295a565b6105df565b60405161013a9190612e8d565b8180156101e257600080fd5b506101f66101f1366004612a59565b61123f565b005b81801561020457600080fd5b506101f6610213366004612993565b611aea565b610156610226366004612972565b611ce8565b61023e61023936600461295a565b611eca565b60405161013a9190612dfd565b61025e610259366004612972565b6120ac565b60405161013a9190613121565b81801561027757600080fd5b506101f6610286366004612993565b6120df565b61023e61029936600461295a565b6122a7565b6102b16102ac366004612972565b6124b5565b60405161013a9190612de0565b6000818152600e830160205260409020545b92915050565b600072636f6e7472616374506572666f726d616e636560681b821415610327575072636f6e7472616374506572666f726d616e636560681b6000908152600f8301602052604090205460f81c6102d0565b74465f636f6e7472616374506572666f726d616e636560581b82141561037a575074465f636f6e7472616374506572666f726d616e636560581b6000908152600f8301602052604090205460f81c6102d0565b5060006102d0565b6000908152600f91909101602052604090205490565b6103a06125a5565b6a19dc9858d954195c9a5bd960aa1b8214806103cf57507019195b1a5b9c5d595b98de54195c9a5bd9607a1b82145b1561045957604080516060810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561041357fe5b600581111561041e57fe5b81526000848152600e8601602090815260409091205491019060081c60019081161461044b57600061044e565b60015b1515905290506102d0565b6040805160608101909152600080825260208201905b8152600060209091015290506102d0565b6104886125c8565b7518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b8214806104bf57506d18de58db1954985d1954995cd95d60921b82145b806104dd5750700c6f2c6d8caa6c6c2d8d2dcce92dcc8caf607b1b82145b806104f25750676379636c6546656560c01b82145b8061050a575060008051602061320c83398151915282145b156105be57604080516080810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561054e57fe5b600581111561055957fe5b8152602001600885600e01600086815260200190815260200160002054901c60001c60ff16600181111561058957fe5b600181111561059457fe5b81526000848152600e8601602090815260409091205491019060019081161461044b57600061044e565b6040805160808101909152600080825260208201908152602001600061046f565b6105e76125e9565b604080516105a08101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c601381111561061c57fe5b601381111561062757fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561065f57fe5b600181111561066a57fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c8111156106a257fe5b600c8111156106ad57fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600a8111156106e557fe5b600a8111156106f057fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600881111561072857fe5b600881111561073357fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561076b57fe5b600181111561077657fe5b815260200160c884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660038111156107ae57fe5b60038111156107b957fe5b815260200160c084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660018111156107f157fe5b60018111156107fc57fe5b81526763757272656e637960c01b6000908152600e85016020818152604080842054606090811c8387015271736574746c656d656e7443757272656e637960701b855283835281852054811c82870152781b585c9ad95d13d89a9958dd10dbd91954985d1954995cd95d603a1b85528383528185205481870152697374617475734461746560b01b855283835281852054608087015272696e697469616c45786368616e67654461746560681b85528383528185205460a08701526b6d617475726974794461746560a01b85528383528185205460c08701526869737375654461746560b81b85528383528185205460e08701526b70757263686173654461746560a01b855283835281852054610100870152746361706974616c697a6174696f6e456e644461746560581b8552838352818520546101208701527f6379636c65416e63686f72446174654f66496e7465726573745061796d656e748552838352818520546101408701527f6379636c65416e63686f72446174654f665261746552657365740000000000008552838352818520546101608701527f6379636c65416e63686f72446174654f665363616c696e67496e646578000000855283835281852054610180870152736379636c65416e63686f72446174654f6646656560601b8552838352818520546101a08701527f6379636c65416e63686f72446174654f665072696e636970616c526564656d708552838352818520546101c0870152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b8552838352818520546101e0870152726e6f6d696e616c496e7465726573745261746560681b8552838352818520546102008701526e1858d8dc9d5959125b9d195c995cdd608a1b8552838352818520546102208701526d3930ba32a6bab63a34b83634b2b960911b855283835281852054610240870152691c985d1954dc1c99585960b21b8552838352818520546102608701526c6e65787452657365745261746560981b855283835281852054610280870152666665655261746560c81b8552838352818520546102a0870152691999595058d8dc9d595960b21b8552838352818520546102c0870152731c1c995b5a5d5b511a5cd8dbdd5b9d105d12515160621b8552838352818520546102e0870152727072696365417450757263686173654461746560681b85528383528185205461030087015275707269636541745465726d696e6174696f6e4461746560501b8552838352818520546103208701526000805160206131ec8339815191528552838352818520546103408701526606c6966654361760cc1b855283835281852054610360870152683634b332a33637b7b960b91b855283835281852054610380870152680706572696f644361760bc1b8552838352818520546103a08701526a3832b934b7b2233637b7b960a91b8552838352818520546103c0870152815190810182526a19dc9858d954195c9a5bd960aa1b80865284845291852054601881901c8252919094529181526103e09093019282019060101c60ff166005811115610c6c57fe5b6005811115610c7757fe5b81526a19dc9858d954195c9a5bd960aa1b6000908152600e8701602090815260409091205491019060081c600190811614610cb3576000610cb6565b60015b151590528152604080516060810182527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610d1457fe5b6005811115610d1f57fe5b81527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000908152600e8701602090815260409091205491019060081c600190811614610d61576000610d64565b60015b151590528152604080516080810182527518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610dc757fe5b6005811115610dd257fe5b8152602001600886600e0160007518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b815260200190815260200160002054901c60001c60ff166001811115610e1b57fe5b6001811115610e2657fe5b81527518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b6000908152600e87016020908152604090912054910190600190811614610e6a576000610e6d565b60015b151590528152604080516080810182526f18de58db1953d994985d1954995cd95d60821b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610eca57fe5b6005811115610ed557fe5b8152602001600886600e0160006f18de58db1953d994985d1954995cd95d60821b815260200190815260200160002054901c60001c60ff166001811115610f1857fe5b6001811115610f2357fe5b81526f18de58db1953d994985d1954995cd95d60821b6000908152600e87016020908152604090912054910190600190811614610f61576000610f64565b60015b15159052815260408051608081018252720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610fc457fe5b6005811115610fcf57fe5b8152602001600886600e016000720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b815260200190815260200160002054901c60001c60ff16600181111561101557fe5b600181111561102057fe5b8152720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b6000908152600e87016020908152604090912054910190600190811614611061576000611064565b60015b15159052815260408051608081018252696379636c654f6646656560b01b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff1660058111156110bb57fe5b60058111156110c657fe5b8152602001600886600e016000696379636c654f6646656560b01b815260200190815260200160002054901c60001c60ff16600181111561110357fe5b600181111561110e57fe5b8152696379636c654f6646656560b01b6000908152600e87016020908152604090912054910190600190811614611146576000611149565b60015b1515905281526040805160808101825260008051602061320c8339815191526000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff1660058111156111a157fe5b60058111156111ac57fe5b8152602001600886600e01600060008051602061320c833981519152815260200190815260200160002054901c60001c60ff1660018111156111ea57fe5b60018111156111f557fe5b815260008051602061320c8339815191526000908152600e8701602090815260409091205491019060019081161461122e576000611231565b60015b15159052905290505b919050565b6113258264656e756d7360d81b60c08460e00151600181111561125e57fe5b60ff1660001b901b60c88560c00151600381111561127857fe5b60ff1660001b901b60d08660a00151600181111561129257fe5b60ff1660001b901b60d8876080015160088111156112ac57fe5b60ff1660001b901b60e08860600151600a8111156112c657fe5b60ff1660001b901b60e88960400151600c8111156112e057fe5b60ff1660001b901b60f08a6020015160018111156112fa57fe5b60ff1660001b901b60f88b60000151601381111561131457fe5b60ff16901b1717171717171761253d565b611350826763757272656e637960c01b60608461010001516001600160a01b0316901b60001b61253d565b6113858271736574746c656d656e7443757272656e637960701b60608461012001516001600160a01b0316901b60001b61253d565b6113b182781b585c9ad95d13d89a9958dd10dbd91954985d1954995cd95d603a1b83610140015161253d565b6113d182697374617475734461746560b01b83610160015160001b61253d565b6113fa8272696e697469616c45786368616e67654461746560681b83610180015160001b61253d565b61141c826b6d617475726974794461746560a01b836101a0015160001b61253d565b61143b826869737375654461746560b81b836101c0015160001b61253d565b61145d826b70757263686173654461746560a01b836101e0015160001b61253d565b61148882746361706974616c697a6174696f6e456e644461746560581b83610200015160001b61253d565b6114bb827f6379636c65416e63686f72446174654f66496e7465726573745061796d656e7483610220015160001b61253d565b6114ee827f6379636c65416e63686f72446174654f6652617465526573657400000000000083610240015160001b61253d565b611521827f6379636c65416e63686f72446174654f665363616c696e67496e64657800000083610260015160001b61253d565b61154b82736379636c65416e63686f72446174654f6646656560601b83610280015160001b61253d565b61157e827f6379636c65416e63686f72446174654f665072696e636970616c526564656d70836102a0015160001b61253d565b6115a582701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b836102c0015160001b61253d565b6115ce82726e6f6d696e616c496e7465726573745261746560681b836102e0015160001b61253d565b6115f3826e1858d8dc9d5959125b9d195c995cdd608a1b83610300015160001b61253d565b611617826d3930ba32a6bab63a34b83634b2b960911b83610320015160001b61253d565b61163782691c985d1954dc1c99585960b21b83610340015160001b61253d565b61165a826c6e65787452657365745261746560981b83610360015160001b61253d565b61167782666665655261746560c81b83610380015160001b61253d565b61169782691999595058d8dc9d595960b21b836103a0015160001b61253d565b6116c182731c1c995b5a5d5b511a5cd8dbdd5b9d105d12515160621b836103c0015160001b61253d565b6116ea82727072696365417450757263686173654461746560681b836103e0015160001b61253d565b6117168275707269636541745465726d696e6174696f6e4461746560501b83610400015160001b61253d565b611737826000805160206131ec83398151915283610420015160001b61253d565b611754826606c6966654361760cc1b83610440015160001b61253d565b61177382683634b332a33637b7b960b91b83610460015160001b61253d565b61179282680706572696f644361760bc1b83610480015160001b61253d565b6117b3826a3832b934b7b2233637b7b960a91b836104a0015160001b61253d565b611812826a19dc9858d954195c9a5bd960aa1b6008846104c00151604001516117dd5760006117e0565b60015b60ff1660001b901b6010856104c001516020015160058111156117ff57fe5b6104c08701515160181b911b171761253d565b611877827019195b1a5b9c5d595b98de54195c9a5bd9607a1b6008846104e0015160400151611842576000611845565b60015b60ff1660001b901b6010856104e0015160200151600581111561186457fe5b6104e08701515160181b911b171761253d565b6118fa827518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b836105000151606001516118aa5760006118ad565b60015b60ff1660001b60088561050001516040015160018111156118ca57fe5b60001b901b60108661050001516020015160058111156118e657fe5b6105008801515160181b911b17171761253d565b611977826f18de58db1953d994985d1954995cd95d60821b8361052001516060015161192757600061192a565b60015b60ff1660001b600885610520015160400151600181111561194757fe5b60001b901b601086610520015160200151600581111561196357fe5b6105208801515160181b911b17171761253d565b6119f782720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b836105400151606001516119a75760006119aa565b60015b60ff1660001b60088561054001516040015160018111156119c757fe5b60001b901b60108661054001516020015160058111156119e357fe5b6105408801515160181b911b17171761253d565b611a6e82696379636c654f6646656560b01b83610560015160600151611a1e576000611a21565b60015b60ff1660001b6008856105600151604001516001811115611a3e57fe5b60001b901b6010866105600151602001516005811115611a5a57fe5b6105608801515160181b911b17171761253d565b611ae68260008051602061320c83398151915283610580015160600151611a96576000611a99565b60015b60ff1660001b6008856105800151604001516001811115611ab657fe5b60001b901b6010866105800151602001516005811115611ad257fe5b6105808801515160181b911b17171761253d565b5050565b611b238274465f636f6e7472616374506572666f726d616e636560581b60f884600001516005811115611b1957fe5b60ff16901b612573565b611b44826b465f7374617475734461746560a01b836020015160001b612573565b611b6c8272465f6e6f6e506572666f726d696e674461746560681b836040015160001b612573565b611b8f826d465f6d617475726974794461746560901b836060015160001b612573565b611bb58270465f7465726d696e6174696f6e4461746560781b836080015160001b612573565b611bdd82721197db9bdd1a5bdb985b141c9a5b98da5c185b606a1b8360a0015160001b612573565b611c0382701197d858d8dc9d5959125b9d195c995cdd607a1b8360c0015160001b612573565b611c24826b1197d999595058d8dc9d595960a21b8360e0015160001b612573565b611c4f8274465f6e6f6d696e616c496e7465726573745261746560581b83610100015160001b612573565b611c82827f465f696e7465726573745363616c696e674d756c7469706c696572000000000083610120015160001b612573565b611cb5827f465f6e6f74696f6e616c5363616c696e674d756c7469706c696572000000000083610140015160001b612573565b611ae6827f465f6e6578745072696e636970616c526564656d7074696f6e5061796d656e7483610160015160001b612573565b6000816b636f6e74726163745479706560a01b1415611d24575064656e756d7360d81b6000908152600e8301602052604090205460f81c6102d0565b6731b0b632b73230b960c11b821415611d5a575064656e756d7360d81b6000908152600e8301602052604090205460f01c6102d0565b6b636f6e7472616374526f6c6560a01b821415611d94575064656e756d7360d81b6000908152600e8301602052604090205460e81c6102d0565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b821415611dd4575064656e756d7360d81b6000908152600e8301602052604090205460e01c6102d0565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b821415611e17575064656e756d7360d81b6000908152600e8301602052604090205460d81c6102d0565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b821415611e59575064656e756d7360d81b6000908152600e8301602052604090205460d01c6102d0565b6c1cd8d85b1a5b99d159999958dd609a1b821415611e94575064656e756d7360d81b6000908152600e8301602052604090205460c81c6102d0565b67666565426173697360c01b82141561037a575064656e756d7360d81b6000908152600e8301602052604090205460c01c6102d0565b611ed2612770565b604080516101808101825272636f6e7472616374506572666f726d616e636560681b6000908152600f85016020529190912054819060f81c6005811115611f1557fe5b6005811115611f2057fe5b8152697374617475734461746560b01b6000908152600f8501602081815260408084205482860152706e6f6e506572666f726d696e674461746560781b845282825280842054818601526b6d617475726974794461746560a01b84528282528084205460608601526e7465726d696e6174696f6e4461746560881b8452828252808420546080860152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b84528282528084205460a08601526e1858d8dc9d5959125b9d195c995cdd608a1b84528282528084205460c0860152691999595058d8dc9d595960b21b84528282528084205460e0860152726e6f6d696e616c496e7465726573745261746560681b8452828252808420546101008601527834b73a32b932b9ba29b1b0b634b733a6bab63a34b83634b2b960391b845282825280842054610120860152783737ba34b7b730b629b1b0b634b733a6bab63a34b83634b2b960391b8452828252808420546101408601526000805160206131ec8339815191528452919052902054610160909101529050919050565b6120b46127d2565b6040805160808101825260008082526020820181905290918201908152602001600090529392505050565b61210c8272636f6e7472616374506572666f726d616e636560681b60f884600001516005811115611b1957fe5b61212b82697374617475734461746560b01b836020015160001b612573565b61215182706e6f6e506572666f726d696e674461746560781b836040015160001b612573565b612172826b6d617475726974794461746560a01b836060015160001b612573565b612196826e7465726d696e6174696f6e4461746560881b836080015160001b612573565b6121bc82701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b8360a0015160001b612573565b6121e0826e1858d8dc9d5959125b9d195c995cdd608a1b8360c0015160001b612573565b6121ff82691999595058d8dc9d595960b21b8360e0015160001b612573565b61222882726e6f6d696e616c496e7465726573745261746560681b83610100015160001b612573565b612257827834b73a32b932b9ba29b1b0b634b733a6bab63a34b83634b2b960391b83610120015160001b612573565b61228682783737ba34b7b730b629b1b0b634b733a6bab63a34b83634b2b960391b83610140015160001b612573565b611ae6826000805160206131ec83398151915283610160015160001b612573565b6122af612770565b604080516101808101825274465f636f6e7472616374506572666f726d616e636560581b6000908152600f85016020529190912054819060f81c60058111156122f457fe5b60058111156122ff57fe5b81526b465f7374617475734461746560a01b6000908152600f850160208181526040808420548286015272465f6e6f6e506572666f726d696e674461746560681b845282825280842054818601526d465f6d617475726974794461746560901b845282825280842054606086015270465f7465726d696e6174696f6e4461746560781b8452828252808420546080860152721197db9bdd1a5bdb985b141c9a5b98da5c185b606a1b84528282528084205460a0860152701197d858d8dc9d5959125b9d195c995cdd607a1b84528282528084205460c08601526b1197d999595058d8dc9d595960a21b84528282528084205460e086015274465f6e6f6d696e616c496e7465726573745261746560581b8452828252808420546101008601527f465f696e7465726573745363616c696e674d756c7469706c69657200000000008452828252808420546101208601527f465f6e6f74696f6e616c5363616c696e674d756c7469706c69657200000000008452828252808420546101408601527f465f6e6578745072696e636970616c526564656d7074696f6e5061796d656e748452919052902054610160909101529050919050565b60006763757272656e637960c01b8214156124f057506763757272656e637960c01b6000908152600e8301602052604090205460601c6102d0565b71736574746c656d656e7443757272656e637960701b82141561037a575071736574746c656d656e7443757272656e637960701b6000908152600e8301602052604090205460601c6102d0565b6000828152600e8401602052604090205481141561255a5761256e565b6000828152600e8401602052604090208190555b505050565b6000828152600f840160205260409020548114156125905761256e565b6000918252600f929092016020526040902055565b6040805160608101909152600080825260208201905b8152600060209091015290565b604080516080810190915260008082526020820190815260200160006125bb565b604080516105a0810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000801916815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200161271d6125a5565b815260200161272a6125a5565b81526020016127376125c8565b81526020016127446125c8565b81526020016127516125c8565b815260200161275e6125c8565b815260200161276b6125c8565b905290565b604080516101808101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040805160808101825260008082526020820181905290918201908152602001600061276b565b80356001600160a01b038116811461123a57600080fd5b8035801515811461123a57600080fd5b80356009811061123a57600080fd5b803561123a816131d1565b803561123a816131de565b8035600d811061123a57600080fd5b80356014811061123a57600080fd5b8035600b811061123a57600080fd5b80356004811061123a57600080fd5b600060808284031215612892578081fd5b6040516080810181811067ffffffffffffffff821117156128af57fe5b6040528235815290508060208301356128c7816131de565b602082015260408301356128da816131d1565b60408201526128eb60608401612810565b60608201525092915050565b600060608284031215612908578081fd5b6040516060810181811067ffffffffffffffff8211171561292557fe5b60405282358152905080602083013561293d816131de565b602082015261294e60408401612810565b60408201525092915050565b60006020828403121561296b578081fd5b5035919050565b60008060408385031215612984578081fd5b50508035926020909101359150565b6000808284036101a08112156129a7578283fd5b8335925061018080601f19830112156129be578283fd5b6129c78161318c565b91506129d56020860161283a565b825260408501356020830152606085013560408301526080850135606083015260a0850135608083015260c085013560a083015260e085013560c08301526101008086013560e08401526101208087013582850152610140915081870135818501525061016080870135828501528287013581850152505050809150509250929050565b600080828403610820811215612a6d578283fd5b83359250610800601f1982011215612a83578182fd5b506105a0612a908161318c565b612a9c60208601612854565b8152612aaa6040860161282f565b6020820152612abb60608601612845565b6040820152612acc60808601612863565b6060820152612add60a08601612820565b6080820152612aee60c0860161282f565b60a0820152612aff60e08601612872565b60c0820152610100612b1281870161282f565b60e0830152610120612b258188016127f9565b828401526101409150612b398288016127f9565b8184015250610160808701358284015261018091508187013581840152506101a080870135828401526101c091508187013581840152506101e08087013582840152610200915081870135818401525061022080870135828401526102409150818701358184015250610260808701358284015261028091508187013581840152506102a080870135828401526102c091508187013581840152506102e08087013582840152610300915081870135818401525061032080870135828401526103409150818701358184015250610360808701358284015261038091508187013581840152506103a080870135828401526103c091508187013581840152506103e08087013582840152610400915081870135818401525061042080870135828401526104409150818701358184015250610460808701358284015261048091508187013581840152506104a080870135828401526104c091508187013581840152506104e0612cab888289016128f7565b828401526105409150612cc0888389016128f7565b90830152612cd087878501612881565b610500830152612ce4876106208801612881565b610520830152612cf8876106a08801612881565b90820152612d0a866107208701612881565b610560820152612d1e866107a08701612881565b61058082015280925050509250929050565b6001600160a01b03169052565b60098110612d4757fe5b9052565b612d47816131b0565b612d47816131bd565b600d8110612d4757fe5b60148110612d4757fe5b600b8110612d4757fe5b60048110612d4757fe5b805182526020810151612d97816131bd565b60208301526040810151612daa816131b0565b60408301526060908101511515910152565b805182526020810151612dce816131bd565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b90815260200190565b600061018082019050612e11828451612d54565b6020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525061016080840151818401525092915050565b600061080082019050612ea1828451612d67565b6020830151612eb36020840182612d4b565b506040830151612ec66040840182612d5d565b506060830151612ed96060840182612d71565b506080830151612eec6080840182612d3d565b5060a0830151612eff60a0840182612d4b565b5060c0830151612f1260c0840182612d7b565b5060e0830151612f2560e0840182612d4b565b5061010080840151612f3982850182612d30565b505061012080840151612f4e82850182612d30565b50506101408381015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151908301526102a080840151908301526102c080840151908301526102e08084015190830152610300808401519083015261032080840151908301526103408084015190830152610360808401519083015261038080840151908301526103a080840151908301526103c080840151908301526103e08084015190830152610400808401519083015261042080840151908301526104408084015190830152610460808401519083015261048080840151908301526104a080840151908301526104c08084015161309782850182612dbc565b50506104e08301516105206130ae81850183612dbc565b61050085015191506105806130c581860184612d85565b8186015192506130d9610600860184612d85565b61054086015192506130ef610680860184612d85565b6105608601519250613105610700860184612d85565b850151915061311a9050610780840182612d85565b5092915050565b815181526020808301519082015260408201516080820190613142816131c7565b60408301526060830151613155816131c7565b8060608401525092915050565b608081016102d08284612d85565b606081016102d08284612dbc565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156131a857fe5b604052919050565b600281106131ba57fe5b50565b600681106131ba57fe5b600581106131ba57fe5b600281106131ba57600080fd5b600681106131ba57600080fdfe6e6578745072696e636970616c526564656d7074696f6e5061796d656e7400006379636c654f665072696e636970616c526564656d7074696f6e000000000000a26469706673582212208412d995f8993db89dd339fea5e1d7e187758b5bb14939b0732ad6635113da7e64736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decodeAndGetANNState(Asset storage)": {
        "details": "Decode and load the ANNState of the asset"
      },
      "decodeAndGetANNTerms(Asset storage)": {
        "details": "Decode and loads ANNTerms"
      },
      "decodeAndGetFinalizedANNState(Asset storage)": {
        "details": "Decode and load the finalized ANNState of the asset"
      },
      "encodeAndSetANNState(Asset storage,ANNState)": {
        "details": "Tightly pack and store ANNState"
      },
      "encodeAndSetANNTerms(Asset storage,ANNTerms)": {
        "details": "Tightly pack and store only non-zero overwritten terms (LifecycleTerms)"
      },
      "encodeAndSetFinalizedANNState(Asset storage,ANNState)": {
        "details": "Tightly pack and store finalized ANNState"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "encodeAndSetANNTerms(Asset storage,ANNTerms)": {
        "notice": "All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}