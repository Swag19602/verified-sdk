{
  "address": "0xa654bBA1cf2BB9fe99F4157765175F05Ee946255",
  "abi": [],
  "transactionHash": "0xe481ccedb1bd288bf3d90c72a7893d9d51321b0c7240ebeb91cf4e75602d261d",
  "receipt": {
    "to": null,
    "from": "0xf6bb741F0C106a504943eaE908C3b67bcf4bF1CC",
    "contractAddress": "0xa654bBA1cf2BB9fe99F4157765175F05Ee946255",
    "transactionIndex": 5,
    "gasUsed": "2826635",
    "logsBloom": "0x
    "blockHash": "0xc606af0aa328610b081e5900ba93129c4dbbff3d005dab1d6dff62f93d56ef23",
    "transactionHash": "0xe481ccedb1bd288bf3d90c72a7893d9d51321b0c7240ebeb91cf4e75602d261d",
    "logs": [],
    "blockNumber": 7713002,
    "cumulativeGasUsed": "8403076",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "37e2a100a6f868553298dee57e286371",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decodeAndGetCERTFState(Asset storage)\":{\"details\":\"Decode and load the CERTFState of the asset\"},\"decodeAndGetCERTFTerms(Asset storage)\":{\"details\":\"Decode and loads CERTFTerms\"},\"decodeAndGetFinalizedCERTFState(Asset storage)\":{\"details\":\"Decode and load the finalized CERTFState of the asset\"},\"encodeAndSetCERTFState(Asset storage,CERTFState)\":{\"details\":\"Tightly pack and store CERTFState\"},\"encodeAndSetCERTFTerms(Asset storage,CERTFTerms)\":{\"details\":\"Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\"},\"encodeAndSetFinalizedCERTFState(Asset storage,CERTFState)\":{\"details\":\"Tightly pack and store finalized CERTFState\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"encodeAndSetCERTFTerms(Asset storage,CERTFTerms)\":{\"notice\":\"All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Core/CERTF/CERTFEncoder.sol\":\"CERTFEncoder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ACTUS/Core/ACTUSConstants.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @title ACTUSConstants\\n * @notice Contains all type definitions for ACTUS. See ACTUS-Dictionary for definitions\\n */\\ncontract ACTUSConstants {\\n\\n    // constants used throughout\\n    uint256 constant public PRECISION = 18;\\n    int256 constant public ONE_POINT_ZERO = 1 * 10 ** 18;\\n    uint256 constant public MAX_CYCLE_SIZE = 120;\\n    uint256 constant public MAX_EVENT_SCHEDULE_SIZE = 120;\\n}\\n\",\"keccak256\":\"0x1568471e72800002ad945bf084f96368f5dfb597105f2e3f11534905abda9495\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/ACTUSTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n/**\\n * Commit: https://github.com/atpar/actus-dictionary/commit/b85b9b378967de6bfc4d8b6687b520c48bce9890\\n * Date: 2020-10-06\\n */\\n\\n// IPS\\nenum P {D, W, M, Q, H, Y} // P=[D=Days, W=Weeks, M=Months, Q=Quarters, H=Halfyear, Y=Year]\\nenum S {LONG, SHORT} // S=[+=long stub,- short stub, {} if S empty then - for short stub]\\nstruct IPS {\\n    uint256 i; // I=Integer\\n    P p;\\n    S s;\\n    bool isSet;\\n}\\n\\nstruct IP {\\n    uint256 i;\\n    P p;\\n    bool isSet;\\n}\\n\\n// Number of enum options should be limited to 256 (8 bits) such that 255 enums can be packed fit into 256 bits (bytes32)\\nenum BusinessDayConvention {NOS, SCF, SCMF, CSF, CSMF, SCP, SCMP, CSP, CSMP}\\nenum Calendar {NC, MF}\\nenum ContractPerformance {PF, DL, DQ, DF, MD, TD}\\nenum ContractReferenceType {CNT, CID, MOC, EID, CST}\\nenum ContractReferenceRole {UDL, FIL, SEL, COVE, COVI}\\nenum ContractRole {RPA, RPL, RFL, PFL, RF, PF, BUY, SEL, COL, CNO, UDL, UDLP, UDLM}\\nenum ContractType {PAM, ANN, NAM, LAM, LAX, CLM, UMP, CSH, STK, COM, SWAPS, SWPPV, FXOUT, CAPFL, FUTUR, OPTNS, CEG, CEC, CERTF, COLLA}\\nenum CouponType {NOC, FIX, FCN, PRF}\\nenum CyclePointOfInterestPayment {B, E}\\nenum CyclePointOfRateReset {B, E}\\nenum DayCountConvention {AA, A360, A365, _30E360ISDA, _30E360, _28E336, ONE, OBYT, HRSAA, MINAA, SECAA}\\nenum EndOfMonthConvention {SD, EOM}\\n//               0   1    2    3    4   5   6   7   8   9  10    11  12   13   14   15   16   17   18   19   20   21   22   23   24   25  26  27    28   29  30  31  32  33\\nenum EventType {NE, CE, ISS, IED, PRD, FP, PR, PD, PY, PP, IP, IPCI, RRF, RR, DIF, DIX, DIP, COF, COP, REF, REX, REP, SPF, SPS, EXO, EXE, ST, SC, IPCB, PRF, MC, TD, MD, AD}\\nenum FeeBasis {A, N}\\n// enum GuaranteedExposure {NO, NI, MV} // not implemented\\n// enum InterestCalculationBase {NT, NTIED, NTL} // not implemented\\n// enum PenaltyType {O, A, N, I}\\n// enum PrepaymentEffect {N, A, M} // not implemented\\nenum RedeemableByIssuer {Y, N}\\nenum ScalingEffect {_000, I00, _0N0, IN0}\\n// enum Seniority {S, J} // not implemented\\n\\nstruct ContractReference {\\n    bytes32 object;\\n    bytes32 object2; // workaround for solc bug (replace object and object2 with single bytes attribute)\\n    ContractReferenceType _type;\\n    ContractReferenceRole role;\\n}\\n\\nstruct UnderlyingState {\\n    int256 exerciseAmount;\\n    bool isSet;\\n}\\n\\nstruct ANNState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n    int256 nextPrincipalRedemptionPayment;\\n}\\n\\nstruct CECState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n\\n    int256 feeAccrued;\\n    int256 exerciseAmount;\\n}\\n\\nstruct CEGState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    int256 feeAccrued;\\n    int256 exerciseAmount;\\n}\\n\\nstruct CERTFState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastCouponFixingDate;\\n\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n}\\n\\nstruct PAMState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n}\\n\\nstruct STKState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastDividendFixingDate;\\n    // uint256 dividendFixingDate; // not implemented\\n    // uint256 dividendExDate; // not implemented\\n    // uint256 dividendPaymentDate; // not implemented\\n    // uint256 splitSettlementDate; // not implemented\\n    // uint256 redemptionExDate; // not implemented\\n    // uint256 redemptionPaymentDate; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n    int256 dividendPaymentAmount;\\n    int256 splitRatio;\\n}\\n\\nstruct COLLAState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    int256 accruedInterest;\\n    int256 nominalInterestRate;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n}\\n\\nstruct ANNTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // InterestCalculationBase interestCalculationBase; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 ammortizationDate; // not implemented\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    // uint256 cycleAnchorDateOfInterestCalculationBase; // not implemented\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    uint256 cycleAnchorDateOfPrincipalRedemption;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 nextPrincipalRedemptionPayment;\\n    // int256 coverageOfCreditEnhancement;\\n    // int256 interestCalculationBaseAmount; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    IPS cycleOfPrincipalRedemption;\\n    // IPS cycleOfOptionality; // not implemented\\n    // IPS cycleOfInterestCalculationBase; // not implemented\\n}\\n\\nstruct CECTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ContractPerformance creditEventTypeCovered;\\n    FeeBasis feeBasis;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    // uint256 exerciseDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 feeRate;\\n    // int256 exerciseAmount; // state only\\n    int256 coverageOfCreditEnhancement;\\n\\n    // IP settlementPeriod; // not implemented\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CEGTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    ContractPerformance creditEventTypeCovered;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 exerciseDate; // state only\\n    // uint256 nonPerformingDate; // state only\\n\\n    int256 notionalPrincipal;\\n    // int256 delinquencyRate; not implemented\\n    int256 feeAccrued;\\n    int256 feeRate;\\n    int256 priceAtPurchaseDate;\\n    int256 coverageOfCreditEnhancement;\\n    // int256 exerciseAmount; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP settlementPeriod; // not implemented\\n\\n    IPS cycleOfFee;\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CERTFTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    CouponType couponType;\\n    // ContractPerformance contractPerformance; state only\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 issueDate;\\n    // uint256 lastCouponFixingDate; // state only\\n    uint256 cycleAnchorDateOfRedemption;\\n    uint256 cycleAnchorDateOfTermination;\\n    uint256 cycleAnchorDateOfCoupon;\\n\\n    int256 nominalPrice;\\n    int256 issuePrice;\\n    // int256 delinquencyRate; // not implemented\\n    int256 quantity;\\n    // int256 exerciseQuantity; // state only\\n    // int256 exerciseQuantityOrdered; // state only\\n    // int256 marginFactor;  // state only\\n    // int256 adjustmentFactor; // state only\\n    int256 denominationRatio;\\n    int256 couponRate;\\n    // int256 exerciseAmount; // state only\\n    // int256 couponAmountFixed; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    IP settlementPeriod;\\n    IP fixingPeriod;\\n    IP redemptionRecordPeriod;\\n\\n    IPS cycleOfRedemption;\\n    IPS cycleOfTermination;\\n    IPS cycleOfCoupon;\\n\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct PAMTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // CyclePointOfInterestPayment cyclePointOfInterestPayment; // not implemented\\n    // CyclePointOfRateReset cyclePointOfRateReset; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; // not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    // IPS cycleOfOptionality; // not implemented\\n}\\n\\nstruct STKTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    RedeemableByIssuer redeemableByIssuer;\\n    // Seniority seniority; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 issueDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfDividend;\\n\\n    int256 nominalPrice;\\n    int256 notionalPrincipal;\\n    int256 issuePrice;\\n    int256 quantity;\\n    int256 priceAtPurchaseDate;\\n    int256 redemptionPrice;\\n    int256 priceAtTerminationDate;\\n\\n    IP dividendRecordPeriod;\\n    IP dividendPaymentPeriod;\\n    IP splitSettlementPeriod;\\n    IP redemptionRecordPeriod;\\n    IP redemptionPaymentPeriod;\\n\\n    IPS cycleOfDividend;\\n}\\n\\nstruct COLLATerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    // ContractPerformance contractPerformance; // state only\\n\\n    bytes32 marketObjectCodeOfCollateral;\\n\\n    address currency;\\n    address settlementCurrency;\\n    address collateralCurrency;\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 premiumDiscountAtIED;\\n    int256 coverageOfCollateral;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n\\n    IPS cycleOfInterestPayment;\\n}\\n\",\"keccak256\":\"0x79bdd18aa3c6bdb9bb27e50b140bf43977ced292fdf89c2b2a237a0ec6c719fb\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/BaseRegistryStorage.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Conversions.sol\\\";\\nimport \\\"../SharedTypes.sol\\\";\\nimport \\\"./Schedule/ScheduleEncoder.sol\\\";\\n\\n\\nstruct Settlement {\\n    bool isSettled;\\n    int256 payoff;\\n}\\n\\nstruct Asset {\\n    // boolean indicating that asset exists / is registered\\n    bool isSet;\\n    // address of the ACTUS Engine used for computing the State and the Payoff of the asset\\n    address engine;\\n    // address of the Asset Actor which is allowed to update the State of the asset\\n    address actor;\\n    // address of the Extension which is able to generate unscheduled events for the asset\\n    address extension;\\n    // schedule of the asset\\n    Schedule schedule;\\n    // ownership of the asset\\n    AssetOwnership ownership;\\n    // method level access control - stores which address can a specific method\\n    // method signature => address => has access\\n    mapping (bytes4 => mapping (address => bool)) access;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedTerms;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedState;\\n    // indicates whether a specific event was settled\\n    mapping (bytes32 => Settlement) settlement;\\n}\\n\\n/**\\n * @title BaseRegistryStorage\\n * @notice Describes the storage of the AssetRegistry\\n * Contains getter and setter methods for encoding, decoding data to optimize gas cost.\\n * Circumvents storing default values by relying on the characteristic of mappings returning zero for not set values.\\n */\\nabstract contract BaseRegistryStorage {\\n\\n    using ScheduleEncoder for Asset;\\n\\n    // AssetId => Asset\\n    mapping (bytes32 => Asset) internal assets;\\n}\\n\",\"keccak256\":\"0x3e8beac681f832d8b6dcf0a1be328ae129c7d71e7ab75ebe2d0809edcc813b46\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Schedule/ScheduleEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary ScheduleEncoder {\\n\\n    function encodeAndSetSchedule(Asset storage asset, bytes32[] memory schedule) internal {\\n        for (uint256 i = 0; i < schedule.length; i++) {\\n            if (schedule[i] == bytes32(0)) break;\\n            asset.schedule.events[i] = schedule[i];\\n            asset.schedule.length = i + 1;\\n        }\\n    }\\n\\n    function decodeAndGetSchedule(Asset storage asset) internal view returns (bytes32[] memory) {\\n        bytes32[] memory schedule = new bytes32[](asset.schedule.length);\\n\\n        for (uint256 i = 0; i < asset.schedule.length; i++) {\\n            schedule[i] = asset.schedule.events[i];\\n        }\\n\\n        return schedule;\\n    }\\n}\\n\",\"keccak256\":\"0x420da04c67322d387c9b0fbeb00accc59a63fb9c10cb7b4c21f955792c4ad236\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/Conversions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SharedTypes.sol\\\";\\n\\n\\ncontract Conversions {\\n\\n    function encodeCollateralAsObject(address collateralToken, uint256 collateralAmount)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(collateralToken))) << 96 | bytes32(uint256(uint96(collateralAmount)));\\n    }\\n\\n    function decodeCollateralObject(bytes32 object)\\n        public\\n        pure\\n        returns (address, uint256)\\n    {\\n        return (\\n            address(uint160(uint256(object >> 96))),\\n            uint256(uint96(uint256(object)))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcc273a4272ffd03ef3f6fd329590a25049482661820ee4dcc953d28eeb4a9a95\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/SharedTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../ACTUS/Core/ACTUSTypes.sol\\\";\\nimport \\\"../../ACTUS/Core/ACTUSConstants.sol\\\";\\n\\n\\nstruct AssetOwnership {\\n    // account which has to fulfill all obligations for the creator side\\n    address creatorObligor;\\n    // account to which all cashflows to which the creator is the beneficiary are forwarded\\n    address creatorBeneficiary;\\n    // account which has to fulfill all obligations for the counterparty\\n    address counterpartyObligor;\\n    // account to which all cashflows to which the counterparty is the beneficiary are forwarded\\n    address counterpartyBeneficiary;\\n}\\n\\n// scheduleTime and EventType are tightly packed and encoded as bytes32\\nstruct Schedule {\\n    // schedule times of cyclic events (used if no schedule is set)\\n    mapping(EventType => uint256) lastScheduleTimeOfCyclicEvent;\\n    // index of event => bytes32 encoded event\\n    mapping(uint256 => bytes32) events;\\n    // the length of the schedule, used to determine the end of the schedule\\n    uint256 length;\\n    // pointer to index of the next event in the schedule\\n    uint256 nextScheduleIndex;\\n    // last event which could not be settled\\n    bytes32 pendingEvent;\\n    // last non-cyclic event which was processed (used if no schedule is set)\\n    bytes32 lastNonCyclicEvent;\\n}\\n\",\"keccak256\":\"0xadbb252a62b8641f01338ce1650d5d59ccc4a6f3f0e62c49e7b16bf51d2a46b8\",\"license\":\"Apache-2.0\"},\"contracts/Core/CERTF/CERTFEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Base/SharedTypes.sol\\\";\\nimport \\\"../Base/AssetRegistry/BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary CERTFEncoder {\\n\\n    function storeInPackedTerms(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedTerms[attributeKey] == value) return;\\n        asset.packedTerms[attributeKey] = value;\\n    }\\n\\n    function storeInPackedState(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedState[attributeKey] == value) return;\\n        asset.packedState[attributeKey] = value;\\n    }\\n    \\n    /**\\n     * @dev Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\\n     * @notice All non zero values of the overwrittenTerms object are stored.\\n     * It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\\n     */\\n    function encodeAndSetCERTFTerms(Asset storage asset, CERTFTerms memory terms) external {\\n        storeInPackedTerms(\\n            asset,\\n            \\\"enums\\\",\\n            bytes32(uint256(uint8(terms.contractType))) << 248 |\\n            bytes32(uint256(uint8(terms.calendar))) << 240 |\\n            bytes32(uint256(uint8(terms.contractRole))) << 232 |\\n            bytes32(uint256(uint8(terms.dayCountConvention))) << 224 |\\n            bytes32(uint256(uint8(terms.businessDayConvention))) << 216 |\\n            bytes32(uint256(uint8(terms.endOfMonthConvention))) << 208 |\\n            bytes32(uint256(uint8(terms.couponType))) << 200\\n        );\\n\\n        storeInPackedTerms(asset, \\\"currency\\\", bytes32(uint256(terms.currency) << 96));\\n        storeInPackedTerms(asset, \\\"settlementCurrency\\\", bytes32(uint256(terms.settlementCurrency) << 96));\\n\\n        storeInPackedTerms(asset, \\\"statusDate\\\", bytes32(terms.statusDate));\\n        storeInPackedTerms(asset, \\\"initialExchangeDate\\\", bytes32(terms.initialExchangeDate));\\n        storeInPackedTerms(asset, \\\"maturityDate\\\", bytes32(terms.maturityDate));\\n        storeInPackedTerms(asset, \\\"issueDate\\\", bytes32(terms.issueDate));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfRedemption\\\", bytes32(terms.cycleAnchorDateOfRedemption));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfTermination\\\", bytes32(terms.cycleAnchorDateOfTermination));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfCoupon\\\", bytes32(terms.cycleAnchorDateOfCoupon));\\n\\n        storeInPackedTerms(asset, \\\"nominalPrice\\\", bytes32(terms.nominalPrice));\\n        storeInPackedTerms(asset, \\\"issuePrice\\\", bytes32(terms.issuePrice));\\n        storeInPackedTerms(asset, \\\"quantity\\\", bytes32(terms.quantity));\\n        storeInPackedTerms(asset, \\\"denominationRatio\\\", bytes32(terms.denominationRatio));\\n        storeInPackedTerms(asset, \\\"couponRate\\\", bytes32(terms.couponRate));\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"gracePeriod\\\",\\n            bytes32(uint256(terms.gracePeriod.i)) << 24 |\\n            bytes32(uint256(terms.gracePeriod.p)) << 16 |\\n            bytes32(uint256((terms.gracePeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"delinquencyPeriod\\\",\\n            bytes32(uint256(terms.delinquencyPeriod.i)) << 24 |\\n            bytes32(uint256(terms.delinquencyPeriod.p)) << 16 |\\n            bytes32(uint256((terms.delinquencyPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"settlementPeriod\\\",\\n            bytes32(uint256(terms.settlementPeriod.i)) << 24 |\\n            bytes32(uint256(terms.settlementPeriod.p)) << 16 |\\n            bytes32(uint256((terms.settlementPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"fixingPeriod\\\",\\n            bytes32(uint256(terms.fixingPeriod.i)) << 24 |\\n            bytes32(uint256(terms.fixingPeriod.p)) << 16 |\\n            bytes32(uint256((terms.fixingPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"redemptionRecordPeriod\\\",\\n            bytes32(uint256(terms.redemptionRecordPeriod.i)) << 24 |\\n            bytes32(uint256(terms.redemptionRecordPeriod.p)) << 16 |\\n            bytes32(uint256((terms.redemptionRecordPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfRedemption\\\",\\n            bytes32(uint256(terms.cycleOfRedemption.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfRedemption.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfRedemption.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfRedemption.isSet) ? 1 : 0))\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfTermination\\\",\\n            bytes32(uint256(terms.cycleOfTermination.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfTermination.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfTermination.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfTermination.isSet) ? 1 : 0))\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfCoupon\\\",\\n            bytes32(uint256(terms.cycleOfCoupon.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfCoupon.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfCoupon.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfCoupon.isSet) ? 1 : 0))\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_1_object\\\",\\n            terms.contractReference_1.object\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_1_object2\\\",\\n            terms.contractReference_1.object2\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_1_type_role\\\",\\n            bytes32(uint256(terms.contractReference_1._type)) << 16 |\\n            bytes32(uint256(terms.contractReference_1.role)) << 8\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_2_object\\\",\\n            terms.contractReference_2.object\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_2_object2\\\",\\n            terms.contractReference_2.object2\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"contractReference_2_type_role\\\",\\n            bytes32(uint256(terms.contractReference_2._type)) << 16 |\\n            bytes32(uint256(terms.contractReference_2.role)) << 8\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and loads CERTFTerms\\n     */\\n    function decodeAndGetCERTFTerms(Asset storage asset) external view returns (CERTFTerms memory) {\\n        return CERTFTerms(\\n            ContractType(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248))),\\n            Calendar(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240))),\\n            ContractRole(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232))),\\n            DayCountConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224))),\\n            BusinessDayConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216))),\\n            EndOfMonthConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208))),\\n            CouponType(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200))),\\n\\n            address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96)),\\n            address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96)),\\n\\n            uint256(asset.packedTerms[\\\"statusDate\\\"]),\\n            uint256(asset.packedTerms[\\\"initialExchangeDate\\\"]),\\n            uint256(asset.packedTerms[\\\"maturityDate\\\"]),\\n            uint256(asset.packedTerms[\\\"issueDate\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfRedemption\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfTermination\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfCoupon\\\"]),\\n\\n            int256(asset.packedTerms[\\\"nominalPrice\\\"]),\\n            int256(asset.packedTerms[\\\"issuePrice\\\"]),\\n            int256(asset.packedTerms[\\\"quantity\\\"]),\\n            int256(asset.packedTerms[\\\"denominationRatio\\\"]),\\n            int256(asset.packedTerms[\\\"couponRate\\\"]),\\n\\n            IP(\\n                uint256(asset.packedTerms[\\\"gracePeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"gracePeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"gracePeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"settlementPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"settlementPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"settlementPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"fixingPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"fixingPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"fixingPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"redemptionRecordPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"redemptionRecordPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"redemptionRecordPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfRedemption\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfRedemption\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfRedemption\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfRedemption\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfTermination\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfTermination\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfTermination\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfTermination\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfCoupon\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfCoupon\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfCoupon\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfCoupon\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            ContractReference(\\n                asset.packedTerms[\\\"contractReference_1_object\\\"],\\n                asset.packedTerms[\\\"contractReference_1_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 8)))\\n            ),\\n            ContractReference(\\n                asset.packedTerms[\\\"contractReference_2_object\\\"],\\n                asset.packedTerms[\\\"contractReference_2_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 8)))\\n            )\\n        );\\n    }\\n\\n    function decodeAndGetEnumValueForCERTFTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractType\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"calendar\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240));\\n        } else if (attributeKey == bytes32(\\\"contractRole\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232));\\n        } else if (attributeKey == bytes32(\\\"dayCountConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224));\\n        } else if (attributeKey == bytes32(\\\"businessDayConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216));\\n        } else if (attributeKey == bytes32(\\\"endOfMonthConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208));\\n        } else if (attributeKey == bytes32(\\\"couponType\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetAddressValueForCERTFTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (address)\\n    {\\n        if (attributeKey == bytes32(\\\"currency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96));\\n        } else if (attributeKey == bytes32(\\\"settlementCurrency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96));\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    function decodeAndGetBytes32ValueForCERTFTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return asset.packedTerms[attributeKey];\\n    }\\n\\n    function decodeAndGetUIntValueForCERTFTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForCERTFTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetPeriodValueForCERTFTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IP memory)\\n    {\\n        if (\\n            attributeKey == bytes32(\\\"gracePeriod\\\")\\n            || attributeKey == bytes32(\\\"delinquencyPeriod\\\")\\n            || attributeKey == bytes32(\\\"settlementPeriod\\\")\\n            || attributeKey == bytes32(\\\"fixingPeriod\\\")\\n            || attributeKey == bytes32(\\\"redemptionRecordPeriod\\\")\\n        ) {\\n            return IP(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                (asset.packedTerms[attributeKey] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IP(0, P(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetCycleValueForCERTFTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IPS memory)\\n    {\\n        if (\\n            attributeKey == bytes32(\\\"cycleOfRedemption\\\")\\n            || attributeKey == bytes32(\\\"cycleOfTermination\\\")\\n            || attributeKey == bytes32(\\\"cycleOfCoupon\\\")\\n        ) {\\n            return IPS(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[attributeKey] >> 8))),\\n                (asset.packedTerms[attributeKey] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IPS(0, P(0), S(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetContractReferenceValueForCERTFTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (ContractReference memory)\\n    {\\n        if (attributeKey == bytes32(\\\"contractReference_1\\\")) {\\n            return ContractReference(\\n                asset.packedTerms[\\\"contractReference_1_object\\\"],\\n                asset.packedTerms[\\\"contractReference_1_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_1_type_role\\\"] >> 8)))\\n            );\\n        } else if (attributeKey == bytes32(\\\"contractReference_2\\\")) {\\n            return ContractReference(\\n                asset.packedTerms[\\\"contractReference_2_object\\\"],\\n                asset.packedTerms[\\\"contractReference_2_object2\\\"],\\n                ContractReferenceType(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 16))),\\n                ContractReferenceRole(uint8(uint256(asset.packedTerms[\\\"contractReference_2_type_role\\\"] >> 8)))\\n            );\\n        } else {\\n            return ContractReference(\\n                bytes32(0),\\n                bytes32(0),\\n                ContractReferenceType(0),\\n                ContractReferenceRole(0)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store CERTFState\\n     */\\n    function encodeAndSetCERTFState(Asset storage asset, CERTFState memory state) external {\\n        storeInPackedState(asset, \\\"contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"exerciseDate\\\", bytes32(state.exerciseDate));\\n        storeInPackedState(asset, \\\"terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"lastCouponFixingDate\\\", bytes32(state.lastCouponFixingDate));\\n        storeInPackedState(asset, \\\"exerciseAmount\\\", bytes32(state.exerciseAmount));\\n        storeInPackedState(asset, \\\"exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n        storeInPackedState(asset, \\\"quantity\\\", bytes32(state.quantity));\\n        storeInPackedState(asset, \\\"couponAmountFixed\\\", bytes32(state.couponAmountFixed));\\n        storeInPackedState(asset, \\\"marginFactor\\\", bytes32(state.marginFactor));\\n        storeInPackedState(asset, \\\"adjustmentFactor\\\", bytes32(state.adjustmentFactor));\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store finalized CERTFState\\n     */\\n    function encodeAndSetFinalizedCERTFState(Asset storage asset, CERTFState memory state) external {\\n        storeInPackedState(asset, \\\"F_contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"F_statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"F_nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"F_maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"F_exerciseDate\\\", bytes32(state.exerciseDate));\\n        storeInPackedState(asset, \\\"F_terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"F_lastCouponFixingDate\\\", bytes32(state.lastCouponFixingDate));\\n        storeInPackedState(asset, \\\"F_exerciseAmount\\\", bytes32(state.exerciseAmount));\\n        storeInPackedState(asset, \\\"F_exerciseQuantity\\\", bytes32(state.exerciseQuantity));\\n        storeInPackedState(asset, \\\"F_quantity\\\", bytes32(state.quantity));\\n        storeInPackedState(asset, \\\"F_couponAmountFixed\\\", bytes32(state.couponAmountFixed));\\n        storeInPackedState(asset, \\\"F_marginFactor\\\", bytes32(state.marginFactor));\\n        storeInPackedState(asset, \\\"F_adjustmentFactor\\\", bytes32(state.adjustmentFactor));\\n    }\\n\\n    /**\\n     * @dev Decode and load the CERTFState of the asset\\n     */\\n    function decodeAndGetCERTFState(Asset storage asset)\\n        external\\n        view\\n        returns (CERTFState memory)\\n    {\\n        return CERTFState(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"statusDate\\\"]),\\n            uint256(asset.packedState[\\\"nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"exerciseDate\\\"]),\\n            uint256(asset.packedState[\\\"terminationDate\\\"]),\\n            uint256(asset.packedState[\\\"lastCouponFixingDate\\\"]),\\n            int256(asset.packedState[\\\"exerciseAmount\\\"]),\\n            int256(asset.packedState[\\\"exerciseQuantity\\\"]),\\n            int256(asset.packedState[\\\"quantity\\\"]),\\n            int256(asset.packedState[\\\"couponAmountFixed\\\"]),\\n            int256(asset.packedState[\\\"marginFactor\\\"]),\\n            int256(asset.packedState[\\\"adjustmentFactor\\\"])\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and load the finalized CERTFState of the asset\\n     */\\n    function decodeAndGetFinalizedCERTFState(Asset storage asset)\\n        external\\n        view\\n        returns (CERTFState memory)\\n    {\\n        return CERTFState(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"F_statusDate\\\"]),\\n            uint256(asset.packedState[\\\"F_nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"F_maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"F_exerciseDate\\\"]),\\n            uint256(asset.packedState[\\\"F_terminationDate\\\"]),\\n            uint256(asset.packedState[\\\"F_lastCouponFixingDate\\\"]),\\n            int256(asset.packedState[\\\"F_exerciseAmount\\\"]),\\n            int256(asset.packedState[\\\"F_exerciseQuantity\\\"]),\\n            int256(asset.packedState[\\\"F_quantity\\\"]),\\n            int256(asset.packedState[\\\"F_couponAmountFixed\\\"]),\\n            int256(asset.packedState[\\\"F_marginFactor\\\"]),\\n            int256(asset.packedState[\\\"F_adjustmentFactor\\\"])\\n        );\\n    }\\n\\n    function decodeAndGetEnumValueForCERTFStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"F_contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetUIntValueForCERTFStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedState[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForCERTFStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedState[attributeKey]);\\n    }\\n}\\n\",\"keccak256\":\"0x9b1ebb21b9799102f9198fb6c810d4d82dc1e32fe11ecca335625db94e46eb4e\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x61322d610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c806376434e4f116100ac57806390e560161161007b57806390e560161461024b5780639c414c5914610205578063a23d3b9c1461025e578063c5a49ab81461027e578063dd1069cf1461029e57610115565b806376434e4f1461014357806378278211146102185780637a3e9d51146102055780638f0750571461022b57610115565b80635445aa9b116100e85780635445aa9b146101a35780635597657f146101c55780635c80e57f146101e55780636d0444031461020557610115565b80631ff1c6971461011a5780632313c3bd146101435780633e02ae381461016357806352632d3a14610183575b600080fd5b61012d610128366004612a1f565b6102be565b60405161013a9190612e69565b60405180910390f35b610156610151366004612a37565b6104c7565b60405161013a9190612e60565b610176610171366004612a1f565b6104df565b60405161013a9190612f05565b610196610191366004612a37565b6110c5565b60405161013a9190613121565b8180156101af57600080fd5b506101c36101be366004612b2b565b61120d565b005b6101d86101d3366004612a37565b6119c6565b60405161013a9190613113565b6101f86101f3366004612a37565b611c03565b60405161013a919061313d565b610156610213366004612a37565b611caf565b6101f8610226366004612a37565b611cc5565b61023e610239366004612a37565b611e6e565b60405161013a919061312f565b61012d610259366004612a1f565b611f94565b81801561026a57600080fd5b506101c3610279366004612a58565b612182565b61029161028c366004612a37565b61237d565b60405161013a9190612e4c565b8180156102aa57600080fd5b506101c36102b9366004612a58565b612405565b6102c6612644565b604080516101a08101825274465f636f6e7472616374506572666f726d616e636560581b6000908152600f85016020529190912054819060f81c600581111561030b57fe5b600581111561031657fe5b81526b465f7374617475734461746560a01b6000908152600f850160208181526040808420548286015272465f6e6f6e506572666f726d696e674461746560681b845282825280842054818601526d465f6d617475726974794461746560901b84528282528084205460608601526d465f65786572636973654461746560901b845282825280842054608086015270465f7465726d696e6174696f6e4461746560781b84528282528084205460a086015275465f6c617374436f75706f6e466978696e674461746560501b84528282528084205460c08601526f1197d95e195c98da5cd9505b5bdd5b9d60821b84528282528084205460e086015271465f65786572636973655175616e7469747960701b84528282528084205461010086015269465f7175616e7469747960b01b845282825280842054610120860152721197d8dbdd5c1bdb905b5bdd5b9d119a5e1959606a1b8452828252808420546101408601526d232fb6b0b933b4b72330b1ba37b960911b84528282528084205461016086015271232fb0b2353ab9ba36b2b73a2330b1ba37b960711b84529190529020546101809091015290505b919050565b6000818152600f830160205260409020545b92915050565b6104e76126ad565b604080516103e08101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c601381111561051c57fe5b601381111561052757fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561055f57fe5b600181111561056a57fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c8111156105a257fe5b600c8111156105ad57fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600a8111156105e557fe5b600a8111156105f057fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600881111561062857fe5b600881111561063357fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561066b57fe5b600181111561067657fe5b815260200160c884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660038111156106ae57fe5b60038111156106b957fe5b81526763757272656e637960c01b6000908152600e85016020818152604080842054606090811c8387015271736574746c656d656e7443757272656e637960701b855283835281852054811c82870152697374617475734461746560b01b8552838352818520548187015272696e697469616c45786368616e67654461746560681b85528383528185205460808701526b6d617475726974794461746560a01b85528383528185205460a08701526869737375654461746560b81b85528383528185205460c08701527f6379636c65416e63686f72446174654f66526564656d7074696f6e000000000085528383528185205460e08701527f6379636c65416e63686f72446174654f665465726d696e6174696f6e000000008552838352818520546101008701527631bcb1b632a0b731b437b92230ba32a7b321b7bab837b760491b8552838352818520546101208701526b6e6f6d696e616c507269636560a01b855283835281852054610140870152696973737565507269636560b01b855283835281852054610160870152677175616e7469747960c01b8552838352818520546101808701527064656e6f6d696e6174696f6e526174696f60781b8552838352818520546101a087015269636f75706f6e5261746560b01b8552838352818520546101c0870152815190810182526a19dc9858d954195c9a5bd960aa1b80865284845291852054601881901c8252919094529181526101e09093019282019060101c60ff1660058111156108ec57fe5b60058111156108f757fe5b81526a19dc9858d954195c9a5bd960aa1b6000908152600e8701602090815260409091205491019060081c600190811614610933576000610936565b60015b151590528152604080516060810182527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561099457fe5b600581111561099f57fe5b81527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000908152600e8701602090815260409091205491019060081c6001908116146109e15760006109e4565b60015b151590528152604080516060810182526f1cd95d1d1b195b595b9d14195c9a5bd960821b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610a4157fe5b6005811115610a4c57fe5b81526f1cd95d1d1b195b595b9d14195c9a5bd960821b6000908152600e8701602090815260409091205491019060081c600190811614610a8d576000610a90565b60015b151590528152604080516060810182526b199a5e1a5b99d4195c9a5bd960a21b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610ae957fe5b6005811115610af457fe5b81526b199a5e1a5b99d4195c9a5bd960a21b6000908152600e8701602090815260409091205491019060081c600190811614610b31576000610b34565b60015b15159052815260408051606081018252751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610b9757fe5b6005811115610ba257fe5b8152751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b6000908152600e8701602090815260409091205491019060081c600190811614610be9576000610bec565b60015b151590528152604080516080810182527031bcb1b632a7b32932b232b6b83a34b7b760791b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610c4a57fe5b6005811115610c5557fe5b8152602001600886600e0160007031bcb1b632a7b32932b232b6b83a34b7b760791b815260200190815260200160002054901c60001c60ff166001811115610c9957fe5b6001811115610ca457fe5b81527031bcb1b632a7b32932b232b6b83a34b7b760791b6000908152600e87016020908152604090912054910190600190811614610ce3576000610ce6565b60015b151590528152604080516080810182527131bcb1b632a7b32a32b936b4b730ba34b7b760711b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610d4557fe5b6005811115610d5057fe5b8152602001600886600e0160007131bcb1b632a7b32a32b936b4b730ba34b7b760711b815260200190815260200160002054901c60001c60ff166001811115610d9557fe5b6001811115610da057fe5b81527131bcb1b632a7b32a32b936b4b730ba34b7b760711b6000908152600e87016020908152604090912054910190600190811614610de0576000610de3565b60015b151590528152604080516080810182526c31bcb1b632a7b321b7bab837b760991b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610e3d57fe5b6005811115610e4857fe5b8152602001600886600e0160006c31bcb1b632a7b321b7bab837b760991b815260200190815260200160002054901c60001c60ff166001811115610e8857fe5b6001811115610e9357fe5b81526c31bcb1b632a7b321b7bab837b760991b6000908152600e87016020908152604090912054910190600190811614610ece576000610ed1565b60015b151590528152604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b6000908152600e870160208181528483205484527f636f6e74726163745265666572656e63655f315f6f626a656374320000000000835281815284832054818501526000805160206131b883398151915283529081529083902054930192909182019060101c60ff166004811115610f7357fe5b6004811115610f7e57fe5b8152602001600886600e0160006000805160206131b8833981519152815260200190815260200160002054901c60001c60ff166004811115610fbc57fe5b6004811115610fc757fe5b90528152604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b6000908152600e870160208181528483205484527f636f6e74726163745265666572656e63655f325f6f626a656374320000000000835281815284832054818501526000805160206131d883398151915283529081529083902054930192909182019060101c60ff16600481111561106757fe5b600481111561107257fe5b8152602001600886600e0160006000805160206131d8833981519152815260200190815260200160002054901c60001c60ff1660048111156110b057fe5b60048111156110bb57fe5b9052905292915050565b6110cd6127e1565b7031bcb1b632a7b32932b232b6b83a34b7b760791b82148061110357507131bcb1b632a7b32a32b936b4b730ba34b7b760711b82145b8061111d57506c31bcb1b632a7b321b7bab837b760991b82145b156111df57604080516080810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561116157fe5b600581111561116c57fe5b8152602001600885600e01600086815260200190815260200160002054901c60001c60ff16600181111561119c57fe5b60018111156111a757fe5b81526000848152600e860160209081526040909120549101906001908116146111d15760006111d4565b60015b1515905290506104d9565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290506104d9565b6112d88264656e756d7360d81b60c88460c00151600381111561122c57fe5b60ff1660001b901b60d08560a00151600181111561124657fe5b60ff1660001b901b60d88660800151600881111561126057fe5b60ff1660001b901b60e08760600151600a81111561127a57fe5b60ff1660001b901b60e88860400151600c81111561129457fe5b60ff1660001b901b60f0896020015160018111156112ae57fe5b60ff1660001b901b60f88a6000015160138111156112c857fe5b60ff16901b1717171717176125dc565b611302826763757272656e637960c01b60608460e001516001600160a01b0316901b60001b6125dc565b6113378271736574746c656d656e7443757272656e637960701b60608461010001516001600160a01b0316901b60001b6125dc565b61135782697374617475734461746560b01b83610120015160001b6125dc565b6113808272696e697469616c45786368616e67654461746560681b83610140015160001b6125dc565b6113a2826b6d617475726974794461746560a01b83610160015160001b6125dc565b6113c1826869737375654461746560b81b83610180015160001b6125dc565b6113f4827f6379636c65416e63686f72446174654f66526564656d7074696f6e0000000000836101a0015160001b6125dc565b611427827f6379636c65416e63686f72446174654f665465726d696e6174696f6e00000000836101c0015160001b6125dc565b611454827631bcb1b632a0b731b437b92230ba32a7b321b7bab837b760491b836101e0015160001b6125dc565b611476826b6e6f6d696e616c507269636560a01b83610200015160001b6125dc565b61149682696973737565507269636560b01b83610220015160001b6125dc565b6114b482677175616e7469747960c01b83610240015160001b6125dc565b6114db827064656e6f6d696e6174696f6e526174696f60781b83610260015160001b6125dc565b6114fb8269636f75706f6e5261746560b01b83610280015160001b6125dc565b61155a826a19dc9858d954195c9a5bd960aa1b6008846102a0015160400151611525576000611528565b60015b60ff1660001b901b6010856102a0015160200151600581111561154757fe5b6102a08701515160181b911b17176125dc565b6115bf827019195b1a5b9c5d595b98de54195c9a5bd9607a1b6008846102c001516040015161158a57600061158d565b60015b60ff1660001b901b6010856102c001516020015160058111156115ac57fe5b6102c08701515160181b911b17176125dc565b611623826f1cd95d1d1b195b595b9d14195c9a5bd960821b6008846102e00151604001516115ee5760006115f1565b60015b60ff1660001b901b6010856102e0015160200151600581111561161057fe5b6102e08701515160181b911b17176125dc565b611683826b199a5e1a5b99d4195c9a5bd960a21b60088461030001516040015161164e576000611651565b60015b60ff1660001b901b601085610300015160200151600581111561167057fe5b6103008701515160181b911b17176125dc565b6116ed82751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b6008846103200151604001516116b85760006116bb565b60015b60ff1660001b901b60108561032001516020015160058111156116da57fe5b6103208701515160181b911b17176125dc565b61176b827031bcb1b632a7b32932b232b6b83a34b7b760791b8361034001516060015161171b57600061171e565b60015b60ff1660001b600885610340015160400151600181111561173b57fe5b60001b901b601086610340015160200151600581111561175757fe5b6103408801515160181b911b1717176125dc565b6117ea827131bcb1b632a7b32a32b936b4b730ba34b7b760711b8361036001516060015161179a57600061179d565b60015b60ff1660001b60088561036001516040015160018111156117ba57fe5b60001b901b60108661036001516020015160058111156117d657fe5b6103608801515160181b911b1717176125dc565b611864826c31bcb1b632a7b321b7bab837b760991b83610380015160600151611814576000611817565b60015b60ff1660001b600885610380015160400151600181111561183457fe5b60001b901b601086610380015160200151600581111561185057fe5b6103808801515160181b911b1717176125dc565b611895827918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b836103a00151600001516125dc565b6118c9827f636f6e74726163745265666572656e63655f315f6f626a656374320000000000836103a00151602001516125dc565b611917826000805160206131b88339815191526008846103a001516060015160048111156118f357fe5b60001b901b6010856103a0015160400151600481111561190f57fe5b901b176125dc565b611948827918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b836103c00151600001516125dc565b61197c827f636f6e74726163745265666572656e63655f325f6f626a656374320000000000836103c00151602001516125dc565b6119c2826000805160206131d88339815191526008846103c001516060015160048111156119a657fe5b60001b901b6010856103c0015160400151600481111561190f57fe5b5050565b6119ce61280b565b72636f6e74726163745265666572656e63655f3160681b821415611adf57604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b6000908152600e860160208181528483205484527f636f6e74726163745265666572656e63655f315f6f626a656374320000000000835281815284832054818501526000805160206131b883398151915283525282902054909182019060101c60ff166004811115611a8257fe5b6004811115611a8d57fe5b8152602001600885600e0160006000805160206131b8833981519152815260200190815260200160002054901c60001c60ff166004811115611acb57fe5b6004811115611ad657fe5b905290506104d9565b7231b7b73a3930b1ba2932b332b932b731b2af9960691b821415611bdc57604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b6000908152600e860160208181528483205484527f636f6e74726163745265666572656e63655f325f6f626a656374320000000000835281815284832054818501526000805160206131d883398151915283525282902054909182019060101c60ff166004811115611b9357fe5b6004811115611b9e57fe5b8152602001600885600e0160006000805160206131d8833981519152815260200190815260200160002054901c60001c60ff166004811115611acb57fe5b60408051608081018252600080825260208201819052909182019081526020016000611acb565b600072636f6e7472616374506572666f726d616e636560681b821415611c54575072636f6e7472616374506572666f726d616e636560681b6000908152600f8301602052604090205460f81c6104d9565b74465f636f6e7472616374506572666f726d616e636560581b821415611ca7575074465f636f6e7472616374506572666f726d616e636560581b6000908152600f8301602052604090205460f81c6104d9565b5060006104d9565b6000908152600e91909101602052604090205490565b60006b636f6e74726163745479706560a01b821415611d01575064656e756d7360d81b6000908152600e8301602052604090205460f81c6104d9565b6731b0b632b73230b960c11b821415611d37575064656e756d7360d81b6000908152600e8301602052604090205460f01c6104d9565b6b636f6e7472616374526f6c6560a01b821415611d71575064656e756d7360d81b6000908152600e8301602052604090205460e81c6104d9565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b821415611db1575064656e756d7360d81b6000908152600e8301602052604090205460e01c6104d9565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b821415611df4575064656e756d7360d81b6000908152600e8301602052604090205460d81c6104d9565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b821415611e36575064656e756d7360d81b6000908152600e8301602052604090205460d01c6104d9565b69636f75706f6e5479706560b01b821415611ca7575064656e756d7360d81b6000908152600e8301602052604090205460c81c6104d9565b611e76612832565b6a19dc9858d954195c9a5bd960aa1b821480611ea557507019195b1a5b9c5d595b98de54195c9a5bd9607a1b82145b80611ec257506f1cd95d1d1b195b595b9d14195c9a5bd960821b82145b80611edb57506b199a5e1a5b99d4195c9a5bd960a21b82145b80611efe5750751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b82145b15611f7a57604080516060810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff166005811115611f4257fe5b6005811115611f4d57fe5b81526000848152600e8601602090815260409091205491019060081c6001908116146111d15760006111d4565b6040805160608101909152600080825260208201906111fc565b611f9c612644565b604080516101a08101825272636f6e7472616374506572666f726d616e636560681b6000908152600f85016020529190912054819060f81c6005811115611fdf57fe5b6005811115611fea57fe5b8152697374617475734461746560b01b6000908152600f8501602081815260408084205482860152706e6f6e506572666f726d696e674461746560781b845282825280842054818601526b6d617475726974794461746560a01b84528282528084205460608601526b65786572636973654461746560a01b84528282528084205460808601526e7465726d696e6174696f6e4461746560881b84528282528084205460a0860152736c617374436f75706f6e466978696e674461746560601b84528282528084205460c08601526d195e195c98da5cd9505b5bdd5b9d60921b84528282528084205460e08601526f65786572636973655175616e7469747960801b845282825280842054610100860152677175616e7469747960c01b8452828252808420546101208601527018dbdd5c1bdb905b5bdd5b9d119a5e1959607a1b8452828252808420546101408601526b36b0b933b4b72330b1ba37b960a11b8452828252808420546101608601526f30b2353ab9ba36b2b73a2330b1ba37b960811b8452919052902054610180909101529050919050565b6121bb8274465f636f6e7472616374506572666f726d616e636560581b60f8846000015160058111156121b157fe5b60ff16901b612612565b6121dc826b465f7374617475734461746560a01b836020015160001b612612565b6122048272465f6e6f6e506572666f726d696e674461746560681b836040015160001b612612565b612227826d465f6d617475726974794461746560901b836060015160001b612612565b61224a826d465f65786572636973654461746560901b836080015160001b612612565b6122708270465f7465726d696e6174696f6e4461746560781b8360a0015160001b612612565b61229b8275465f6c617374436f75706f6e466978696e674461746560501b8360c0015160001b612612565b6122c0826f1197d95e195c98da5cd9505b5bdd5b9d60821b8360e0015160001b612612565b6122e88271465f65786572636973655175616e7469747960701b83610100015160001b612612565b6123088269465f7175616e7469747960b01b83610120015160001b612612565b61233182721197d8dbdd5c1bdb905b5bdd5b9d119a5e1959606a1b83610140015160001b612612565b612355826d232fb6b0b933b4b72330b1ba37b960911b83610160015160001b612612565b6119c28271232fb0b2353ab9ba36b2b73a2330b1ba37b960711b83610180015160001b612612565b60006763757272656e637960c01b8214156123b857506763757272656e637960c01b6000908152600e8301602052604090205460601c6104d9565b71736574746c656d656e7443757272656e637960701b821415611ca7575071736574746c656d656e7443757272656e637960701b6000908152600e8301602052604090205460601c6104d9565b6124328272636f6e7472616374506572666f726d616e636560681b60f8846000015160058111156121b157fe5b61245182697374617475734461746560b01b836020015160001b612612565b61247782706e6f6e506572666f726d696e674461746560781b836040015160001b612612565b612498826b6d617475726974794461746560a01b836060015160001b612612565b6124b9826b65786572636973654461746560a01b836080015160001b612612565b6124dd826e7465726d696e6174696f6e4461746560881b8360a0015160001b612612565b61250682736c617374436f75706f6e466978696e674461746560601b8360c0015160001b612612565b612529826d195e195c98da5cd9505b5bdd5b9d60921b8360e0015160001b612612565b61254f826f65786572636973655175616e7469747960801b83610100015160001b612612565b61256d82677175616e7469747960c01b83610120015160001b612612565b612594827018dbdd5c1bdb905b5bdd5b9d119a5e1959607a1b83610140015160001b612612565b6125b6826b36b0b933b4b72330b1ba37b960a11b83610160015160001b612612565b6119c2826f30b2353ab9ba36b2b73a2330b1ba37b960811b83610180015160001b612612565b6000828152600e840160205260409020548114156125f95761260d565b6000828152600e8401602052604090208190555b505050565b6000828152600f8401602052604090205481141561262f5761260d565b6000918252600f929092016020526040902055565b604080516101a0810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516103e08101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001612767612832565b8152602001612774612832565b8152602001612781612832565b815260200161278e612832565b815260200161279b612832565b81526020016127a86127e1565b81526020016127b56127e1565b81526020016127c26127e1565b81526020016127cf61280b565b81526020016127dc61280b565b905290565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290565b604080516080810182526000808252602082018190529091820190815260200160006127dc565b6040805160608101909152600080825260208201906127fe565b80356001600160a01b03811681146104c257600080fd5b803580151581146104c257600080fd5b8035600981106104c257600080fd5b80356104c281613190565b80356104c28161319d565b8035600d81106104c257600080fd5b8035601481106104c257600080fd5b8035600481106104c257600080fd5b8035600b81106104c257600080fd5b6000608082840312156128e5578081fd5b6040516080810181811067ffffffffffffffff8211171561290257fe5b806040525080915082358152602083013560208201526040830135612926816131aa565b60408201526060830135612939816131aa565b6060919091015292915050565b600060808284031215612957578081fd5b6040516080810181811067ffffffffffffffff8211171561297457fe5b60405282358152905080602083013561298c8161319d565b6020820152604083013561299f81613190565b60408201526129b060608401612863565b60608201525092915050565b6000606082840312156129cd578081fd5b6040516060810181811067ffffffffffffffff821117156129ea57fe5b604052823581529050806020830135612a028161319d565b6020820152612a1360408401612863565b60408201525092915050565b600060208284031215612a30578081fd5b5035919050565b60008060408385031215612a49578081fd5b50508035926020909101359150565b6000808284036101c0811215612a6c578283fd5b833592506101a080601f1983011215612a83578283fd5b612a8c8161314b565b9150612a9a6020860161288d565b825260408501356020830152606085013560408301526080850135606083015260a0850135608083015260c085013560a083015260e085013560c08301526101008086013560e0840152610120808701358285015261014091508187013581850152506101608087013582850152610180915081870135818501525081860135818401525050809150509250929050565b600080828403610720811215612b3f578283fd5b83359250610700601f1982011215612b55578182fd5b506103e0612b628161314b565b612b6e602086016128a7565b8152612b7c60408601612882565b6020820152612b8d60608601612898565b6040820152612b9e608086016128c5565b6060820152612baf60a08601612873565b6080820152612bc060c08601612882565b60a0820152612bd160e086016128b6565b60c0820152610100612be481870161284c565b60e0830152610120612bf781880161284c565b828401526101409150818701358184015250610160808701358284015261018091508187013581840152506101a080870135828401526101c091508187013581840152506101e08087013582840152610200915081870135818401525061022080870135828401526102409150818701358184015250610260808701358284015261028091508187013581840152506102a080870135828401526102c09150612ca2888389016129bc565b90830152610320612cb5888883016129bc565b828401526103809150612cca888389016129bc565b6102e0840152612cdc888589016129bc565b610300840152612cf08861044089016129bc565b90830152612d02876104a08801612946565b610340830152612d16876105208801612946565b610360830152612d2a876105a08801612946565b90820152612d3c8661062087016128d4565b6103a0820152612d50866106a087016128d4565b6103c082015280925050509250929050565b6001600160a01b03169052565b60098110612d7957fe5b9052565b612d798161316f565b612d798161317c565b600d8110612d7957fe5b60148110612d7957fe5b60048110612d7957fe5b600b8110612d7957fe5b80518252602081015160208301526040810151612dd381613186565b60408301526060810151612de681613186565b806060840152505050565b805182526020810151612e038161317c565b60208301526040810151612e168161316f565b60408301526060908101511515910152565b805182526020810151612e3a8161317c565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b90815260200190565b60006101a082019050612e7d828451612d86565b6020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525061016080840151818401525061018080840151818401525092915050565b600061070082019050612f19828451612d99565b6020830151612f2b6020840182612d7d565b506040830151612f3e6040840182612d8f565b506060830151612f516060840182612dad565b506080830151612f646080840182612d6f565b5060a0830151612f7760a0840182612d7d565b5060c0830151612f8a60c0840182612da3565b5060e0830151612f9d60e0840182612d62565b5061010080840151612fb182850182612d62565b505061012083810151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151908301526102a08084015161304a82850182612e28565b50506102c083015161030061306181850183612e28565b6102e0850151915061036061307881860184612e28565b9085015191506103c09061308e85830184612e28565b61032086015192506130a4610420860184612e28565b61034086015192506130ba610480860184612df1565b85015191506130cd610500850183612df1565b61038085015191506130e3610580850183612df1565b6103a085015191506130f9610600850183612db7565b840151905061310c610680840182612db7565b5092915050565b608081016104d98284612db7565b608081016104d98284612df1565b606081016104d98284612e28565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561316757fe5b604052919050565b6002811061317957fe5b50565b6006811061317957fe5b6005811061317957fe5b6002811061317957600080fd5b6006811061317957600080fd5b6005811061317957600080fdfe636f6e74726163745265666572656e63655f315f747970655f726f6c65000000636f6e74726163745265666572656e63655f325f747970655f726f6c65000000a264697066735822122070e8c857763ccad7c71bb7ebdc37ff46ff11eea30aa943308b5537b58b2b72af64736f6c63430007040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c806376434e4f116100ac57806390e560161161007b57806390e560161461024b5780639c414c5914610205578063a23d3b9c1461025e578063c5a49ab81461027e578063dd1069cf1461029e57610115565b806376434e4f1461014357806378278211146102185780637a3e9d51146102055780638f0750571461022b57610115565b80635445aa9b116100e85780635445aa9b146101a35780635597657f146101c55780635c80e57f146101e55780636d0444031461020557610115565b80631ff1c6971461011a5780632313c3bd146101435780633e02ae381461016357806352632d3a14610183575b600080fd5b61012d610128366004612a1f565b6102be565b60405161013a9190612e69565b60405180910390f35b610156610151366004612a37565b6104c7565b60405161013a9190612e60565b610176610171366004612a1f565b6104df565b60405161013a9190612f05565b610196610191366004612a37565b6110c5565b60405161013a9190613121565b8180156101af57600080fd5b506101c36101be366004612b2b565b61120d565b005b6101d86101d3366004612a37565b6119c6565b60405161013a9190613113565b6101f86101f3366004612a37565b611c03565b60405161013a919061313d565b610156610213366004612a37565b611caf565b6101f8610226366004612a37565b611cc5565b61023e610239366004612a37565b611e6e565b60405161013a919061312f565b61012d610259366004612a1f565b611f94565b81801561026a57600080fd5b506101c3610279366004612a58565b612182565b61029161028c366004612a37565b61237d565b60405161013a9190612e4c565b8180156102aa57600080fd5b506101c36102b9366004612a58565b612405565b6102c6612644565b604080516101a08101825274465f636f6e7472616374506572666f726d616e636560581b6000908152600f85016020529190912054819060f81c600581111561030b57fe5b600581111561031657fe5b81526b465f7374617475734461746560a01b6000908152600f850160208181526040808420548286015272465f6e6f6e506572666f726d696e674461746560681b845282825280842054818601526d465f6d617475726974794461746560901b84528282528084205460608601526d465f65786572636973654461746560901b845282825280842054608086015270465f7465726d696e6174696f6e4461746560781b84528282528084205460a086015275465f6c617374436f75706f6e466978696e674461746560501b84528282528084205460c08601526f1197d95e195c98da5cd9505b5bdd5b9d60821b84528282528084205460e086015271465f65786572636973655175616e7469747960701b84528282528084205461010086015269465f7175616e7469747960b01b845282825280842054610120860152721197d8dbdd5c1bdb905b5bdd5b9d119a5e1959606a1b8452828252808420546101408601526d232fb6b0b933b4b72330b1ba37b960911b84528282528084205461016086015271232fb0b2353ab9ba36b2b73a2330b1ba37b960711b84529190529020546101809091015290505b919050565b6000818152600f830160205260409020545b92915050565b6104e76126ad565b604080516103e08101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c601381111561051c57fe5b601381111561052757fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561055f57fe5b600181111561056a57fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c8111156105a257fe5b600c8111156105ad57fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600a8111156105e557fe5b600a8111156105f057fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600881111561062857fe5b600881111561063357fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561066b57fe5b600181111561067657fe5b815260200160c884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660038111156106ae57fe5b60038111156106b957fe5b81526763757272656e637960c01b6000908152600e85016020818152604080842054606090811c8387015271736574746c656d656e7443757272656e637960701b855283835281852054811c82870152697374617475734461746560b01b8552838352818520548187015272696e697469616c45786368616e67654461746560681b85528383528185205460808701526b6d617475726974794461746560a01b85528383528185205460a08701526869737375654461746560b81b85528383528185205460c08701527f6379636c65416e63686f72446174654f66526564656d7074696f6e000000000085528383528185205460e08701527f6379636c65416e63686f72446174654f665465726d696e6174696f6e000000008552838352818520546101008701527631bcb1b632a0b731b437b92230ba32a7b321b7bab837b760491b8552838352818520546101208701526b6e6f6d696e616c507269636560a01b855283835281852054610140870152696973737565507269636560b01b855283835281852054610160870152677175616e7469747960c01b8552838352818520546101808701527064656e6f6d696e6174696f6e526174696f60781b8552838352818520546101a087015269636f75706f6e5261746560b01b8552838352818520546101c0870152815190810182526a19dc9858d954195c9a5bd960aa1b80865284845291852054601881901c8252919094529181526101e09093019282019060101c60ff1660058111156108ec57fe5b60058111156108f757fe5b81526a19dc9858d954195c9a5bd960aa1b6000908152600e8701602090815260409091205491019060081c600190811614610933576000610936565b60015b151590528152604080516060810182527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561099457fe5b600581111561099f57fe5b81527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000908152600e8701602090815260409091205491019060081c6001908116146109e15760006109e4565b60015b151590528152604080516060810182526f1cd95d1d1b195b595b9d14195c9a5bd960821b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610a4157fe5b6005811115610a4c57fe5b81526f1cd95d1d1b195b595b9d14195c9a5bd960821b6000908152600e8701602090815260409091205491019060081c600190811614610a8d576000610a90565b60015b151590528152604080516060810182526b199a5e1a5b99d4195c9a5bd960a21b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610ae957fe5b6005811115610af457fe5b81526b199a5e1a5b99d4195c9a5bd960a21b6000908152600e8701602090815260409091205491019060081c600190811614610b31576000610b34565b60015b15159052815260408051606081018252751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610b9757fe5b6005811115610ba257fe5b8152751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b6000908152600e8701602090815260409091205491019060081c600190811614610be9576000610bec565b60015b151590528152604080516080810182527031bcb1b632a7b32932b232b6b83a34b7b760791b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610c4a57fe5b6005811115610c5557fe5b8152602001600886600e0160007031bcb1b632a7b32932b232b6b83a34b7b760791b815260200190815260200160002054901c60001c60ff166001811115610c9957fe5b6001811115610ca457fe5b81527031bcb1b632a7b32932b232b6b83a34b7b760791b6000908152600e87016020908152604090912054910190600190811614610ce3576000610ce6565b60015b151590528152604080516080810182527131bcb1b632a7b32a32b936b4b730ba34b7b760711b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610d4557fe5b6005811115610d5057fe5b8152602001600886600e0160007131bcb1b632a7b32a32b936b4b730ba34b7b760711b815260200190815260200160002054901c60001c60ff166001811115610d9557fe5b6001811115610da057fe5b81527131bcb1b632a7b32a32b936b4b730ba34b7b760711b6000908152600e87016020908152604090912054910190600190811614610de0576000610de3565b60015b151590528152604080516080810182526c31bcb1b632a7b321b7bab837b760991b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115610e3d57fe5b6005811115610e4857fe5b8152602001600886600e0160006c31bcb1b632a7b321b7bab837b760991b815260200190815260200160002054901c60001c60ff166001811115610e8857fe5b6001811115610e9357fe5b81526c31bcb1b632a7b321b7bab837b760991b6000908152600e87016020908152604090912054910190600190811614610ece576000610ed1565b60015b151590528152604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b6000908152600e870160208181528483205484527f636f6e74726163745265666572656e63655f315f6f626a656374320000000000835281815284832054818501526000805160206131b883398151915283529081529083902054930192909182019060101c60ff166004811115610f7357fe5b6004811115610f7e57fe5b8152602001600886600e0160006000805160206131b8833981519152815260200190815260200160002054901c60001c60ff166004811115610fbc57fe5b6004811115610fc757fe5b90528152604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b6000908152600e870160208181528483205484527f636f6e74726163745265666572656e63655f325f6f626a656374320000000000835281815284832054818501526000805160206131d883398151915283529081529083902054930192909182019060101c60ff16600481111561106757fe5b600481111561107257fe5b8152602001600886600e0160006000805160206131d8833981519152815260200190815260200160002054901c60001c60ff1660048111156110b057fe5b60048111156110bb57fe5b9052905292915050565b6110cd6127e1565b7031bcb1b632a7b32932b232b6b83a34b7b760791b82148061110357507131bcb1b632a7b32a32b936b4b730ba34b7b760711b82145b8061111d57506c31bcb1b632a7b321b7bab837b760991b82145b156111df57604080516080810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561116157fe5b600581111561116c57fe5b8152602001600885600e01600086815260200190815260200160002054901c60001c60ff16600181111561119c57fe5b60018111156111a757fe5b81526000848152600e860160209081526040909120549101906001908116146111d15760006111d4565b60015b1515905290506104d9565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290506104d9565b6112d88264656e756d7360d81b60c88460c00151600381111561122c57fe5b60ff1660001b901b60d08560a00151600181111561124657fe5b60ff1660001b901b60d88660800151600881111561126057fe5b60ff1660001b901b60e08760600151600a81111561127a57fe5b60ff1660001b901b60e88860400151600c81111561129457fe5b60ff1660001b901b60f0896020015160018111156112ae57fe5b60ff1660001b901b60f88a6000015160138111156112c857fe5b60ff16901b1717171717176125dc565b611302826763757272656e637960c01b60608460e001516001600160a01b0316901b60001b6125dc565b6113378271736574746c656d656e7443757272656e637960701b60608461010001516001600160a01b0316901b60001b6125dc565b61135782697374617475734461746560b01b83610120015160001b6125dc565b6113808272696e697469616c45786368616e67654461746560681b83610140015160001b6125dc565b6113a2826b6d617475726974794461746560a01b83610160015160001b6125dc565b6113c1826869737375654461746560b81b83610180015160001b6125dc565b6113f4827f6379636c65416e63686f72446174654f66526564656d7074696f6e0000000000836101a0015160001b6125dc565b611427827f6379636c65416e63686f72446174654f665465726d696e6174696f6e00000000836101c0015160001b6125dc565b611454827631bcb1b632a0b731b437b92230ba32a7b321b7bab837b760491b836101e0015160001b6125dc565b611476826b6e6f6d696e616c507269636560a01b83610200015160001b6125dc565b61149682696973737565507269636560b01b83610220015160001b6125dc565b6114b482677175616e7469747960c01b83610240015160001b6125dc565b6114db827064656e6f6d696e6174696f6e526174696f60781b83610260015160001b6125dc565b6114fb8269636f75706f6e5261746560b01b83610280015160001b6125dc565b61155a826a19dc9858d954195c9a5bd960aa1b6008846102a0015160400151611525576000611528565b60015b60ff1660001b901b6010856102a0015160200151600581111561154757fe5b6102a08701515160181b911b17176125dc565b6115bf827019195b1a5b9c5d595b98de54195c9a5bd9607a1b6008846102c001516040015161158a57600061158d565b60015b60ff1660001b901b6010856102c001516020015160058111156115ac57fe5b6102c08701515160181b911b17176125dc565b611623826f1cd95d1d1b195b595b9d14195c9a5bd960821b6008846102e00151604001516115ee5760006115f1565b60015b60ff1660001b901b6010856102e0015160200151600581111561161057fe5b6102e08701515160181b911b17176125dc565b611683826b199a5e1a5b99d4195c9a5bd960a21b60088461030001516040015161164e576000611651565b60015b60ff1660001b901b601085610300015160200151600581111561167057fe5b6103008701515160181b911b17176125dc565b6116ed82751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b6008846103200151604001516116b85760006116bb565b60015b60ff1660001b901b60108561032001516020015160058111156116da57fe5b6103208701515160181b911b17176125dc565b61176b827031bcb1b632a7b32932b232b6b83a34b7b760791b8361034001516060015161171b57600061171e565b60015b60ff1660001b600885610340015160400151600181111561173b57fe5b60001b901b601086610340015160200151600581111561175757fe5b6103408801515160181b911b1717176125dc565b6117ea827131bcb1b632a7b32a32b936b4b730ba34b7b760711b8361036001516060015161179a57600061179d565b60015b60ff1660001b60088561036001516040015160018111156117ba57fe5b60001b901b60108661036001516020015160058111156117d657fe5b6103608801515160181b911b1717176125dc565b611864826c31bcb1b632a7b321b7bab837b760991b83610380015160600151611814576000611817565b60015b60ff1660001b600885610380015160400151600181111561183457fe5b60001b901b601086610380015160200151600581111561185057fe5b6103808801515160181b911b1717176125dc565b611895827918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b836103a00151600001516125dc565b6118c9827f636f6e74726163745265666572656e63655f315f6f626a656374320000000000836103a00151602001516125dc565b611917826000805160206131b88339815191526008846103a001516060015160048111156118f357fe5b60001b901b6010856103a0015160400151600481111561190f57fe5b901b176125dc565b611948827918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b836103c00151600001516125dc565b61197c827f636f6e74726163745265666572656e63655f325f6f626a656374320000000000836103c00151602001516125dc565b6119c2826000805160206131d88339815191526008846103c001516060015160048111156119a657fe5b60001b901b6010856103c0015160400151600481111561190f57fe5b5050565b6119ce61280b565b72636f6e74726163745265666572656e63655f3160681b821415611adf57604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc57dbd89a9958dd60321b6000908152600e860160208181528483205484527f636f6e74726163745265666572656e63655f315f6f626a656374320000000000835281815284832054818501526000805160206131b883398151915283525282902054909182019060101c60ff166004811115611a8257fe5b6004811115611a8d57fe5b8152602001600885600e0160006000805160206131b8833981519152815260200190815260200160002054901c60001c60ff166004811115611acb57fe5b6004811115611ad657fe5b905290506104d9565b7231b7b73a3930b1ba2932b332b932b731b2af9960691b821415611bdc57604080516080810182527918dbdb9d1c9858dd149959995c995b98d957cc97dbd89a9958dd60321b6000908152600e860160208181528483205484527f636f6e74726163745265666572656e63655f325f6f626a656374320000000000835281815284832054818501526000805160206131d883398151915283525282902054909182019060101c60ff166004811115611b9357fe5b6004811115611b9e57fe5b8152602001600885600e0160006000805160206131d8833981519152815260200190815260200160002054901c60001c60ff166004811115611acb57fe5b60408051608081018252600080825260208201819052909182019081526020016000611acb565b600072636f6e7472616374506572666f726d616e636560681b821415611c54575072636f6e7472616374506572666f726d616e636560681b6000908152600f8301602052604090205460f81c6104d9565b74465f636f6e7472616374506572666f726d616e636560581b821415611ca7575074465f636f6e7472616374506572666f726d616e636560581b6000908152600f8301602052604090205460f81c6104d9565b5060006104d9565b6000908152600e91909101602052604090205490565b60006b636f6e74726163745479706560a01b821415611d01575064656e756d7360d81b6000908152600e8301602052604090205460f81c6104d9565b6731b0b632b73230b960c11b821415611d37575064656e756d7360d81b6000908152600e8301602052604090205460f01c6104d9565b6b636f6e7472616374526f6c6560a01b821415611d71575064656e756d7360d81b6000908152600e8301602052604090205460e81c6104d9565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b821415611db1575064656e756d7360d81b6000908152600e8301602052604090205460e01c6104d9565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b821415611df4575064656e756d7360d81b6000908152600e8301602052604090205460d81c6104d9565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b821415611e36575064656e756d7360d81b6000908152600e8301602052604090205460d01c6104d9565b69636f75706f6e5479706560b01b821415611ca7575064656e756d7360d81b6000908152600e8301602052604090205460c81c6104d9565b611e76612832565b6a19dc9858d954195c9a5bd960aa1b821480611ea557507019195b1a5b9c5d595b98de54195c9a5bd9607a1b82145b80611ec257506f1cd95d1d1b195b595b9d14195c9a5bd960821b82145b80611edb57506b199a5e1a5b99d4195c9a5bd960a21b82145b80611efe5750751c9959195b5c1d1a5bdb949958dbdc9914195c9a5bd960521b82145b15611f7a57604080516060810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff166005811115611f4257fe5b6005811115611f4d57fe5b81526000848152600e8601602090815260409091205491019060081c6001908116146111d15760006111d4565b6040805160608101909152600080825260208201906111fc565b611f9c612644565b604080516101a08101825272636f6e7472616374506572666f726d616e636560681b6000908152600f85016020529190912054819060f81c6005811115611fdf57fe5b6005811115611fea57fe5b8152697374617475734461746560b01b6000908152600f8501602081815260408084205482860152706e6f6e506572666f726d696e674461746560781b845282825280842054818601526b6d617475726974794461746560a01b84528282528084205460608601526b65786572636973654461746560a01b84528282528084205460808601526e7465726d696e6174696f6e4461746560881b84528282528084205460a0860152736c617374436f75706f6e466978696e674461746560601b84528282528084205460c08601526d195e195c98da5cd9505b5bdd5b9d60921b84528282528084205460e08601526f65786572636973655175616e7469747960801b845282825280842054610100860152677175616e7469747960c01b8452828252808420546101208601527018dbdd5c1bdb905b5bdd5b9d119a5e1959607a1b8452828252808420546101408601526b36b0b933b4b72330b1ba37b960a11b8452828252808420546101608601526f30b2353ab9ba36b2b73a2330b1ba37b960811b8452919052902054610180909101529050919050565b6121bb8274465f636f6e7472616374506572666f726d616e636560581b60f8846000015160058111156121b157fe5b60ff16901b612612565b6121dc826b465f7374617475734461746560a01b836020015160001b612612565b6122048272465f6e6f6e506572666f726d696e674461746560681b836040015160001b612612565b612227826d465f6d617475726974794461746560901b836060015160001b612612565b61224a826d465f65786572636973654461746560901b836080015160001b612612565b6122708270465f7465726d696e6174696f6e4461746560781b8360a0015160001b612612565b61229b8275465f6c617374436f75706f6e466978696e674461746560501b8360c0015160001b612612565b6122c0826f1197d95e195c98da5cd9505b5bdd5b9d60821b8360e0015160001b612612565b6122e88271465f65786572636973655175616e7469747960701b83610100015160001b612612565b6123088269465f7175616e7469747960b01b83610120015160001b612612565b61233182721197d8dbdd5c1bdb905b5bdd5b9d119a5e1959606a1b83610140015160001b612612565b612355826d232fb6b0b933b4b72330b1ba37b960911b83610160015160001b612612565b6119c28271232fb0b2353ab9ba36b2b73a2330b1ba37b960711b83610180015160001b612612565b60006763757272656e637960c01b8214156123b857506763757272656e637960c01b6000908152600e8301602052604090205460601c6104d9565b71736574746c656d656e7443757272656e637960701b821415611ca7575071736574746c656d656e7443757272656e637960701b6000908152600e8301602052604090205460601c6104d9565b6124328272636f6e7472616374506572666f726d616e636560681b60f8846000015160058111156121b157fe5b61245182697374617475734461746560b01b836020015160001b612612565b61247782706e6f6e506572666f726d696e674461746560781b836040015160001b612612565b612498826b6d617475726974794461746560a01b836060015160001b612612565b6124b9826b65786572636973654461746560a01b836080015160001b612612565b6124dd826e7465726d696e6174696f6e4461746560881b8360a0015160001b612612565b61250682736c617374436f75706f6e466978696e674461746560601b8360c0015160001b612612565b612529826d195e195c98da5cd9505b5bdd5b9d60921b8360e0015160001b612612565b61254f826f65786572636973655175616e7469747960801b83610100015160001b612612565b61256d82677175616e7469747960c01b83610120015160001b612612565b612594827018dbdd5c1bdb905b5bdd5b9d119a5e1959607a1b83610140015160001b612612565b6125b6826b36b0b933b4b72330b1ba37b960a11b83610160015160001b612612565b6119c2826f30b2353ab9ba36b2b73a2330b1ba37b960811b83610180015160001b612612565b6000828152600e840160205260409020548114156125f95761260d565b6000828152600e8401602052604090208190555b505050565b6000828152600f8401602052604090205481141561262f5761260d565b6000918252600f929092016020526040902055565b604080516101a0810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516103e08101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001612767612832565b8152602001612774612832565b8152602001612781612832565b815260200161278e612832565b815260200161279b612832565b81526020016127a86127e1565b81526020016127b56127e1565b81526020016127c26127e1565b81526020016127cf61280b565b81526020016127dc61280b565b905290565b604080516080810190915260008082526020820190815260200160005b8152600060209091015290565b604080516080810182526000808252602082018190529091820190815260200160006127dc565b6040805160608101909152600080825260208201906127fe565b80356001600160a01b03811681146104c257600080fd5b803580151581146104c257600080fd5b8035600981106104c257600080fd5b80356104c281613190565b80356104c28161319d565b8035600d81106104c257600080fd5b8035601481106104c257600080fd5b8035600481106104c257600080fd5b8035600b81106104c257600080fd5b6000608082840312156128e5578081fd5b6040516080810181811067ffffffffffffffff8211171561290257fe5b806040525080915082358152602083013560208201526040830135612926816131aa565b60408201526060830135612939816131aa565b6060919091015292915050565b600060808284031215612957578081fd5b6040516080810181811067ffffffffffffffff8211171561297457fe5b60405282358152905080602083013561298c8161319d565b6020820152604083013561299f81613190565b60408201526129b060608401612863565b60608201525092915050565b6000606082840312156129cd578081fd5b6040516060810181811067ffffffffffffffff821117156129ea57fe5b604052823581529050806020830135612a028161319d565b6020820152612a1360408401612863565b60408201525092915050565b600060208284031215612a30578081fd5b5035919050565b60008060408385031215612a49578081fd5b50508035926020909101359150565b6000808284036101c0811215612a6c578283fd5b833592506101a080601f1983011215612a83578283fd5b612a8c8161314b565b9150612a9a6020860161288d565b825260408501356020830152606085013560408301526080850135606083015260a0850135608083015260c085013560a083015260e085013560c08301526101008086013560e0840152610120808701358285015261014091508187013581850152506101608087013582850152610180915081870135818501525081860135818401525050809150509250929050565b600080828403610720811215612b3f578283fd5b83359250610700601f1982011215612b55578182fd5b506103e0612b628161314b565b612b6e602086016128a7565b8152612b7c60408601612882565b6020820152612b8d60608601612898565b6040820152612b9e608086016128c5565b6060820152612baf60a08601612873565b6080820152612bc060c08601612882565b60a0820152612bd160e086016128b6565b60c0820152610100612be481870161284c565b60e0830152610120612bf781880161284c565b828401526101409150818701358184015250610160808701358284015261018091508187013581840152506101a080870135828401526101c091508187013581840152506101e08087013582840152610200915081870135818401525061022080870135828401526102409150818701358184015250610260808701358284015261028091508187013581840152506102a080870135828401526102c09150612ca2888389016129bc565b90830152610320612cb5888883016129bc565b828401526103809150612cca888389016129bc565b6102e0840152612cdc888589016129bc565b610300840152612cf08861044089016129bc565b90830152612d02876104a08801612946565b610340830152612d16876105208801612946565b610360830152612d2a876105a08801612946565b90820152612d3c8661062087016128d4565b6103a0820152612d50866106a087016128d4565b6103c082015280925050509250929050565b6001600160a01b03169052565b60098110612d7957fe5b9052565b612d798161316f565b612d798161317c565b600d8110612d7957fe5b60148110612d7957fe5b60048110612d7957fe5b600b8110612d7957fe5b80518252602081015160208301526040810151612dd381613186565b60408301526060810151612de681613186565b806060840152505050565b805182526020810151612e038161317c565b60208301526040810151612e168161316f565b60408301526060908101511515910152565b805182526020810151612e3a8161317c565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b90815260200190565b60006101a082019050612e7d828451612d86565b6020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525061016080840151818401525061018080840151818401525092915050565b600061070082019050612f19828451612d99565b6020830151612f2b6020840182612d7d565b506040830151612f3e6040840182612d8f565b506060830151612f516060840182612dad565b506080830151612f646080840182612d6f565b5060a0830151612f7760a0840182612d7d565b5060c0830151612f8a60c0840182612da3565b5060e0830151612f9d60e0840182612d62565b5061010080840151612fb182850182612d62565b505061012083810151908301526101408084015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151908301526102a08084015161304a82850182612e28565b50506102c083015161030061306181850183612e28565b6102e0850151915061036061307881860184612e28565b9085015191506103c09061308e85830184612e28565b61032086015192506130a4610420860184612e28565b61034086015192506130ba610480860184612df1565b85015191506130cd610500850183612df1565b61038085015191506130e3610580850183612df1565b6103a085015191506130f9610600850183612db7565b840151905061310c610680840182612db7565b5092915050565b608081016104d98284612db7565b608081016104d98284612df1565b606081016104d98284612e28565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561316757fe5b604052919050565b6002811061317957fe5b50565b6006811061317957fe5b6005811061317957fe5b6002811061317957600080fd5b6006811061317957600080fd5b6005811061317957600080fdfe636f6e74726163745265666572656e63655f315f747970655f726f6c65000000636f6e74726163745265666572656e63655f325f747970655f726f6c65000000a264697066735822122070e8c857763ccad7c71bb7ebdc37ff46ff11eea30aa943308b5537b58b2b72af64736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decodeAndGetCERTFState(Asset storage)": {
        "details": "Decode and load the CERTFState of the asset"
      },
      "decodeAndGetCERTFTerms(Asset storage)": {
        "details": "Decode and loads CERTFTerms"
      },
      "decodeAndGetFinalizedCERTFState(Asset storage)": {
        "details": "Decode and load the finalized CERTFState of the asset"
      },
      "encodeAndSetCERTFState(Asset storage,CERTFState)": {
        "details": "Tightly pack and store CERTFState"
      },
      "encodeAndSetCERTFTerms(Asset storage,CERTFTerms)": {
        "details": "Tightly pack and store only non-zero overwritten terms (LifecycleTerms)"
      },
      "encodeAndSetFinalizedCERTFState(Asset storage,CERTFState)": {
        "details": "Tightly pack and store finalized CERTFState"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "encodeAndSetCERTFTerms(Asset storage,CERTFTerms)": {
        "notice": "All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}