{
  "address": "0x5cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d6",
  "abi": [],
  "transactionHash": "0x16c04cefdcbd0299d3dde95df1bf08eda76b31d98d905bd45590506a6b04f26d",
  "receipt": {
    "to": null,
    "from": "0xf6bb741F0C106a504943eaE908C3b67bcf4bF1CC",
    "contractAddress": "0x5cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d6",
    "transactionIndex": 11,
    "gasUsed": "1953117",
    "logsBloom": "0x
    "blockHash": "0xa4466dab80f66b48a767a38d4f4c9d92c963f8e2c8417c271ab8062c3551b2e1",
    "transactionHash": "0x16c04cefdcbd0299d3dde95df1bf08eda76b31d98d905bd45590506a6b04f26d",
    "logs": [],
    "blockNumber": 7713003,
    "cumulativeGasUsed": "2537766",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "37e2a100a6f868553298dee57e286371",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decodeAndGetCOLLAState(Asset storage)\":{\"details\":\"Decode and load the COLLAState of the asset\"},\"decodeAndGetCOLLATerms(Asset storage)\":{\"details\":\"Decode and loads COLLATerms\"},\"decodeAndGetFinalizedCOLLAState(Asset storage)\":{\"details\":\"Decode and load the finalized COLLAState of the asset\"},\"encodeAndSetCOLLAState(Asset storage,COLLAState)\":{\"details\":\"Tightly pack and store COLLAState\"},\"encodeAndSetCOLLATerms(Asset storage,COLLATerms)\":{\"details\":\"Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\"},\"encodeAndSetFinalizedCOLLAState(Asset storage,COLLAState)\":{\"details\":\"Tightly pack and store finalized COLLAState\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"encodeAndSetCOLLATerms(Asset storage,COLLATerms)\":{\"notice\":\"All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Core/COLLA/COLLAEncoder.sol\":\"COLLAEncoder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ACTUS/Core/ACTUSConstants.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @title ACTUSConstants\\n * @notice Contains all type definitions for ACTUS. See ACTUS-Dictionary for definitions\\n */\\ncontract ACTUSConstants {\\n\\n    // constants used throughout\\n    uint256 constant public PRECISION = 18;\\n    int256 constant public ONE_POINT_ZERO = 1 * 10 ** 18;\\n    uint256 constant public MAX_CYCLE_SIZE = 120;\\n    uint256 constant public MAX_EVENT_SCHEDULE_SIZE = 120;\\n}\\n\",\"keccak256\":\"0x1568471e72800002ad945bf084f96368f5dfb597105f2e3f11534905abda9495\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/ACTUSTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n/**\\n * Commit: https://github.com/atpar/actus-dictionary/commit/b85b9b378967de6bfc4d8b6687b520c48bce9890\\n * Date: 2020-10-06\\n */\\n\\n// IPS\\nenum P {D, W, M, Q, H, Y} // P=[D=Days, W=Weeks, M=Months, Q=Quarters, H=Halfyear, Y=Year]\\nenum S {LONG, SHORT} // S=[+=long stub,- short stub, {} if S empty then - for short stub]\\nstruct IPS {\\n    uint256 i; // I=Integer\\n    P p;\\n    S s;\\n    bool isSet;\\n}\\n\\nstruct IP {\\n    uint256 i;\\n    P p;\\n    bool isSet;\\n}\\n\\n// Number of enum options should be limited to 256 (8 bits) such that 255 enums can be packed fit into 256 bits (bytes32)\\nenum BusinessDayConvention {NOS, SCF, SCMF, CSF, CSMF, SCP, SCMP, CSP, CSMP}\\nenum Calendar {NC, MF}\\nenum ContractPerformance {PF, DL, DQ, DF, MD, TD}\\nenum ContractReferenceType {CNT, CID, MOC, EID, CST}\\nenum ContractReferenceRole {UDL, FIL, SEL, COVE, COVI}\\nenum ContractRole {RPA, RPL, RFL, PFL, RF, PF, BUY, SEL, COL, CNO, UDL, UDLP, UDLM}\\nenum ContractType {PAM, ANN, NAM, LAM, LAX, CLM, UMP, CSH, STK, COM, SWAPS, SWPPV, FXOUT, CAPFL, FUTUR, OPTNS, CEG, CEC, CERTF, COLLA}\\nenum CouponType {NOC, FIX, FCN, PRF}\\nenum CyclePointOfInterestPayment {B, E}\\nenum CyclePointOfRateReset {B, E}\\nenum DayCountConvention {AA, A360, A365, _30E360ISDA, _30E360, _28E336, ONE, OBYT, HRSAA, MINAA, SECAA}\\nenum EndOfMonthConvention {SD, EOM}\\n//               0   1    2    3    4   5   6   7   8   9  10    11  12   13   14   15   16   17   18   19   20   21   22   23   24   25  26  27    28   29  30  31  32  33\\nenum EventType {NE, CE, ISS, IED, PRD, FP, PR, PD, PY, PP, IP, IPCI, RRF, RR, DIF, DIX, DIP, COF, COP, REF, REX, REP, SPF, SPS, EXO, EXE, ST, SC, IPCB, PRF, MC, TD, MD, AD}\\nenum FeeBasis {A, N}\\n// enum GuaranteedExposure {NO, NI, MV} // not implemented\\n// enum InterestCalculationBase {NT, NTIED, NTL} // not implemented\\n// enum PenaltyType {O, A, N, I}\\n// enum PrepaymentEffect {N, A, M} // not implemented\\nenum RedeemableByIssuer {Y, N}\\nenum ScalingEffect {_000, I00, _0N0, IN0}\\n// enum Seniority {S, J} // not implemented\\n\\nstruct ContractReference {\\n    bytes32 object;\\n    bytes32 object2; // workaround for solc bug (replace object and object2 with single bytes attribute)\\n    ContractReferenceType _type;\\n    ContractReferenceRole role;\\n}\\n\\nstruct UnderlyingState {\\n    int256 exerciseAmount;\\n    bool isSet;\\n}\\n\\nstruct ANNState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n    int256 nextPrincipalRedemptionPayment;\\n}\\n\\nstruct CECState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n\\n    int256 feeAccrued;\\n    int256 exerciseAmount;\\n}\\n\\nstruct CEGState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    int256 feeAccrued;\\n    int256 exerciseAmount;\\n}\\n\\nstruct CERTFState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastCouponFixingDate;\\n\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n}\\n\\nstruct PAMState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n}\\n\\nstruct STKState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastDividendFixingDate;\\n    // uint256 dividendFixingDate; // not implemented\\n    // uint256 dividendExDate; // not implemented\\n    // uint256 dividendPaymentDate; // not implemented\\n    // uint256 splitSettlementDate; // not implemented\\n    // uint256 redemptionExDate; // not implemented\\n    // uint256 redemptionPaymentDate; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n    int256 dividendPaymentAmount;\\n    int256 splitRatio;\\n}\\n\\nstruct COLLAState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    int256 accruedInterest;\\n    int256 nominalInterestRate;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n}\\n\\nstruct ANNTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // InterestCalculationBase interestCalculationBase; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 ammortizationDate; // not implemented\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    // uint256 cycleAnchorDateOfInterestCalculationBase; // not implemented\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    uint256 cycleAnchorDateOfPrincipalRedemption;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 nextPrincipalRedemptionPayment;\\n    // int256 coverageOfCreditEnhancement;\\n    // int256 interestCalculationBaseAmount; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    IPS cycleOfPrincipalRedemption;\\n    // IPS cycleOfOptionality; // not implemented\\n    // IPS cycleOfInterestCalculationBase; // not implemented\\n}\\n\\nstruct CECTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ContractPerformance creditEventTypeCovered;\\n    FeeBasis feeBasis;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    // uint256 exerciseDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 feeRate;\\n    // int256 exerciseAmount; // state only\\n    int256 coverageOfCreditEnhancement;\\n\\n    // IP settlementPeriod; // not implemented\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CEGTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    ContractPerformance creditEventTypeCovered;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 exerciseDate; // state only\\n    // uint256 nonPerformingDate; // state only\\n\\n    int256 notionalPrincipal;\\n    // int256 delinquencyRate; not implemented\\n    int256 feeAccrued;\\n    int256 feeRate;\\n    int256 priceAtPurchaseDate;\\n    int256 coverageOfCreditEnhancement;\\n    // int256 exerciseAmount; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP settlementPeriod; // not implemented\\n\\n    IPS cycleOfFee;\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CERTFTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    CouponType couponType;\\n    // ContractPerformance contractPerformance; state only\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 issueDate;\\n    // uint256 lastCouponFixingDate; // state only\\n    uint256 cycleAnchorDateOfRedemption;\\n    uint256 cycleAnchorDateOfTermination;\\n    uint256 cycleAnchorDateOfCoupon;\\n\\n    int256 nominalPrice;\\n    int256 issuePrice;\\n    // int256 delinquencyRate; // not implemented\\n    int256 quantity;\\n    // int256 exerciseQuantity; // state only\\n    // int256 exerciseQuantityOrdered; // state only\\n    // int256 marginFactor;  // state only\\n    // int256 adjustmentFactor; // state only\\n    int256 denominationRatio;\\n    int256 couponRate;\\n    // int256 exerciseAmount; // state only\\n    // int256 couponAmountFixed; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    IP settlementPeriod;\\n    IP fixingPeriod;\\n    IP redemptionRecordPeriod;\\n\\n    IPS cycleOfRedemption;\\n    IPS cycleOfTermination;\\n    IPS cycleOfCoupon;\\n\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct PAMTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // CyclePointOfInterestPayment cyclePointOfInterestPayment; // not implemented\\n    // CyclePointOfRateReset cyclePointOfRateReset; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; // not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    // IPS cycleOfOptionality; // not implemented\\n}\\n\\nstruct STKTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    RedeemableByIssuer redeemableByIssuer;\\n    // Seniority seniority; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 issueDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfDividend;\\n\\n    int256 nominalPrice;\\n    int256 notionalPrincipal;\\n    int256 issuePrice;\\n    int256 quantity;\\n    int256 priceAtPurchaseDate;\\n    int256 redemptionPrice;\\n    int256 priceAtTerminationDate;\\n\\n    IP dividendRecordPeriod;\\n    IP dividendPaymentPeriod;\\n    IP splitSettlementPeriod;\\n    IP redemptionRecordPeriod;\\n    IP redemptionPaymentPeriod;\\n\\n    IPS cycleOfDividend;\\n}\\n\\nstruct COLLATerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    // ContractPerformance contractPerformance; // state only\\n\\n    bytes32 marketObjectCodeOfCollateral;\\n\\n    address currency;\\n    address settlementCurrency;\\n    address collateralCurrency;\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 premiumDiscountAtIED;\\n    int256 coverageOfCollateral;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n\\n    IPS cycleOfInterestPayment;\\n}\\n\",\"keccak256\":\"0x79bdd18aa3c6bdb9bb27e50b140bf43977ced292fdf89c2b2a237a0ec6c719fb\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/BaseRegistryStorage.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Conversions.sol\\\";\\nimport \\\"../SharedTypes.sol\\\";\\nimport \\\"./Schedule/ScheduleEncoder.sol\\\";\\n\\n\\nstruct Settlement {\\n    bool isSettled;\\n    int256 payoff;\\n}\\n\\nstruct Asset {\\n    // boolean indicating that asset exists / is registered\\n    bool isSet;\\n    // address of the ACTUS Engine used for computing the State and the Payoff of the asset\\n    address engine;\\n    // address of the Asset Actor which is allowed to update the State of the asset\\n    address actor;\\n    // address of the Extension which is able to generate unscheduled events for the asset\\n    address extension;\\n    // schedule of the asset\\n    Schedule schedule;\\n    // ownership of the asset\\n    AssetOwnership ownership;\\n    // method level access control - stores which address can a specific method\\n    // method signature => address => has access\\n    mapping (bytes4 => mapping (address => bool)) access;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedTerms;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedState;\\n    // indicates whether a specific event was settled\\n    mapping (bytes32 => Settlement) settlement;\\n}\\n\\n/**\\n * @title BaseRegistryStorage\\n * @notice Describes the storage of the AssetRegistry\\n * Contains getter and setter methods for encoding, decoding data to optimize gas cost.\\n * Circumvents storing default values by relying on the characteristic of mappings returning zero for not set values.\\n */\\nabstract contract BaseRegistryStorage {\\n\\n    using ScheduleEncoder for Asset;\\n\\n    // AssetId => Asset\\n    mapping (bytes32 => Asset) internal assets;\\n}\\n\",\"keccak256\":\"0x3e8beac681f832d8b6dcf0a1be328ae129c7d71e7ab75ebe2d0809edcc813b46\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Schedule/ScheduleEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary ScheduleEncoder {\\n\\n    function encodeAndSetSchedule(Asset storage asset, bytes32[] memory schedule) internal {\\n        for (uint256 i = 0; i < schedule.length; i++) {\\n            if (schedule[i] == bytes32(0)) break;\\n            asset.schedule.events[i] = schedule[i];\\n            asset.schedule.length = i + 1;\\n        }\\n    }\\n\\n    function decodeAndGetSchedule(Asset storage asset) internal view returns (bytes32[] memory) {\\n        bytes32[] memory schedule = new bytes32[](asset.schedule.length);\\n\\n        for (uint256 i = 0; i < asset.schedule.length; i++) {\\n            schedule[i] = asset.schedule.events[i];\\n        }\\n\\n        return schedule;\\n    }\\n}\\n\",\"keccak256\":\"0x420da04c67322d387c9b0fbeb00accc59a63fb9c10cb7b4c21f955792c4ad236\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/Conversions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SharedTypes.sol\\\";\\n\\n\\ncontract Conversions {\\n\\n    function encodeCollateralAsObject(address collateralToken, uint256 collateralAmount)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(collateralToken))) << 96 | bytes32(uint256(uint96(collateralAmount)));\\n    }\\n\\n    function decodeCollateralObject(bytes32 object)\\n        public\\n        pure\\n        returns (address, uint256)\\n    {\\n        return (\\n            address(uint160(uint256(object >> 96))),\\n            uint256(uint96(uint256(object)))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcc273a4272ffd03ef3f6fd329590a25049482661820ee4dcc953d28eeb4a9a95\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/SharedTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../ACTUS/Core/ACTUSTypes.sol\\\";\\nimport \\\"../../ACTUS/Core/ACTUSConstants.sol\\\";\\n\\n\\nstruct AssetOwnership {\\n    // account which has to fulfill all obligations for the creator side\\n    address creatorObligor;\\n    // account to which all cashflows to which the creator is the beneficiary are forwarded\\n    address creatorBeneficiary;\\n    // account which has to fulfill all obligations for the counterparty\\n    address counterpartyObligor;\\n    // account to which all cashflows to which the counterparty is the beneficiary are forwarded\\n    address counterpartyBeneficiary;\\n}\\n\\n// scheduleTime and EventType are tightly packed and encoded as bytes32\\nstruct Schedule {\\n    // schedule times of cyclic events (used if no schedule is set)\\n    mapping(EventType => uint256) lastScheduleTimeOfCyclicEvent;\\n    // index of event => bytes32 encoded event\\n    mapping(uint256 => bytes32) events;\\n    // the length of the schedule, used to determine the end of the schedule\\n    uint256 length;\\n    // pointer to index of the next event in the schedule\\n    uint256 nextScheduleIndex;\\n    // last event which could not be settled\\n    bytes32 pendingEvent;\\n    // last non-cyclic event which was processed (used if no schedule is set)\\n    bytes32 lastNonCyclicEvent;\\n}\\n\",\"keccak256\":\"0xadbb252a62b8641f01338ce1650d5d59ccc4a6f3f0e62c49e7b16bf51d2a46b8\",\"license\":\"Apache-2.0\"},\"contracts/Core/COLLA/COLLAEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Base/SharedTypes.sol\\\";\\nimport \\\"../Base/AssetRegistry/BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary COLLAEncoder {\\n\\n    function storeInPackedTerms(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedTerms[attributeKey] == value) return;\\n        asset.packedTerms[attributeKey] = value;\\n    }\\n\\n    function storeInPackedState(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedState[attributeKey] == value) return;\\n        asset.packedState[attributeKey] = value;\\n    }\\n    \\n    /**\\n     * @dev Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\\n     * @notice All non zero values of the overwrittenTerms object are stored.\\n     * It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\\n     */\\n    function encodeAndSetCOLLATerms(Asset storage asset, COLLATerms memory terms) external {\\n        storeInPackedTerms(\\n            asset,\\n            \\\"enums\\\",\\n            bytes32(uint256(uint8(terms.contractType))) << 248 |\\n            bytes32(uint256(uint8(terms.calendar))) << 240 |\\n            bytes32(uint256(uint8(terms.contractRole))) << 232 |\\n            bytes32(uint256(uint8(terms.dayCountConvention))) << 224 |\\n            bytes32(uint256(uint8(terms.businessDayConvention))) << 216 |\\n            bytes32(uint256(uint8(terms.endOfMonthConvention))) << 208\\n        );\\n\\n        storeInPackedTerms(asset, \\\"marketObjectCodeOfCollateral\\\", bytes32(terms.marketObjectCodeOfCollateral));\\n\\n        storeInPackedTerms(asset, \\\"currency\\\", bytes32(uint256(terms.currency) << 96));\\n        storeInPackedTerms(asset, \\\"settlementCurrency\\\", bytes32(uint256(terms.settlementCurrency) << 96));\\n        storeInPackedTerms(asset, \\\"collateralCurrency\\\", bytes32(uint256(terms.collateralCurrency) << 96));\\n\\n        storeInPackedTerms(asset, \\\"statusDate\\\", bytes32(terms.statusDate));\\n        storeInPackedTerms(asset, \\\"initialExchangeDate\\\", bytes32(terms.initialExchangeDate));\\n        storeInPackedTerms(asset, \\\"maturityDate\\\", bytes32(terms.maturityDate));\\n        storeInPackedTerms(asset, \\\"capitalizationEndDate\\\", bytes32(terms.capitalizationEndDate));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfInterestPayment\\\", bytes32(terms.cycleAnchorDateOfInterestPayment));\\n\\n        storeInPackedTerms(asset, \\\"notionalPrincipal\\\", bytes32(terms.notionalPrincipal));\\n        storeInPackedTerms(asset, \\\"nominalInterestRate\\\", bytes32(terms.nominalInterestRate));\\n        storeInPackedTerms(asset, \\\"accruedInterest\\\", bytes32(terms.accruedInterest));\\n        storeInPackedTerms(asset, \\\"premiumDiscountAtIED\\\", bytes32(terms.premiumDiscountAtIED));\\n        storeInPackedTerms(asset, \\\"coverageOfCollateral\\\", bytes32(terms.coverageOfCollateral));\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"gracePeriod\\\",\\n            bytes32(uint256(terms.gracePeriod.i)) << 24 |\\n            bytes32(uint256(terms.gracePeriod.p)) << 16 |\\n            bytes32(uint256((terms.gracePeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"delinquencyPeriod\\\",\\n            bytes32(uint256(terms.delinquencyPeriod.i)) << 24 |\\n            bytes32(uint256(terms.delinquencyPeriod.p)) << 16 |\\n            bytes32(uint256((terms.delinquencyPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfInterestPayment\\\",\\n            bytes32(uint256(terms.cycleOfInterestPayment.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfInterestPayment.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfInterestPayment.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfInterestPayment.isSet) ? 1 : 0))\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and loads COLLATerms\\n     */\\n    function decodeAndGetCOLLATerms(Asset storage asset) external view returns (COLLATerms memory) {\\n        return COLLATerms(\\n            ContractType(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248))),\\n            Calendar(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240))),\\n            ContractRole(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232))),\\n            DayCountConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224))),\\n            BusinessDayConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216))),\\n            EndOfMonthConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208))),\\n\\n            asset.packedTerms[\\\"marketObjectCodeOfCollateral\\\"],\\n\\n            address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96)),\\n            address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96)),\\n            address(uint160(uint256(asset.packedTerms[\\\"collateralCurrency\\\"]) >> 96)),\\n\\n            uint256(asset.packedTerms[\\\"statusDate\\\"]),\\n            uint256(asset.packedTerms[\\\"initialExchangeDate\\\"]),\\n            uint256(asset.packedTerms[\\\"maturityDate\\\"]),\\n            uint256(asset.packedTerms[\\\"capitalizationEndDate\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfInterestPayment\\\"]),\\n\\n            int256(asset.packedTerms[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedTerms[\\\"nominalInterestRate\\\"]),\\n            int256(asset.packedTerms[\\\"accruedInterest\\\"]),\\n            int256(asset.packedTerms[\\\"premiumDiscountAtIED\\\"]),\\n            int256(asset.packedTerms[\\\"coverageOfCollateral\\\"]),\\n            \\n            IP(\\n                uint256(asset.packedTerms[\\\"gracePeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"gracePeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"gracePeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfInterestPayment\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfInterestPayment\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfInterestPayment\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfInterestPayment\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            )\\n        );\\n    }\\n\\n    function decodeAndGetEnumValueForCOLLAAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractType\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"calendar\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240));\\n        } else if (attributeKey == bytes32(\\\"contractRole\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232));\\n        } else if (attributeKey == bytes32(\\\"dayCountConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224));\\n        } else if (attributeKey == bytes32(\\\"businessDayConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216));\\n        } else if (attributeKey == bytes32(\\\"endOfMonthConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetAddressValueForForCOLLAAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (address)\\n    {\\n        if (attributeKey == bytes32(\\\"currency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96));\\n        } else if (attributeKey == bytes32(\\\"settlementCurrency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96));\\n        } else if (attributeKey == bytes32(\\\"collateralCurrency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"collateralCurrency\\\"]) >> 96));\\n        } else {\\n            return address(0);\\n        }   \\n    }\\n\\n    function decodeAndGetBytes32ValueForForCOLLAAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return asset.packedTerms[attributeKey];\\n    }\\n\\n    function decodeAndGetUIntValueForForCOLLAAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForForCOLLAAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetPeriodValueForForCOLLAAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IP memory)\\n    {\\n        if (\\n            attributeKey == bytes32(\\\"gracePeriod\\\")\\n            || attributeKey == bytes32(\\\"delinquencyPeriod\\\")\\n        ) {\\n            return IP(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                (asset.packedTerms[attributeKey] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IP(0, P(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetCycleValueForForCOLLAAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IPS memory)\\n    {\\n        if (attributeKey == bytes32(\\\"cycleOfInterestPayment\\\")) {\\n            return IPS(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[attributeKey] >> 8))),\\n                (asset.packedTerms[attributeKey] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IPS(0, P(0), S(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetContractReferenceValueForCOLLAAttribute(Asset storage /* asset */, bytes32 /* attributeKey */)\\n        external\\n        pure\\n        returns (ContractReference memory)\\n    {\\n        return ContractReference(\\n            bytes32(0),\\n            bytes32(0),\\n            ContractReferenceType(0),\\n            ContractReferenceRole(0)\\n        );\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store COLLAState\\n     */\\n    function encodeAndSetCOLLAState(Asset storage asset, COLLAState memory state) external {\\n        storeInPackedState(asset, \\\"contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store finalized COLLAState\\n     */\\n    function encodeAndSetFinalizedCOLLAState(Asset storage asset, COLLAState memory state) external {\\n        storeInPackedState(asset, \\\"F_contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"F_statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"F_nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"F_maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"F_terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"F_notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"F_accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"F_nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"F_interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"F_notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n    }\\n\\n    /**\\n     * @dev Decode and load the COLLAState of the asset\\n     */\\n    function decodeAndGetCOLLAState(Asset storage asset)\\n        external\\n        view\\n        returns (COLLAState memory)\\n    {\\n        return COLLAState(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"statusDate\\\"]),\\n            uint256(asset.packedState[\\\"nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"terminationDate\\\"]),\\n\\n            int256(asset.packedState[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"notionalScalingMultiplier\\\"])\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and load the finalized COLLAState of the asset\\n     */\\n    function decodeAndGetFinalizedCOLLAState(Asset storage asset)\\n        external\\n        view\\n        returns (COLLAState memory)\\n    {\\n        return COLLAState(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"F_statusDate\\\"]),\\n            uint256(asset.packedState[\\\"F_nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"F_maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"F_terminationDate\\\"]),\\n\\n            int256(asset.packedState[\\\"F_notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"F_accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"F_nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"F_interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"F_notionalScalingMultiplier\\\"])\\n        );\\n    }\\n\\n    function decodeAndGetEnumValueForCOLLAStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"F_contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetUIntValueForCOLLAStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedState[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForCOLLAStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedState[attributeKey]);\\n    }\\n}\",\"keccak256\":\"0x3fd2c8d28c19e35103daa0f8632f179261d564be6847d88474041c8168775c0b\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x61225f610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c806380f7fb13116100ac578063ba9a95501161007b578063ba9a955014610258578063c500699214610278578063e02668fc1461028b578063e4eb054c1461029e578063f97e351d146101c557610115565b806380f7fb13146101f85780638cda37601461021857806391d53bb814610238578063a18b76841461018557610115565b80635794b705116100e85780635794b705146101a55780635a5577df146101c55780635b2f935f146101c55780637ba8ffea146101d857610115565b806321f0623f1461011a57806355b2be7c1461014357806356ad02f414610163578063578944e614610185575b600080fd5b61012d610128366004611c4a565b6102be565b60405161013a91906121ae565b60405180910390f35b610156610151366004611c32565b6103a8565b60405161013a9190611f7a565b81801561016f57600080fd5b5061018361017e366004611d18565b610550565b005b610198610193366004611c4a565b6109a0565b60405161013a9190611f71565b6101b86101b3366004611c4a565b6109b6565b60405161013a91906121a0565b6101986101d3366004611c4a565b610aaf565b8180156101e457600080fd5b506101836101f3366004611c6b565b610ac5565b81801561020457600080fd5b50610183610213366004611c6b565b610c6e565b61022b610226366004611c4a565b610df5565b60405161013a9190611f5d565b61024b610246366004611c32565b610ed2565b60405161013a9190611ff2565b61026b610266366004611c4a565b6114d4565b60405161013a91906121bc565b610156610286366004611c32565b611645565b61026b610299366004611c4a565b611804565b6102b16102ac366004611c4a565b6118a8565b60405161013a919061215f565b6102c6611943565b6a19dc9858d954195c9a5bd960aa1b8214806102f557507019195b1a5b9c5d595b98de54195c9a5bd9607a1b82145b1561037f57604080516060810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561033957fe5b600581111561034457fe5b81526000848152600e8601602090815260409091205491019060081c600190811614610371576000610374565b60015b1515905290506103a2565b6040805160608101909152600080825260208201905b8152600060209091015290505b92915050565b6103b0611966565b604080516101408101825272636f6e7472616374506572666f726d616e636560681b6000908152600f85016020529190912054819060f81c60058111156103f357fe5b60058111156103fe57fe5b8152697374617475734461746560b01b6000908152600f8501602081815260408084205482860152706e6f6e506572666f726d696e674461746560781b845282825280842054818601526b6d617475726974794461746560a01b84528282528084205460608601526e7465726d696e6174696f6e4461746560881b8452828252808420546080860152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b84528282528084205460a08601526e1858d8dc9d5959125b9d195c995cdd608a1b84528282528084205460c0860152726e6f6d696e616c496e7465726573745261746560681b84528282528084205460e08601527834b73a32b932b9ba29b1b0b634b733a6bab63a34b83634b2b960391b845282825280842054610100860152783737ba34b7b730b629b1b0b634b733a6bab63a34b83634b2b960391b84529190529020546101209091015290505b919050565b6106008264656e756d7360d81b60d08460a00151600181111561056f57fe5b60ff1660001b901b60d88560800151600881111561058957fe5b60ff1660001b901b60e08660600151600a8111156105a357fe5b60ff1660001b901b60e88760400151600c8111156105bd57fe5b60ff1660001b901b60f0886020015160018111156105d757fe5b60ff1660001b901b60f8896000015160138111156105f157fe5b60ff16901b17171717176118db565b61062f827f6d61726b65744f626a656374436f64654f66436f6c6c61746572616c000000008360c001516118db565b610659826763757272656e637960c01b60608460e001516001600160a01b0316901b60001b6118db565b61068e8271736574746c656d656e7443757272656e637960701b60608461010001516001600160a01b0316901b60001b6118db565b6106c38271636f6c6c61746572616c43757272656e637960701b60608461012001516001600160a01b0316901b60001b6118db565b6106e382697374617475734461746560b01b83610140015160001b6118db565b61070c8272696e697469616c45786368616e67654461746560681b83610160015160001b6118db565b61072e826b6d617475726974794461746560a01b83610180015160001b6118db565b61075982746361706974616c697a6174696f6e456e644461746560581b836101a0015160001b6118db565b61078c827f6379636c65416e63686f72446174654f66496e7465726573745061796d656e74836101c0015160001b6118db565b6107b382701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b836101e0015160001b6118db565b6107dc82726e6f6d696e616c496e7465726573745261746560681b83610200015160001b6118db565b610801826e1858d8dc9d5959125b9d195c995cdd608a1b83610220015160001b6118db565b61082b82731c1c995b5a5d5b511a5cd8dbdd5b9d105d12515160621b83610240015160001b6118db565b610855827318dbdd995c9859d953d990dbdb1b185d195c985b60621b83610260015160001b6118db565b6108b4826a19dc9858d954195c9a5bd960aa1b60088461028001516040015161087f576000610882565b60015b60ff1660001b901b60108561028001516020015160058111156108a157fe5b6102808701515160181b911b17176118db565b610919827019195b1a5b9c5d595b98de54195c9a5bd9607a1b6008846102a00151604001516108e45760006108e7565b60015b60ff1660001b901b6010856102a0015160200151600581111561090657fe5b6102a08701515160181b911b17176118db565b61099c827518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b836102c001516060015161094c57600061094f565b60015b60ff1660001b6008856102c0015160400151600181111561096c57fe5b60001b901b6010866102c0015160200151600581111561098857fe5b6102c08801515160181b911b1717176118db565b5050565b6000908152600f91909101602052604090205490565b6109be6119ba565b7518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b821415610a8e57604080516080810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff166005811115610a1e57fe5b6005811115610a2957fe5b8152602001600885600e01600086815260200190815260200160002054901c60001c60ff166001811115610a5957fe5b6001811115610a6457fe5b81526000848152600e86016020908152604090912054910190600190811614610371576000610374565b60408051608081019091526000808252602082019081526020016000610395565b6000908152600e91909101602052604090205490565b610afe8274465f636f6e7472616374506572666f726d616e636560581b60f884600001516005811115610af457fe5b60ff16901b611911565b610b1f826b465f7374617475734461746560a01b836020015160001b611911565b610b478272465f6e6f6e506572666f726d696e674461746560681b836040015160001b611911565b610b6a826d465f6d617475726974794461746560901b836060015160001b611911565b610b908270465f7465726d696e6174696f6e4461746560781b836080015160001b611911565b610bb882721197db9bdd1a5bdb985b141c9a5b98da5c185b606a1b8360a0015160001b611911565b610bde82701197d858d8dc9d5959125b9d195c995cdd607a1b8360c0015160001b611911565b610c088274465f6e6f6d696e616c496e7465726573745261746560581b8360e0015160001b611911565b610c3b827f465f696e7465726573745363616c696e674d756c7469706c696572000000000083610100015160001b611911565b61099c827f465f6e6f74696f6e616c5363616c696e674d756c7469706c696572000000000083610120015160001b611911565b610c9b8272636f6e7472616374506572666f726d616e636560681b60f884600001516005811115610af457fe5b610cba82697374617475734461746560b01b836020015160001b611911565b610ce082706e6f6e506572666f726d696e674461746560781b836040015160001b611911565b610d01826b6d617475726974794461746560a01b836060015160001b611911565b610d25826e7465726d696e6174696f6e4461746560881b836080015160001b611911565b610d4b82701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b8360a0015160001b611911565b610d6f826e1858d8dc9d5959125b9d195c995cdd608a1b8360c0015160001b611911565b610d9782726e6f6d696e616c496e7465726573745261746560681b8360e0015160001b611911565b610dc6827834b73a32b932b9ba29b1b0b634b733a6bab63a34b83634b2b960391b83610100015160001b611911565b61099c82783737ba34b7b730b629b1b0b634b733a6bab63a34b83634b2b960391b83610120015160001b611911565b60006763757272656e637960c01b821415610e3057506763757272656e637960c01b6000908152600e8301602052604090205460601c6103a2565b71736574746c656d656e7443757272656e637960701b821415610e7d575071736574746c656d656e7443757272656e637960701b6000908152600e8301602052604090205460601c6103a2565b71636f6c6c61746572616c43757272656e637960701b821415610eca575071636f6c6c61746572616c43757272656e637960701b6000908152600e8301602052604090205460601c6103a2565b5060006103a2565b610eda6119db565b604080516102e08101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c6013811115610f0f57fe5b6013811115610f1a57fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166001811115610f5257fe5b6001811115610f5d57fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c811115610f9557fe5b600c811115610fa057fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600a811115610fd857fe5b600a811115610fe357fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600881111561101b57fe5b600881111561102657fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561105e57fe5b600181111561106957fe5b81527f6d61726b65744f626a656374436f64654f66436f6c6c61746572616c000000006000908152600e85016020818152604080842054828601526763757272656e637960c01b845282825280842054606090811c8287015271736574746c656d656e7443757272656e637960701b855283835281852054811c8187015271636f6c6c61746572616c43757272656e637960701b855283835281852054811c6080870152697374617475734461746560b01b85528383528185205460a087015272696e697469616c45786368616e67654461746560681b85528383528185205460c08701526b6d617475726974794461746560a01b85528383528185205460e0870152746361706974616c697a6174696f6e456e644461746560581b8552838352818520546101008701527f6379636c65416e63686f72446174654f66496e7465726573745061796d656e74855283835281852054610120870152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b855283835281852054610140870152726e6f6d696e616c496e7465726573745261746560681b8552838352818520546101608701526e1858d8dc9d5959125b9d195c995cdd608a1b855283835281852054610180870152731c1c995b5a5d5b511a5cd8dbdd5b9d105d12515160621b8552838352818520546101a08701527318dbdd995c9859d953d990dbdb1b185d195c985b60621b8552838352818520546101c0870152815190810182526a19dc9858d954195c9a5bd960aa1b80865284845291852054601881901c8252919094529181526101e09093019282019060101c60ff1660058111156112c757fe5b60058111156112d257fe5b81526a19dc9858d954195c9a5bd960aa1b6000908152600e8701602090815260409091205491019060081c60019081161461130e576000611311565b60015b151590528152604080516060810182527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561136f57fe5b600581111561137a57fe5b81527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000908152600e8701602090815260409091205491019060081c6001908116146113bc5760006113bf565b60015b151590528152604080516080810182527518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561142257fe5b600581111561142d57fe5b8152602001600886600e0160007518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b815260200190815260200160002054901c60001c60ff16600181111561147657fe5b600181111561148157fe5b81527518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b6000908152600e870160209081526040909120549101906001908116146114c55760006114c8565b60015b15159052905292915050565b60006b636f6e74726163745479706560a01b821415611510575064656e756d7360d81b6000908152600e8301602052604090205460f81c6103a2565b6731b0b632b73230b960c11b821415611546575064656e756d7360d81b6000908152600e8301602052604090205460f01c6103a2565b6b636f6e7472616374526f6c6560a01b821415611580575064656e756d7360d81b6000908152600e8301602052604090205460e81c6103a2565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b8214156115c0575064656e756d7360d81b6000908152600e8301602052604090205460e01c6103a2565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b821415611603575064656e756d7360d81b6000908152600e8301602052604090205460d81c6103a2565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b821415610eca575064656e756d7360d81b6000908152600e8301602052604090205460d01c6103a2565b61164d611966565b604080516101408101825274465f636f6e7472616374506572666f726d616e636560581b6000908152600f85016020529190912054819060f81c600581111561169257fe5b600581111561169d57fe5b81526b465f7374617475734461746560a01b6000908152600f850160208181526040808420548286015272465f6e6f6e506572666f726d696e674461746560681b845282825280842054818601526d465f6d617475726974794461746560901b845282825280842054606086015270465f7465726d696e6174696f6e4461746560781b8452828252808420546080860152721197db9bdd1a5bdb985b141c9a5b98da5c185b606a1b84528282528084205460a0860152701197d858d8dc9d5959125b9d195c995cdd607a1b84528282528084205460c086015274465f6e6f6d696e616c496e7465726573745261746560581b84528282528084205460e08601527f465f696e7465726573745363616c696e674d756c7469706c69657200000000008452828252808420546101008601527f465f6e6f74696f6e616c5363616c696e674d756c7469706c69657200000000008452919052902054610120909101529050919050565b600072636f6e7472616374506572666f726d616e636560681b821415611855575072636f6e7472616374506572666f726d616e636560681b6000908152600f8301602052604090205460f81c6103a2565b74465f636f6e7472616374506572666f726d616e636560581b821415610eca575074465f636f6e7472616374506572666f726d616e636560581b6000908152600f8301602052604090205460f81c6103a2565b6118b0611ab9565b6040805160808101825260008082526020820181905290918201908152602001600090529392505050565b6000828152600e840160205260409020548114156118f85761190c565b6000828152600e8401602052604090208190555b505050565b6000828152600f8401602052604090205481141561192e5761190c565b6000918252600f929092016020526040902055565b6040805160608101909152600080825260208201905b8152600060209091015290565b60408051610140810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60408051608081019091526000808252602082019081526020016000611959565b604080516102e08101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000801916815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001611a9a611943565b8152602001611aa7611943565b8152602001611ab46119ba565b905290565b60408051608081018252600080825260208201819052909182019081526020016000611ab4565b80356001600160a01b038116811461054b57600080fd5b8035801515811461054b57600080fd5b80356009811061054b57600080fd5b803561054b8161220f565b803561054b8161221c565b8035600d811061054b57600080fd5b80356014811061054b57600080fd5b8035600b811061054b57600080fd5b600060808284031215611b6a578081fd5b6040516080810181811067ffffffffffffffff82111715611b8757fe5b604052823581529050806020830135611b9f8161221c565b60208201526040830135611bb28161220f565b6040820152611bc360608401611af7565b60608201525092915050565b600060608284031215611be0578081fd5b6040516060810181811067ffffffffffffffff82111715611bfd57fe5b604052823581529050806020830135611c158161221c565b6020820152611c2660408401611af7565b60408201525092915050565b600060208284031215611c43578081fd5b5035919050565b60008060408385031215611c5c578081fd5b50508035926020909101359150565b600080828403610160811215611c7f578283fd5b8335925061014080601f1983011215611c96578283fd5b611c9f816121ca565b9150611cad60208601611b21565b825260408501356020830152606085013560408301526080850135606083015260a0850135608083015260c085013560a083015260e085013560c08301526101008086013560e084015261012080870135828501528287013581850152505050809150509250929050565b6000808284036103e0811215611d2c578283fd5b833592506103c0601f1982011215611d42578182fd5b50611d4e6102e06121ca565b611d5a60208501611b3b565b8152611d6860408501611b16565b6020820152611d7960608501611b2c565b6040820152611d8a60808501611b4a565b6060820152611d9b60a08501611b07565b6080820152611dac60c08501611b16565b60a082015260e084013560c0820152610100611dc9818601611ae0565b60e0830152610120611ddc818701611ae0565b828401526101409150611df0828701611ae0565b8184015250610160808601358284015261018091508186013581840152506101a080860135828401526101c091508186013581840152506101e08086013582840152610200915081860135818401525061022080860135828401526102409150818601358184015250610260808601358284015261028091508186013581840152506102a0611e8187828801611bcf565b82840152611e93876103008801611bcf565b9083015250611ea6856103608601611b59565b6102c0820152809150509250929050565b6001600160a01b03169052565b60098110611ece57fe5b9052565b611ece816121ee565b611ece816121fb565b600d8110611ece57fe5b60148110611ece57fe5b600b8110611ece57fe5b805182526020810151611f14816121fb565b60208301526040810151611f27816121ee565b60408301526060908101511515910152565b805182526020810151611f4b816121fb565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b90815260200190565b600061014082019050611f8e828451611edb565b6020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b60006103c082019050612006828451611eee565b60208301516120186020840182611ed2565b50604083015161202b6040840182611ee4565b50606083015161203e6060840182611ef8565b5060808301516120516080840182611ec4565b5060a083015161206460a0840182611ed2565b5060c083015160c083015260e083015161208160e0840182611eb7565b506101008084015161209582850182611eb7565b5050610120808401516120aa82850182611eb7565b50506101408381015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e0808401519083015261020080840151908301526102208084015190830152610240808401519083015261026080840151908301526102808084015161212d82850182611f39565b50506102a08301516121436102e0840182611f39565b506102c0830151612158610340840182611f02565b5092915050565b81518152602080830151908201526040820151608082019061218081612205565b6040830152606083015161219381612205565b8060608401525092915050565b608081016103a28284611f02565b606081016103a28284611f39565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156121e657fe5b604052919050565b600281106121f857fe5b50565b600681106121f857fe5b600581106121f857fe5b600281106121f857600080fd5b600681106121f857600080fdfea2646970667358221220f4cf7364699d28563230e62ec9ac247290b3b934a2632fd9820010b8675d66e864736f6c63430007040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c806380f7fb13116100ac578063ba9a95501161007b578063ba9a955014610258578063c500699214610278578063e02668fc1461028b578063e4eb054c1461029e578063f97e351d146101c557610115565b806380f7fb13146101f85780638cda37601461021857806391d53bb814610238578063a18b76841461018557610115565b80635794b705116100e85780635794b705146101a55780635a5577df146101c55780635b2f935f146101c55780637ba8ffea146101d857610115565b806321f0623f1461011a57806355b2be7c1461014357806356ad02f414610163578063578944e614610185575b600080fd5b61012d610128366004611c4a565b6102be565b60405161013a91906121ae565b60405180910390f35b610156610151366004611c32565b6103a8565b60405161013a9190611f7a565b81801561016f57600080fd5b5061018361017e366004611d18565b610550565b005b610198610193366004611c4a565b6109a0565b60405161013a9190611f71565b6101b86101b3366004611c4a565b6109b6565b60405161013a91906121a0565b6101986101d3366004611c4a565b610aaf565b8180156101e457600080fd5b506101836101f3366004611c6b565b610ac5565b81801561020457600080fd5b50610183610213366004611c6b565b610c6e565b61022b610226366004611c4a565b610df5565b60405161013a9190611f5d565b61024b610246366004611c32565b610ed2565b60405161013a9190611ff2565b61026b610266366004611c4a565b6114d4565b60405161013a91906121bc565b610156610286366004611c32565b611645565b61026b610299366004611c4a565b611804565b6102b16102ac366004611c4a565b6118a8565b60405161013a919061215f565b6102c6611943565b6a19dc9858d954195c9a5bd960aa1b8214806102f557507019195b1a5b9c5d595b98de54195c9a5bd9607a1b82145b1561037f57604080516060810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff16600581111561033957fe5b600581111561034457fe5b81526000848152600e8601602090815260409091205491019060081c600190811614610371576000610374565b60015b1515905290506103a2565b6040805160608101909152600080825260208201905b8152600060209091015290505b92915050565b6103b0611966565b604080516101408101825272636f6e7472616374506572666f726d616e636560681b6000908152600f85016020529190912054819060f81c60058111156103f357fe5b60058111156103fe57fe5b8152697374617475734461746560b01b6000908152600f8501602081815260408084205482860152706e6f6e506572666f726d696e674461746560781b845282825280842054818601526b6d617475726974794461746560a01b84528282528084205460608601526e7465726d696e6174696f6e4461746560881b8452828252808420546080860152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b84528282528084205460a08601526e1858d8dc9d5959125b9d195c995cdd608a1b84528282528084205460c0860152726e6f6d696e616c496e7465726573745261746560681b84528282528084205460e08601527834b73a32b932b9ba29b1b0b634b733a6bab63a34b83634b2b960391b845282825280842054610100860152783737ba34b7b730b629b1b0b634b733a6bab63a34b83634b2b960391b84529190529020546101209091015290505b919050565b6106008264656e756d7360d81b60d08460a00151600181111561056f57fe5b60ff1660001b901b60d88560800151600881111561058957fe5b60ff1660001b901b60e08660600151600a8111156105a357fe5b60ff1660001b901b60e88760400151600c8111156105bd57fe5b60ff1660001b901b60f0886020015160018111156105d757fe5b60ff1660001b901b60f8896000015160138111156105f157fe5b60ff16901b17171717176118db565b61062f827f6d61726b65744f626a656374436f64654f66436f6c6c61746572616c000000008360c001516118db565b610659826763757272656e637960c01b60608460e001516001600160a01b0316901b60001b6118db565b61068e8271736574746c656d656e7443757272656e637960701b60608461010001516001600160a01b0316901b60001b6118db565b6106c38271636f6c6c61746572616c43757272656e637960701b60608461012001516001600160a01b0316901b60001b6118db565b6106e382697374617475734461746560b01b83610140015160001b6118db565b61070c8272696e697469616c45786368616e67654461746560681b83610160015160001b6118db565b61072e826b6d617475726974794461746560a01b83610180015160001b6118db565b61075982746361706974616c697a6174696f6e456e644461746560581b836101a0015160001b6118db565b61078c827f6379636c65416e63686f72446174654f66496e7465726573745061796d656e74836101c0015160001b6118db565b6107b382701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b836101e0015160001b6118db565b6107dc82726e6f6d696e616c496e7465726573745261746560681b83610200015160001b6118db565b610801826e1858d8dc9d5959125b9d195c995cdd608a1b83610220015160001b6118db565b61082b82731c1c995b5a5d5b511a5cd8dbdd5b9d105d12515160621b83610240015160001b6118db565b610855827318dbdd995c9859d953d990dbdb1b185d195c985b60621b83610260015160001b6118db565b6108b4826a19dc9858d954195c9a5bd960aa1b60088461028001516040015161087f576000610882565b60015b60ff1660001b901b60108561028001516020015160058111156108a157fe5b6102808701515160181b911b17176118db565b610919827019195b1a5b9c5d595b98de54195c9a5bd9607a1b6008846102a00151604001516108e45760006108e7565b60015b60ff1660001b901b6010856102a0015160200151600581111561090657fe5b6102a08701515160181b911b17176118db565b61099c827518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b836102c001516060015161094c57600061094f565b60015b60ff1660001b6008856102c0015160400151600181111561096c57fe5b60001b901b6010866102c0015160200151600581111561098857fe5b6102c08801515160181b911b1717176118db565b5050565b6000908152600f91909101602052604090205490565b6109be6119ba565b7518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b821415610a8e57604080516080810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff166005811115610a1e57fe5b6005811115610a2957fe5b8152602001600885600e01600086815260200190815260200160002054901c60001c60ff166001811115610a5957fe5b6001811115610a6457fe5b81526000848152600e86016020908152604090912054910190600190811614610371576000610374565b60408051608081019091526000808252602082019081526020016000610395565b6000908152600e91909101602052604090205490565b610afe8274465f636f6e7472616374506572666f726d616e636560581b60f884600001516005811115610af457fe5b60ff16901b611911565b610b1f826b465f7374617475734461746560a01b836020015160001b611911565b610b478272465f6e6f6e506572666f726d696e674461746560681b836040015160001b611911565b610b6a826d465f6d617475726974794461746560901b836060015160001b611911565b610b908270465f7465726d696e6174696f6e4461746560781b836080015160001b611911565b610bb882721197db9bdd1a5bdb985b141c9a5b98da5c185b606a1b8360a0015160001b611911565b610bde82701197d858d8dc9d5959125b9d195c995cdd607a1b8360c0015160001b611911565b610c088274465f6e6f6d696e616c496e7465726573745261746560581b8360e0015160001b611911565b610c3b827f465f696e7465726573745363616c696e674d756c7469706c696572000000000083610100015160001b611911565b61099c827f465f6e6f74696f6e616c5363616c696e674d756c7469706c696572000000000083610120015160001b611911565b610c9b8272636f6e7472616374506572666f726d616e636560681b60f884600001516005811115610af457fe5b610cba82697374617475734461746560b01b836020015160001b611911565b610ce082706e6f6e506572666f726d696e674461746560781b836040015160001b611911565b610d01826b6d617475726974794461746560a01b836060015160001b611911565b610d25826e7465726d696e6174696f6e4461746560881b836080015160001b611911565b610d4b82701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b8360a0015160001b611911565b610d6f826e1858d8dc9d5959125b9d195c995cdd608a1b8360c0015160001b611911565b610d9782726e6f6d696e616c496e7465726573745261746560681b8360e0015160001b611911565b610dc6827834b73a32b932b9ba29b1b0b634b733a6bab63a34b83634b2b960391b83610100015160001b611911565b61099c82783737ba34b7b730b629b1b0b634b733a6bab63a34b83634b2b960391b83610120015160001b611911565b60006763757272656e637960c01b821415610e3057506763757272656e637960c01b6000908152600e8301602052604090205460601c6103a2565b71736574746c656d656e7443757272656e637960701b821415610e7d575071736574746c656d656e7443757272656e637960701b6000908152600e8301602052604090205460601c6103a2565b71636f6c6c61746572616c43757272656e637960701b821415610eca575071636f6c6c61746572616c43757272656e637960701b6000908152600e8301602052604090205460601c6103a2565b5060006103a2565b610eda6119db565b604080516102e08101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c6013811115610f0f57fe5b6013811115610f1a57fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff166001811115610f5257fe5b6001811115610f5d57fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c811115610f9557fe5b600c811115610fa057fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600a811115610fd857fe5b600a811115610fe357fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600881111561101b57fe5b600881111561102657fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561105e57fe5b600181111561106957fe5b81527f6d61726b65744f626a656374436f64654f66436f6c6c61746572616c000000006000908152600e85016020818152604080842054828601526763757272656e637960c01b845282825280842054606090811c8287015271736574746c656d656e7443757272656e637960701b855283835281852054811c8187015271636f6c6c61746572616c43757272656e637960701b855283835281852054811c6080870152697374617475734461746560b01b85528383528185205460a087015272696e697469616c45786368616e67654461746560681b85528383528185205460c08701526b6d617475726974794461746560a01b85528383528185205460e0870152746361706974616c697a6174696f6e456e644461746560581b8552838352818520546101008701527f6379636c65416e63686f72446174654f66496e7465726573745061796d656e74855283835281852054610120870152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b855283835281852054610140870152726e6f6d696e616c496e7465726573745261746560681b8552838352818520546101608701526e1858d8dc9d5959125b9d195c995cdd608a1b855283835281852054610180870152731c1c995b5a5d5b511a5cd8dbdd5b9d105d12515160621b8552838352818520546101a08701527318dbdd995c9859d953d990dbdb1b185d195c985b60621b8552838352818520546101c0870152815190810182526a19dc9858d954195c9a5bd960aa1b80865284845291852054601881901c8252919094529181526101e09093019282019060101c60ff1660058111156112c757fe5b60058111156112d257fe5b81526a19dc9858d954195c9a5bd960aa1b6000908152600e8701602090815260409091205491019060081c60019081161461130e576000611311565b60015b151590528152604080516060810182527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561136f57fe5b600581111561137a57fe5b81527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000908152600e8701602090815260409091205491019060081c6001908116146113bc5760006113bf565b60015b151590528152604080516080810182527518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff16600581111561142257fe5b600581111561142d57fe5b8152602001600886600e0160007518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b815260200190815260200160002054901c60001c60ff16600181111561147657fe5b600181111561148157fe5b81527518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b6000908152600e870160209081526040909120549101906001908116146114c55760006114c8565b60015b15159052905292915050565b60006b636f6e74726163745479706560a01b821415611510575064656e756d7360d81b6000908152600e8301602052604090205460f81c6103a2565b6731b0b632b73230b960c11b821415611546575064656e756d7360d81b6000908152600e8301602052604090205460f01c6103a2565b6b636f6e7472616374526f6c6560a01b821415611580575064656e756d7360d81b6000908152600e8301602052604090205460e81c6103a2565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b8214156115c0575064656e756d7360d81b6000908152600e8301602052604090205460e01c6103a2565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b821415611603575064656e756d7360d81b6000908152600e8301602052604090205460d81c6103a2565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b821415610eca575064656e756d7360d81b6000908152600e8301602052604090205460d01c6103a2565b61164d611966565b604080516101408101825274465f636f6e7472616374506572666f726d616e636560581b6000908152600f85016020529190912054819060f81c600581111561169257fe5b600581111561169d57fe5b81526b465f7374617475734461746560a01b6000908152600f850160208181526040808420548286015272465f6e6f6e506572666f726d696e674461746560681b845282825280842054818601526d465f6d617475726974794461746560901b845282825280842054606086015270465f7465726d696e6174696f6e4461746560781b8452828252808420546080860152721197db9bdd1a5bdb985b141c9a5b98da5c185b606a1b84528282528084205460a0860152701197d858d8dc9d5959125b9d195c995cdd607a1b84528282528084205460c086015274465f6e6f6d696e616c496e7465726573745261746560581b84528282528084205460e08601527f465f696e7465726573745363616c696e674d756c7469706c69657200000000008452828252808420546101008601527f465f6e6f74696f6e616c5363616c696e674d756c7469706c69657200000000008452919052902054610120909101529050919050565b600072636f6e7472616374506572666f726d616e636560681b821415611855575072636f6e7472616374506572666f726d616e636560681b6000908152600f8301602052604090205460f81c6103a2565b74465f636f6e7472616374506572666f726d616e636560581b821415610eca575074465f636f6e7472616374506572666f726d616e636560581b6000908152600f8301602052604090205460f81c6103a2565b6118b0611ab9565b6040805160808101825260008082526020820181905290918201908152602001600090529392505050565b6000828152600e840160205260409020548114156118f85761190c565b6000828152600e8401602052604090208190555b505050565b6000828152600f8401602052604090205481141561192e5761190c565b6000918252600f929092016020526040902055565b6040805160608101909152600080825260208201905b8152600060209091015290565b60408051610140810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b60408051608081019091526000808252602082019081526020016000611959565b604080516102e08101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000801916815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001611a9a611943565b8152602001611aa7611943565b8152602001611ab46119ba565b905290565b60408051608081018252600080825260208201819052909182019081526020016000611ab4565b80356001600160a01b038116811461054b57600080fd5b8035801515811461054b57600080fd5b80356009811061054b57600080fd5b803561054b8161220f565b803561054b8161221c565b8035600d811061054b57600080fd5b80356014811061054b57600080fd5b8035600b811061054b57600080fd5b600060808284031215611b6a578081fd5b6040516080810181811067ffffffffffffffff82111715611b8757fe5b604052823581529050806020830135611b9f8161221c565b60208201526040830135611bb28161220f565b6040820152611bc360608401611af7565b60608201525092915050565b600060608284031215611be0578081fd5b6040516060810181811067ffffffffffffffff82111715611bfd57fe5b604052823581529050806020830135611c158161221c565b6020820152611c2660408401611af7565b60408201525092915050565b600060208284031215611c43578081fd5b5035919050565b60008060408385031215611c5c578081fd5b50508035926020909101359150565b600080828403610160811215611c7f578283fd5b8335925061014080601f1983011215611c96578283fd5b611c9f816121ca565b9150611cad60208601611b21565b825260408501356020830152606085013560408301526080850135606083015260a0850135608083015260c085013560a083015260e085013560c08301526101008086013560e084015261012080870135828501528287013581850152505050809150509250929050565b6000808284036103e0811215611d2c578283fd5b833592506103c0601f1982011215611d42578182fd5b50611d4e6102e06121ca565b611d5a60208501611b3b565b8152611d6860408501611b16565b6020820152611d7960608501611b2c565b6040820152611d8a60808501611b4a565b6060820152611d9b60a08501611b07565b6080820152611dac60c08501611b16565b60a082015260e084013560c0820152610100611dc9818601611ae0565b60e0830152610120611ddc818701611ae0565b828401526101409150611df0828701611ae0565b8184015250610160808601358284015261018091508186013581840152506101a080860135828401526101c091508186013581840152506101e08086013582840152610200915081860135818401525061022080860135828401526102409150818601358184015250610260808601358284015261028091508186013581840152506102a0611e8187828801611bcf565b82840152611e93876103008801611bcf565b9083015250611ea6856103608601611b59565b6102c0820152809150509250929050565b6001600160a01b03169052565b60098110611ece57fe5b9052565b611ece816121ee565b611ece816121fb565b600d8110611ece57fe5b60148110611ece57fe5b600b8110611ece57fe5b805182526020810151611f14816121fb565b60208301526040810151611f27816121ee565b60408301526060908101511515910152565b805182526020810151611f4b816121fb565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b90815260200190565b600061014082019050611f8e828451611edb565b6020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b60006103c082019050612006828451611eee565b60208301516120186020840182611ed2565b50604083015161202b6040840182611ee4565b50606083015161203e6060840182611ef8565b5060808301516120516080840182611ec4565b5060a083015161206460a0840182611ed2565b5060c083015160c083015260e083015161208160e0840182611eb7565b506101008084015161209582850182611eb7565b5050610120808401516120aa82850182611eb7565b50506101408381015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e0808401519083015261020080840151908301526102208084015190830152610240808401519083015261026080840151908301526102808084015161212d82850182611f39565b50506102a08301516121436102e0840182611f39565b506102c0830151612158610340840182611f02565b5092915050565b81518152602080830151908201526040820151608082019061218081612205565b6040830152606083015161219381612205565b8060608401525092915050565b608081016103a28284611f02565b606081016103a28284611f39565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156121e657fe5b604052919050565b600281106121f857fe5b50565b600681106121f857fe5b600581106121f857fe5b600281106121f857600080fd5b600681106121f857600080fdfea2646970667358221220f4cf7364699d28563230e62ec9ac247290b3b934a2632fd9820010b8675d66e864736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decodeAndGetCOLLAState(Asset storage)": {
        "details": "Decode and load the COLLAState of the asset"
      },
      "decodeAndGetCOLLATerms(Asset storage)": {
        "details": "Decode and loads COLLATerms"
      },
      "decodeAndGetFinalizedCOLLAState(Asset storage)": {
        "details": "Decode and load the finalized COLLAState of the asset"
      },
      "encodeAndSetCOLLAState(Asset storage,COLLAState)": {
        "details": "Tightly pack and store COLLAState"
      },
      "encodeAndSetCOLLATerms(Asset storage,COLLATerms)": {
        "details": "Tightly pack and store only non-zero overwritten terms (LifecycleTerms)"
      },
      "encodeAndSetFinalizedCOLLAState(Asset storage,COLLAState)": {
        "details": "Tightly pack and store finalized COLLAState"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "encodeAndSetCOLLATerms(Asset storage,COLLATerms)": {
        "notice": "All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}