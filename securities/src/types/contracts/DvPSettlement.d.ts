/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class DvPSettlement extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): DvPSettlement;
  methods: {
    createSettlement(
      creatorToken: string,
      creatorAmount: number | string,
      creatorBeneficiary: string,
      counterparty: string,
      counterpartyToken: string,
      counterpartyAmount: number | string,
      expirationDate: number | string
    ): TransactionObject<void>;

    executeSettlement(settlementId: number | string): TransactionObject<void>;

    expireSettlement(settlementId: number | string): TransactionObject<void>;

    lastSettlementId(): TransactionObject<string>;

    settlements(
      arg0: number | string
    ): TransactionObject<{
      creator: string;
      creatorToken: string;
      creatorAmount: string;
      creatorBeneficiary: string;
      counterparty: string;
      counterpartyToken: string;
      counterpartyAmount: string;
      expirationDate: string;
      status: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
    }>;
  };
  events: {
    SettlementExecuted: ContractEvent<{
      settlementId: string;
      executor: string;
      0: string;
      1: string;
    }>;
    SettlementExpired: ContractEvent<string>;
    SettlementInitialized: ContractEvent<{
      settlementId: string;
      settlement: {
        creator: string;
        creatorToken: string;
        creatorAmount: string;
        creatorBeneficiary: string;
        counterparty: string;
        counterpartyToken: string;
        counterpartyAmount: string;
        expirationDate: string;
        status: string;
      };
      0: string;
      1: {
        creator: string;
        creatorToken: string;
        creatorAmount: string;
        creatorBeneficiary: string;
        counterparty: string;
        counterpartyToken: string;
        counterpartyAmount: string;
        expirationDate: string;
        status: string;
      };
    }>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
