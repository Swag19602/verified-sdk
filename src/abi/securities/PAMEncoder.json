{
  "address": "0x130e98F2ddc7Dae83Dce82801D888A2cfa1dbc7e",
  "abi": [],
  "transactionHash": "0x493eebf3be79be3b7c4b135d43904140ad491751a37a2ef00e565664e1bafc27",
  "receipt": {
    "to": null,
    "from": "0xf6bb741F0C106a504943eaE908C3b67bcf4bF1CC",
    "contractAddress": "0x130e98F2ddc7Dae83Dce82801D888A2cfa1dbc7e",
    "transactionIndex": 10,
    "gasUsed": "2640684",
    "logsBloom": "0x
    "blockHash": "0xb0b88685c77ba35830381e1d241bd1e463314ae995760b02b559e7c5991b4c0b",
    "transactionHash": "0x493eebf3be79be3b7c4b135d43904140ad491751a37a2ef00e565664e1bafc27",
    "logs": [],
    "blockNumber": 7713004,
    "cumulativeGasUsed": "6221010",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "37e2a100a6f868553298dee57e286371",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"decodeAndGetFinalizedPAMState(Asset storage)\":{\"details\":\"Decode and load the finalized PAMState of the asset\"},\"decodeAndGetPAMState(Asset storage)\":{\"details\":\"Decode and load the PAMState of the asset\"},\"decodeAndGetPAMTerms(Asset storage)\":{\"details\":\"Decode and loads PAMTerms\"},\"encodeAndSetFinalizedPAMState(Asset storage,PAMState)\":{\"details\":\"Tightly pack and store finalized PAMState\"},\"encodeAndSetPAMState(Asset storage,PAMState)\":{\"details\":\"Tightly pack and store PAMState\"},\"encodeAndSetPAMTerms(Asset storage,PAMTerms)\":{\"details\":\"Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"encodeAndSetPAMTerms(Asset storage,PAMTerms)\":{\"notice\":\"All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Core/PAM/PAMEncoder.sol\":\"PAMEncoder\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ACTUS/Core/ACTUSConstants.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @title ACTUSConstants\\n * @notice Contains all type definitions for ACTUS. See ACTUS-Dictionary for definitions\\n */\\ncontract ACTUSConstants {\\n\\n    // constants used throughout\\n    uint256 constant public PRECISION = 18;\\n    int256 constant public ONE_POINT_ZERO = 1 * 10 ** 18;\\n    uint256 constant public MAX_CYCLE_SIZE = 120;\\n    uint256 constant public MAX_EVENT_SCHEDULE_SIZE = 120;\\n}\\n\",\"keccak256\":\"0x1568471e72800002ad945bf084f96368f5dfb597105f2e3f11534905abda9495\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/ACTUSTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n/**\\n * Commit: https://github.com/atpar/actus-dictionary/commit/b85b9b378967de6bfc4d8b6687b520c48bce9890\\n * Date: 2020-10-06\\n */\\n\\n// IPS\\nenum P {D, W, M, Q, H, Y} // P=[D=Days, W=Weeks, M=Months, Q=Quarters, H=Halfyear, Y=Year]\\nenum S {LONG, SHORT} // S=[+=long stub,- short stub, {} if S empty then - for short stub]\\nstruct IPS {\\n    uint256 i; // I=Integer\\n    P p;\\n    S s;\\n    bool isSet;\\n}\\n\\nstruct IP {\\n    uint256 i;\\n    P p;\\n    bool isSet;\\n}\\n\\n// Number of enum options should be limited to 256 (8 bits) such that 255 enums can be packed fit into 256 bits (bytes32)\\nenum BusinessDayConvention {NOS, SCF, SCMF, CSF, CSMF, SCP, SCMP, CSP, CSMP}\\nenum Calendar {NC, MF}\\nenum ContractPerformance {PF, DL, DQ, DF, MD, TD}\\nenum ContractReferenceType {CNT, CID, MOC, EID, CST}\\nenum ContractReferenceRole {UDL, FIL, SEL, COVE, COVI}\\nenum ContractRole {RPA, RPL, RFL, PFL, RF, PF, BUY, SEL, COL, CNO, UDL, UDLP, UDLM}\\nenum ContractType {PAM, ANN, NAM, LAM, LAX, CLM, UMP, CSH, STK, COM, SWAPS, SWPPV, FXOUT, CAPFL, FUTUR, OPTNS, CEG, CEC, CERTF, COLLA}\\nenum CouponType {NOC, FIX, FCN, PRF}\\nenum CyclePointOfInterestPayment {B, E}\\nenum CyclePointOfRateReset {B, E}\\nenum DayCountConvention {AA, A360, A365, _30E360ISDA, _30E360, _28E336, ONE, OBYT, HRSAA, MINAA, SECAA}\\nenum EndOfMonthConvention {SD, EOM}\\n//               0   1    2    3    4   5   6   7   8   9  10    11  12   13   14   15   16   17   18   19   20   21   22   23   24   25  26  27    28   29  30  31  32  33\\nenum EventType {NE, CE, ISS, IED, PRD, FP, PR, PD, PY, PP, IP, IPCI, RRF, RR, DIF, DIX, DIP, COF, COP, REF, REX, REP, SPF, SPS, EXO, EXE, ST, SC, IPCB, PRF, MC, TD, MD, AD}\\nenum FeeBasis {A, N}\\n// enum GuaranteedExposure {NO, NI, MV} // not implemented\\n// enum InterestCalculationBase {NT, NTIED, NTL} // not implemented\\n// enum PenaltyType {O, A, N, I}\\n// enum PrepaymentEffect {N, A, M} // not implemented\\nenum RedeemableByIssuer {Y, N}\\nenum ScalingEffect {_000, I00, _0N0, IN0}\\n// enum Seniority {S, J} // not implemented\\n\\nstruct ContractReference {\\n    bytes32 object;\\n    bytes32 object2; // workaround for solc bug (replace object and object2 with single bytes attribute)\\n    ContractReferenceType _type;\\n    ContractReferenceRole role;\\n}\\n\\nstruct UnderlyingState {\\n    int256 exerciseAmount;\\n    bool isSet;\\n}\\n\\nstruct ANNState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n    int256 nextPrincipalRedemptionPayment;\\n}\\n\\nstruct CECState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n\\n    int256 feeAccrued;\\n    int256 exerciseAmount;\\n}\\n\\nstruct CEGState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    int256 feeAccrued;\\n    int256 exerciseAmount;\\n}\\n\\nstruct CERTFState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastCouponFixingDate;\\n\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n}\\n\\nstruct PAMState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n}\\n\\nstruct STKState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastDividendFixingDate;\\n    // uint256 dividendFixingDate; // not implemented\\n    // uint256 dividendExDate; // not implemented\\n    // uint256 dividendPaymentDate; // not implemented\\n    // uint256 splitSettlementDate; // not implemented\\n    // uint256 redemptionExDate; // not implemented\\n    // uint256 redemptionPaymentDate; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n    int256 dividendPaymentAmount;\\n    int256 splitRatio;\\n}\\n\\nstruct COLLAState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    int256 accruedInterest;\\n    int256 nominalInterestRate;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n}\\n\\nstruct ANNTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // InterestCalculationBase interestCalculationBase; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 ammortizationDate; // not implemented\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    // uint256 cycleAnchorDateOfInterestCalculationBase; // not implemented\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    uint256 cycleAnchorDateOfPrincipalRedemption;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 nextPrincipalRedemptionPayment;\\n    // int256 coverageOfCreditEnhancement;\\n    // int256 interestCalculationBaseAmount; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    IPS cycleOfPrincipalRedemption;\\n    // IPS cycleOfOptionality; // not implemented\\n    // IPS cycleOfInterestCalculationBase; // not implemented\\n}\\n\\nstruct CECTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ContractPerformance creditEventTypeCovered;\\n    FeeBasis feeBasis;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    // uint256 exerciseDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 feeRate;\\n    // int256 exerciseAmount; // state only\\n    int256 coverageOfCreditEnhancement;\\n\\n    // IP settlementPeriod; // not implemented\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CEGTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    ContractPerformance creditEventTypeCovered;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 exerciseDate; // state only\\n    // uint256 nonPerformingDate; // state only\\n\\n    int256 notionalPrincipal;\\n    // int256 delinquencyRate; not implemented\\n    int256 feeAccrued;\\n    int256 feeRate;\\n    int256 priceAtPurchaseDate;\\n    int256 coverageOfCreditEnhancement;\\n    // int256 exerciseAmount; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP settlementPeriod; // not implemented\\n\\n    IPS cycleOfFee;\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CERTFTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    CouponType couponType;\\n    // ContractPerformance contractPerformance; state only\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 issueDate;\\n    // uint256 lastCouponFixingDate; // state only\\n    uint256 cycleAnchorDateOfRedemption;\\n    uint256 cycleAnchorDateOfTermination;\\n    uint256 cycleAnchorDateOfCoupon;\\n\\n    int256 nominalPrice;\\n    int256 issuePrice;\\n    // int256 delinquencyRate; // not implemented\\n    int256 quantity;\\n    // int256 exerciseQuantity; // state only\\n    // int256 exerciseQuantityOrdered; // state only\\n    // int256 marginFactor;  // state only\\n    // int256 adjustmentFactor; // state only\\n    int256 denominationRatio;\\n    int256 couponRate;\\n    // int256 exerciseAmount; // state only\\n    // int256 couponAmountFixed; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    IP settlementPeriod;\\n    IP fixingPeriod;\\n    IP redemptionRecordPeriod;\\n\\n    IPS cycleOfRedemption;\\n    IPS cycleOfTermination;\\n    IPS cycleOfCoupon;\\n\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct PAMTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // CyclePointOfInterestPayment cyclePointOfInterestPayment; // not implemented\\n    // CyclePointOfRateReset cyclePointOfRateReset; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; // not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    // IPS cycleOfOptionality; // not implemented\\n}\\n\\nstruct STKTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    RedeemableByIssuer redeemableByIssuer;\\n    // Seniority seniority; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 issueDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfDividend;\\n\\n    int256 nominalPrice;\\n    int256 notionalPrincipal;\\n    int256 issuePrice;\\n    int256 quantity;\\n    int256 priceAtPurchaseDate;\\n    int256 redemptionPrice;\\n    int256 priceAtTerminationDate;\\n\\n    IP dividendRecordPeriod;\\n    IP dividendPaymentPeriod;\\n    IP splitSettlementPeriod;\\n    IP redemptionRecordPeriod;\\n    IP redemptionPaymentPeriod;\\n\\n    IPS cycleOfDividend;\\n}\\n\\nstruct COLLATerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    // ContractPerformance contractPerformance; // state only\\n\\n    bytes32 marketObjectCodeOfCollateral;\\n\\n    address currency;\\n    address settlementCurrency;\\n    address collateralCurrency;\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 premiumDiscountAtIED;\\n    int256 coverageOfCollateral;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n\\n    IPS cycleOfInterestPayment;\\n}\\n\",\"keccak256\":\"0x79bdd18aa3c6bdb9bb27e50b140bf43977ced292fdf89c2b2a237a0ec6c719fb\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/BaseRegistryStorage.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Conversions.sol\\\";\\nimport \\\"../SharedTypes.sol\\\";\\nimport \\\"./Schedule/ScheduleEncoder.sol\\\";\\n\\n\\nstruct Settlement {\\n    bool isSettled;\\n    int256 payoff;\\n}\\n\\nstruct Asset {\\n    // boolean indicating that asset exists / is registered\\n    bool isSet;\\n    // address of the ACTUS Engine used for computing the State and the Payoff of the asset\\n    address engine;\\n    // address of the Asset Actor which is allowed to update the State of the asset\\n    address actor;\\n    // address of the Extension which is able to generate unscheduled events for the asset\\n    address extension;\\n    // schedule of the asset\\n    Schedule schedule;\\n    // ownership of the asset\\n    AssetOwnership ownership;\\n    // method level access control - stores which address can a specific method\\n    // method signature => address => has access\\n    mapping (bytes4 => mapping (address => bool)) access;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedTerms;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedState;\\n    // indicates whether a specific event was settled\\n    mapping (bytes32 => Settlement) settlement;\\n}\\n\\n/**\\n * @title BaseRegistryStorage\\n * @notice Describes the storage of the AssetRegistry\\n * Contains getter and setter methods for encoding, decoding data to optimize gas cost.\\n * Circumvents storing default values by relying on the characteristic of mappings returning zero for not set values.\\n */\\nabstract contract BaseRegistryStorage {\\n\\n    using ScheduleEncoder for Asset;\\n\\n    // AssetId => Asset\\n    mapping (bytes32 => Asset) internal assets;\\n}\\n\",\"keccak256\":\"0x3e8beac681f832d8b6dcf0a1be328ae129c7d71e7ab75ebe2d0809edcc813b46\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Schedule/ScheduleEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary ScheduleEncoder {\\n\\n    function encodeAndSetSchedule(Asset storage asset, bytes32[] memory schedule) internal {\\n        for (uint256 i = 0; i < schedule.length; i++) {\\n            if (schedule[i] == bytes32(0)) break;\\n            asset.schedule.events[i] = schedule[i];\\n            asset.schedule.length = i + 1;\\n        }\\n    }\\n\\n    function decodeAndGetSchedule(Asset storage asset) internal view returns (bytes32[] memory) {\\n        bytes32[] memory schedule = new bytes32[](asset.schedule.length);\\n\\n        for (uint256 i = 0; i < asset.schedule.length; i++) {\\n            schedule[i] = asset.schedule.events[i];\\n        }\\n\\n        return schedule;\\n    }\\n}\\n\",\"keccak256\":\"0x420da04c67322d387c9b0fbeb00accc59a63fb9c10cb7b4c21f955792c4ad236\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/Conversions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SharedTypes.sol\\\";\\n\\n\\ncontract Conversions {\\n\\n    function encodeCollateralAsObject(address collateralToken, uint256 collateralAmount)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(collateralToken))) << 96 | bytes32(uint256(uint96(collateralAmount)));\\n    }\\n\\n    function decodeCollateralObject(bytes32 object)\\n        public\\n        pure\\n        returns (address, uint256)\\n    {\\n        return (\\n            address(uint160(uint256(object >> 96))),\\n            uint256(uint96(uint256(object)))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcc273a4272ffd03ef3f6fd329590a25049482661820ee4dcc953d28eeb4a9a95\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/SharedTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../ACTUS/Core/ACTUSTypes.sol\\\";\\nimport \\\"../../ACTUS/Core/ACTUSConstants.sol\\\";\\n\\n\\nstruct AssetOwnership {\\n    // account which has to fulfill all obligations for the creator side\\n    address creatorObligor;\\n    // account to which all cashflows to which the creator is the beneficiary are forwarded\\n    address creatorBeneficiary;\\n    // account which has to fulfill all obligations for the counterparty\\n    address counterpartyObligor;\\n    // account to which all cashflows to which the counterparty is the beneficiary are forwarded\\n    address counterpartyBeneficiary;\\n}\\n\\n// scheduleTime and EventType are tightly packed and encoded as bytes32\\nstruct Schedule {\\n    // schedule times of cyclic events (used if no schedule is set)\\n    mapping(EventType => uint256) lastScheduleTimeOfCyclicEvent;\\n    // index of event => bytes32 encoded event\\n    mapping(uint256 => bytes32) events;\\n    // the length of the schedule, used to determine the end of the schedule\\n    uint256 length;\\n    // pointer to index of the next event in the schedule\\n    uint256 nextScheduleIndex;\\n    // last event which could not be settled\\n    bytes32 pendingEvent;\\n    // last non-cyclic event which was processed (used if no schedule is set)\\n    bytes32 lastNonCyclicEvent;\\n}\\n\",\"keccak256\":\"0xadbb252a62b8641f01338ce1650d5d59ccc4a6f3f0e62c49e7b16bf51d2a46b8\",\"license\":\"Apache-2.0\"},\"contracts/Core/PAM/PAMEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Base/SharedTypes.sol\\\";\\nimport \\\"../Base/AssetRegistry/BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary PAMEncoder {\\n\\n    function storeInPackedTerms(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedTerms[attributeKey] == value) return;\\n        asset.packedTerms[attributeKey] = value;\\n    }\\n\\n    function storeInPackedState(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedState[attributeKey] == value) return;\\n        asset.packedState[attributeKey] = value;\\n    }\\n    \\n    /**\\n     * @dev Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\\n     * @notice All non zero values of the overwrittenTerms object are stored.\\n     * It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\\n     */\\n    function encodeAndSetPAMTerms(Asset storage asset, PAMTerms memory terms) external {\\n        storeInPackedTerms(\\n            asset,\\n            \\\"enums\\\",\\n            bytes32(uint256(uint8(terms.contractType))) << 248 |\\n            bytes32(uint256(uint8(terms.calendar))) << 240 |\\n            bytes32(uint256(uint8(terms.contractRole))) << 232 |\\n            bytes32(uint256(uint8(terms.dayCountConvention))) << 224 |\\n            bytes32(uint256(uint8(terms.businessDayConvention))) << 216 |\\n            bytes32(uint256(uint8(terms.endOfMonthConvention))) << 208 |\\n            bytes32(uint256(uint8(terms.scalingEffect))) << 200 |\\n            bytes32(uint256(uint8(terms.feeBasis))) << 192\\n        );\\n\\n        storeInPackedTerms(asset, \\\"currency\\\", bytes32(uint256(terms.currency) << 96));\\n        storeInPackedTerms(asset, \\\"settlementCurrency\\\", bytes32(uint256(terms.settlementCurrency) << 96));\\n\\n        storeInPackedTerms(asset, \\\"marketObjectCodeRateReset\\\", bytes32(terms.marketObjectCodeRateReset));\\n\\n        storeInPackedTerms(asset, \\\"statusDate\\\", bytes32(terms.statusDate));\\n        storeInPackedTerms(asset, \\\"initialExchangeDate\\\", bytes32(terms.initialExchangeDate));\\n        storeInPackedTerms(asset, \\\"maturityDate\\\", bytes32(terms.maturityDate));\\n        storeInPackedTerms(asset, \\\"issueDate\\\", bytes32(terms.issueDate));\\n        storeInPackedTerms(asset, \\\"purchaseDate\\\", bytes32(terms.purchaseDate));\\n        storeInPackedTerms(asset, \\\"capitalizationEndDate\\\", bytes32(terms.capitalizationEndDate));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfInterestPayment\\\", bytes32(terms.cycleAnchorDateOfInterestPayment));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfRateReset\\\", bytes32(terms.cycleAnchorDateOfRateReset));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfScalingIndex\\\", bytes32(terms.cycleAnchorDateOfScalingIndex));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfFee\\\", bytes32(terms.cycleAnchorDateOfFee));\\n\\n        storeInPackedTerms(asset, \\\"notionalPrincipal\\\", bytes32(terms.notionalPrincipal));\\n        storeInPackedTerms(asset, \\\"nominalInterestRate\\\", bytes32(terms.nominalInterestRate));\\n        storeInPackedTerms(asset, \\\"accruedInterest\\\", bytes32(terms.accruedInterest));\\n        storeInPackedTerms(asset, \\\"rateMultiplier\\\", bytes32(terms.rateMultiplier));\\n        storeInPackedTerms(asset, \\\"rateSpread\\\", bytes32(terms.rateSpread));\\n        storeInPackedTerms(asset, \\\"nextResetRate\\\", bytes32(terms.nextResetRate));\\n        storeInPackedTerms(asset, \\\"feeRate\\\", bytes32(terms.feeRate));\\n        storeInPackedTerms(asset, \\\"feeAccrued\\\", bytes32(terms.feeAccrued));\\n        storeInPackedTerms(asset, \\\"premiumDiscountAtIED\\\", bytes32(terms.premiumDiscountAtIED));\\n        storeInPackedTerms(asset, \\\"priceAtPurchaseDate\\\", bytes32(terms.priceAtPurchaseDate));\\n        storeInPackedTerms(asset, \\\"priceAtTerminationDate\\\", bytes32(terms.priceAtTerminationDate));\\n        storeInPackedTerms(asset, \\\"lifeCap\\\", bytes32(terms.lifeCap));\\n        storeInPackedTerms(asset, \\\"lifeFloor\\\", bytes32(terms.lifeFloor));\\n        storeInPackedTerms(asset, \\\"periodCap\\\", bytes32(terms.periodCap));\\n        storeInPackedTerms(asset, \\\"periodFloor\\\", bytes32(terms.periodFloor));\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"gracePeriod\\\",\\n            bytes32(uint256(terms.gracePeriod.i)) << 24 |\\n            bytes32(uint256(terms.gracePeriod.p)) << 16 |\\n            bytes32(uint256((terms.gracePeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"delinquencyPeriod\\\",\\n            bytes32(uint256(terms.delinquencyPeriod.i)) << 24 |\\n            bytes32(uint256(terms.delinquencyPeriod.p)) << 16 |\\n            bytes32(uint256((terms.delinquencyPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfInterestPayment\\\",\\n            bytes32(uint256(terms.cycleOfInterestPayment.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfInterestPayment.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfInterestPayment.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfInterestPayment.isSet) ? 1 : 0))\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfRateReset\\\",\\n            bytes32(uint256(terms.cycleOfRateReset.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfRateReset.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfRateReset.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfRateReset.isSet) ? 1 : 0))\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfScalingIndex\\\",\\n            bytes32(uint256(terms.cycleOfScalingIndex.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfScalingIndex.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfScalingIndex.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfScalingIndex.isSet) ? 1 : 0))\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfFee\\\",\\n            bytes32(uint256(terms.cycleOfFee.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfFee.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfFee.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfFee.isSet) ? 1 : 0))\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and loads PAMTerms\\n     */\\n    function decodeAndGetPAMTerms(Asset storage asset) external view returns (PAMTerms memory) {\\n        return PAMTerms(\\n            ContractType(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248))),\\n            Calendar(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240))),\\n            ContractRole(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232))),\\n            DayCountConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224))),\\n            BusinessDayConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216))),\\n            EndOfMonthConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208))),\\n            ScalingEffect(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200))),\\n            FeeBasis(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 192))),\\n\\n            address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96)),\\n            address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96)),\\n\\n            asset.packedTerms[\\\"marketObjectCodeRateReset\\\"],\\n\\n            uint256(asset.packedTerms[\\\"statusDate\\\"]),\\n            uint256(asset.packedTerms[\\\"initialExchangeDate\\\"]),\\n            uint256(asset.packedTerms[\\\"maturityDate\\\"]),\\n            uint256(asset.packedTerms[\\\"issueDate\\\"]),\\n            uint256(asset.packedTerms[\\\"purchaseDate\\\"]),\\n            uint256(asset.packedTerms[\\\"capitalizationEndDate\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfInterestPayment\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfRateReset\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfScalingIndex\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfFee\\\"]),\\n\\n            int256(asset.packedTerms[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedTerms[\\\"nominalInterestRate\\\"]),\\n            int256(asset.packedTerms[\\\"accruedInterest\\\"]),\\n            int256(asset.packedTerms[\\\"rateMultiplier\\\"]),\\n            int256(asset.packedTerms[\\\"rateSpread\\\"]),\\n            int256(asset.packedTerms[\\\"nextResetRate\\\"]),\\n            int256(asset.packedTerms[\\\"feeRate\\\"]),\\n            int256(asset.packedTerms[\\\"feeAccrued\\\"]),\\n            int256(asset.packedTerms[\\\"premiumDiscountAtIED\\\"]),\\n            int256(asset.packedTerms[\\\"priceAtPurchaseDate\\\"]),\\n            int256(asset.packedTerms[\\\"priceAtTerminationDate\\\"]),\\n            int256(asset.packedTerms[\\\"lifeCap\\\"]),\\n            int256(asset.packedTerms[\\\"lifeFloor\\\"]),\\n            int256(asset.packedTerms[\\\"periodCap\\\"]),\\n            int256(asset.packedTerms[\\\"periodFloor\\\"]),\\n            \\n            IP(\\n                uint256(asset.packedTerms[\\\"gracePeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"gracePeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"gracePeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfInterestPayment\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfInterestPayment\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfInterestPayment\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfInterestPayment\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfRateReset\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfRateReset\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfRateReset\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfRateReset\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfScalingIndex\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfScalingIndex\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfScalingIndex\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfScalingIndex\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfFee\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfFee\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfFee\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfFee\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            )\\n        );\\n    }\\n\\n    function decodeAndGetEnumValueForPAMTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractType\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"calendar\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240));\\n        } else if (attributeKey == bytes32(\\\"contractRole\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232));\\n        } else if (attributeKey == bytes32(\\\"dayCountConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224));\\n        } else if (attributeKey == bytes32(\\\"businessDayConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216));\\n        } else if (attributeKey == bytes32(\\\"endOfMonthConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208));\\n        } else if (attributeKey == bytes32(\\\"scalingEffect\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 200));\\n        } else if (attributeKey == bytes32(\\\"feeBasis\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 192));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetAddressValueForPAMTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (address)\\n    {\\n        if (attributeKey == bytes32(\\\"currency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96));\\n        } else if (attributeKey == bytes32(\\\"settlementCurrency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96));\\n        } else {\\n            return address(0);\\n        }   \\n    }\\n\\n    function decodeAndGetBytes32ValueForPAMTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return asset.packedTerms[attributeKey];\\n    }\\n\\n    function decodeAndGetUIntValueForPAMTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForPAMTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetPeriodValueForPAMTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IP memory)\\n    {\\n        if (\\n            attributeKey == bytes32(\\\"gracePeriod\\\")\\n            || attributeKey == bytes32(\\\"delinquencyPeriod\\\")\\n        ) {\\n            return IP(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                (asset.packedTerms[attributeKey] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IP(0, P(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetCycleValueForPAMTermsAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IPS memory)\\n    {\\n        if (\\n            attributeKey == bytes32(\\\"cycleOfInterestPayment\\\")\\n            || attributeKey == bytes32(\\\"cycleOfRateReset\\\")\\n            || attributeKey == bytes32(\\\"cycleOfScalingIndex\\\")\\n            || attributeKey == bytes32(\\\"cycleOfFee\\\")\\n        ) {\\n            return IPS(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[attributeKey] >> 8))),\\n                (asset.packedTerms[attributeKey] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IPS(0, P(0), S(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetContractReferenceValueForPAMTermsAttribute(Asset storage /* asset */, bytes32 /* attributeKey */)\\n        external\\n        pure\\n        returns (ContractReference memory)\\n    {\\n        return ContractReference(\\n            bytes32(0),\\n            bytes32(0),\\n            ContractReferenceType(0),\\n            ContractReferenceRole(0)\\n        );\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store PAMState\\n     */\\n    function encodeAndSetPAMState(Asset storage asset, PAMState memory state) external {\\n        storeInPackedState(asset, \\\"contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"feeAccrued\\\", bytes32(state.feeAccrued));\\n        storeInPackedState(asset, \\\"nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store finalized PAMState\\n     */\\n    function encodeAndSetFinalizedPAMState(Asset storage asset, PAMState memory state) external {\\n        storeInPackedState(asset, \\\"F_contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"F_statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"F_nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"F_maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"F_terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"F_notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"F_accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"F_feeAccrued\\\", bytes32(state.feeAccrued));\\n        storeInPackedState(asset, \\\"F_nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"F_interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"F_notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n    }\\n\\n    /**\\n     * @dev Decode and load the PAMState of the asset\\n     */\\n    function decodeAndGetPAMState(Asset storage asset)\\n        external\\n        view\\n        returns (PAMState memory)\\n    {\\n        return PAMState(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"statusDate\\\"]),\\n            uint256(asset.packedState[\\\"nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"terminationDate\\\"]),\\n\\n            int256(asset.packedState[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"feeAccrued\\\"]),\\n            int256(asset.packedState[\\\"nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"notionalScalingMultiplier\\\"])\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and load the finalized PAMState of the asset\\n     */\\n    function decodeAndGetFinalizedPAMState(Asset storage asset)\\n        external\\n        view\\n        returns (PAMState memory)\\n    {\\n        return PAMState(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"F_statusDate\\\"]),\\n            uint256(asset.packedState[\\\"F_nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"F_maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"F_terminationDate\\\"]),\\n\\n            int256(asset.packedState[\\\"F_notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"F_accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"F_feeAccrued\\\"]),\\n            int256(asset.packedState[\\\"F_nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"F_interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"F_notionalScalingMultiplier\\\"])\\n        );\\n    }\\n\\n    function decodeAndGetEnumValueForPAMStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"F_contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetUIntValueForPAMStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedState[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForPAMStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedState[attributeKey]);\\n    }\\n}\",\"keccak256\":\"0x2d9dd58b61566b2fbd15d297f544f2e6ae67f6d82a34401a0f732e1dff30afb5\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x612ed0610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c806369a71f91116100ac57806381a14c5c1161007b57806381a14c5c1461025e578063c6e40d321461011a578063c84d7f121461027e578063db779e5614610183578063f21917af1461029e57610115565b806369a71f911461020b57806377f76dc81461022b5780637a56fcc71461023e5780637f66c64e1461018357610115565b806334e2040d116100e857806334e2040d14610196578063379fb223146101b65780633d37fbe9146101c95780635276dec1146101eb57610115565b80630383a9b61461011a57806307db5500146101435780630e2c8ca5146101635780631707b04a14610183575b600080fd5b61012d610128366004612695565b6102be565b60405161013a9190612ade565b60405180910390f35b61015661015136600461267d565b6102d6565b60405161013a9190612b44565b610176610171366004612695565b61049b565b60405161013a9190612aca565b61012d610191366004612695565b61052b565b6101a96101a4366004612695565b610541565b60405161013a9190612ae7565b6101566101c436600461267d565b610574565b8180156101d557600080fd5b506101e96101e43660046126b6565b610752565b005b8180156101f757600080fd5b506101e9610206366004612770565b610921565b61021e610219366004612695565b6110fc565b60405161013a9190612e2d565b61021e610239366004612695565b6111a0565b81801561024a57600080fd5b506101e96102593660046126b6565b611382565b61027161026c366004612695565b611529565b60405161013a9190612b36565b61029161028c366004612695565b611611565b60405161013a9190612b28565b6102b16102ac36600461267d565b61175e565b60405161013a9190612bc8565b6000818152600f830160205260409020545b92915050565b6102de6122ee565b604080516101608101825272636f6e7472616374506572666f726d616e636560681b6000908152600f85016020529190912054819060f81c600581111561032157fe5b600581111561032c57fe5b8152697374617475734461746560b01b6000908152600f8501602081815260408084205482860152706e6f6e506572666f726d696e674461746560781b845282825280842054818601526b6d617475726974794461746560a01b84528282528084205460608601526e7465726d696e6174696f6e4461746560881b8452828252808420546080860152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b84528282528084205460a08601526e1858d8dc9d5959125b9d195c995cdd608a1b84528282528084205460c0860152691999595058d8dc9d595960b21b84528282528084205460e0860152726e6f6d696e616c496e7465726573745261746560681b8452828252808420546101008601527834b73a32b932b9ba29b1b0b634b733a6bab63a34b83634b2b960391b845282825280842054610120860152783737ba34b7b730b629b1b0b634b733a6bab63a34b83634b2b960391b84529190529020546101409091015290505b919050565b60006763757272656e637960c01b8214156104d657506763757272656e637960c01b6000908152600e8301602052604090205460601c6102d0565b71736574746c656d656e7443757272656e637960701b821415610523575071736574746c656d656e7443757272656e637960701b6000908152600e8301602052604090205460601c6102d0565b5060006102d0565b6000908152600e91909101602052604090205490565b610549612349565b6040805160808101825260008082526020820181905290918201908152602001600090529392505050565b61057c6122ee565b604080516101608101825274465f636f6e7472616374506572666f726d616e636560581b6000908152600f85016020529190912054819060f81c60058111156105c157fe5b60058111156105cc57fe5b81526b465f7374617475734461746560a01b6000908152600f850160208181526040808420548286015272465f6e6f6e506572666f726d696e674461746560681b845282825280842054818601526d465f6d617475726974794461746560901b845282825280842054606086015270465f7465726d696e6174696f6e4461746560781b8452828252808420546080860152721197db9bdd1a5bdb985b141c9a5b98da5c185b606a1b84528282528084205460a0860152701197d858d8dc9d5959125b9d195c995cdd607a1b84528282528084205460c08601526b1197d999595058d8dc9d595960a21b84528282528084205460e086015274465f6e6f6d696e616c496e7465726573745261746560581b8452828252808420546101008601527f465f696e7465726573745363616c696e674d756c7469706c69657200000000008452828252808420546101208601527f465f6e6f74696f6e616c5363616c696e674d756c7469706c69657200000000008452919052902054610140909101529050919050565b61078b8274465f636f6e7472616374506572666f726d616e636560581b60f88460000151600581111561078157fe5b60ff16901b612286565b6107ac826b465f7374617475734461746560a01b836020015160001b612286565b6107d48272465f6e6f6e506572666f726d696e674461746560681b836040015160001b612286565b6107f7826d465f6d617475726974794461746560901b836060015160001b612286565b61081d8270465f7465726d696e6174696f6e4461746560781b836080015160001b612286565b61084582721197db9bdd1a5bdb985b141c9a5b98da5c185b606a1b8360a0015160001b612286565b61086b82701197d858d8dc9d5959125b9d195c995cdd607a1b8360c0015160001b612286565b61088c826b1197d999595058d8dc9d595960a21b8360e0015160001b612286565b6108b78274465f6e6f6d696e616c496e7465726573745261746560581b83610100015160001b612286565b6108ea827f465f696e7465726573745363616c696e674d756c7469706c696572000000000083610120015160001b612286565b61091d827f465f6e6f74696f6e616c5363616c696e674d756c7469706c696572000000000083610140015160001b612286565b5050565b610a078264656e756d7360d81b60c08460e00151600181111561094057fe5b60ff1660001b901b60c88560c00151600381111561095a57fe5b60ff1660001b901b60d08660a00151600181111561097457fe5b60ff1660001b901b60d88760800151600881111561098e57fe5b60ff1660001b901b60e08860600151600a8111156109a857fe5b60ff1660001b901b60e88960400151600c8111156109c257fe5b60ff1660001b901b60f08a6020015160018111156109dc57fe5b60ff1660001b901b60f88b6000015160138111156109f657fe5b60ff16901b171717171717176122bc565b610a32826763757272656e637960c01b60608461010001516001600160a01b0316901b60001b6122bc565b610a678271736574746c656d656e7443757272656e637960701b60608461012001516001600160a01b0316901b60001b6122bc565b610a9382781b585c9ad95d13d89a9958dd10dbd91954985d1954995cd95d603a1b8361014001516122bc565b610ab382697374617475734461746560b01b83610160015160001b6122bc565b610adc8272696e697469616c45786368616e67654461746560681b83610180015160001b6122bc565b610afe826b6d617475726974794461746560a01b836101a0015160001b6122bc565b610b1d826869737375654461746560b81b836101c0015160001b6122bc565b610b3f826b70757263686173654461746560a01b836101e0015160001b6122bc565b610b6a82746361706974616c697a6174696f6e456e644461746560581b83610200015160001b6122bc565b610b9d827f6379636c65416e63686f72446174654f66496e7465726573745061796d656e7483610220015160001b6122bc565b610bd0827f6379636c65416e63686f72446174654f6652617465526573657400000000000083610240015160001b6122bc565b610c03827f6379636c65416e63686f72446174654f665363616c696e67496e64657800000083610260015160001b6122bc565b610c2d82736379636c65416e63686f72446174654f6646656560601b83610280015160001b6122bc565b610c5482701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b836102a0015160001b6122bc565b610c7d82726e6f6d696e616c496e7465726573745261746560681b836102c0015160001b6122bc565b610ca2826e1858d8dc9d5959125b9d195c995cdd608a1b836102e0015160001b6122bc565b610cc6826d3930ba32a6bab63a34b83634b2b960911b83610300015160001b6122bc565b610ce682691c985d1954dc1c99585960b21b83610320015160001b6122bc565b610d09826c6e65787452657365745261746560981b83610340015160001b6122bc565b610d2682666665655261746560c81b83610360015160001b6122bc565b610d4682691999595058d8dc9d595960b21b83610380015160001b6122bc565b610d7082731c1c995b5a5d5b511a5cd8dbdd5b9d105d12515160621b836103a0015160001b6122bc565b610d9982727072696365417450757263686173654461746560681b836103c0015160001b6122bc565b610dc58275707269636541745465726d696e6174696f6e4461746560501b836103e0015160001b6122bc565b610de2826606c6966654361760cc1b83610400015160001b6122bc565b610e0182683634b332a33637b7b960b91b83610420015160001b6122bc565b610e2082680706572696f644361760bc1b83610440015160001b6122bc565b610e41826a3832b934b7b2233637b7b960a91b83610460015160001b6122bc565b610ea0826a19dc9858d954195c9a5bd960aa1b600884610480015160400151610e6b576000610e6e565b60015b60ff1660001b901b6010856104800151602001516005811115610e8d57fe5b6104808701515160181b911b17176122bc565b610f05827019195b1a5b9c5d595b98de54195c9a5bd9607a1b6008846104a0015160400151610ed0576000610ed3565b60015b60ff1660001b901b6010856104a00151602001516005811115610ef257fe5b6104a08701515160181b911b17176122bc565b610f88827518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b836104c0015160600151610f38576000610f3b565b60015b60ff1660001b6008856104c00151604001516001811115610f5857fe5b60001b901b6010866104c00151602001516005811115610f7457fe5b6104c08801515160181b911b1717176122bc565b611005826f18de58db1953d994985d1954995cd95d60821b836104e0015160600151610fb5576000610fb8565b60015b60ff1660001b6008856104e00151604001516001811115610fd557fe5b60001b901b6010866104e00151602001516005811115610ff157fe5b6104e08801515160181b911b1717176122bc565b61108582720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b83610500015160600151611035576000611038565b60015b60ff1660001b600885610500015160400151600181111561105557fe5b60001b901b601086610500015160200151600581111561107157fe5b6105008801515160181b911b1717176122bc565b61091d82696379636c654f6646656560b01b836105200151606001516110ac5760006110af565b60015b60ff1660001b60088561052001516040015160018111156110cc57fe5b60001b901b60108661052001516020015160058111156110e857fe5b6105208801515160181b911b1717176122bc565b600072636f6e7472616374506572666f726d616e636560681b82141561114d575072636f6e7472616374506572666f726d616e636560681b6000908152600f8301602052604090205460f81c6102d0565b74465f636f6e7472616374506572666f726d616e636560581b821415610523575074465f636f6e7472616374506572666f726d616e636560581b6000908152600f8301602052604090205460f81c6102d0565b60006b636f6e74726163745479706560a01b8214156111dc575064656e756d7360d81b6000908152600e8301602052604090205460f81c6102d0565b6731b0b632b73230b960c11b821415611212575064656e756d7360d81b6000908152600e8301602052604090205460f01c6102d0565b6b636f6e7472616374526f6c6560a01b82141561124c575064656e756d7360d81b6000908152600e8301602052604090205460e81c6102d0565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b82141561128c575064656e756d7360d81b6000908152600e8301602052604090205460e01c6102d0565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b8214156112cf575064656e756d7360d81b6000908152600e8301602052604090205460d81c6102d0565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b821415611311575064656e756d7360d81b6000908152600e8301602052604090205460d01c6102d0565b6c1cd8d85b1a5b99d159999958dd609a1b82141561134c575064656e756d7360d81b6000908152600e8301602052604090205460c81c6102d0565b67666565426173697360c01b821415610523575064656e756d7360d81b6000908152600e8301602052604090205460c01c6102d0565b6113af8272636f6e7472616374506572666f726d616e636560681b60f88460000151600581111561078157fe5b6113ce82697374617475734461746560b01b836020015160001b612286565b6113f482706e6f6e506572666f726d696e674461746560781b836040015160001b612286565b611415826b6d617475726974794461746560a01b836060015160001b612286565b611439826e7465726d696e6174696f6e4461746560881b836080015160001b612286565b61145f82701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b8360a0015160001b612286565b611483826e1858d8dc9d5959125b9d195c995cdd608a1b8360c0015160001b612286565b6114a282691999595058d8dc9d595960b21b8360e0015160001b612286565b6114cb82726e6f6d696e616c496e7465726573745261746560681b83610100015160001b612286565b6114fa827834b73a32b932b9ba29b1b0b634b733a6bab63a34b83634b2b960391b83610120015160001b612286565b61091d82783737ba34b7b730b629b1b0b634b733a6bab63a34b83634b2b960391b83610140015160001b612286565b611531612371565b6a19dc9858d954195c9a5bd960aa1b82148061156057507019195b1a5b9c5d595b98de54195c9a5bd9607a1b82145b156115ea57604080516060810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff1660058111156115a457fe5b60058111156115af57fe5b81526000848152600e8601602090815260409091205491019060081c6001908116146115dc5760006115df565b60015b1515905290506102d0565b6040805160608101909152600080825260208201905b8152600060209091015290506102d0565b611619612394565b7518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b82148061165257506f18de58db1953d994985d1954995cd95d60821b82145b806116725750720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b82145b806116895750696379636c654f6646656560b01b82145b1561173d57604080516080810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff1660058111156116cd57fe5b60058111156116d857fe5b8152602001600885600e01600086815260200190815260200160002054901c60001c60ff16600181111561170857fe5b600181111561171357fe5b81526000848152600e860160209081526040909120549101906001908116146115dc5760006115df565b60408051608081019091526000808252602082019081526020016000611600565b6117666123b5565b604080516105408101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c601381111561179b57fe5b60138111156117a657fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660018111156117de57fe5b60018111156117e957fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c81111561182157fe5b600c81111561182c57fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600a81111561186457fe5b600a81111561186f57fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660088111156118a757fe5b60088111156118b257fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660018111156118ea57fe5b60018111156118f557fe5b815260200160c884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600381111561192d57fe5b600381111561193857fe5b815260200160c084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561197057fe5b600181111561197b57fe5b81526763757272656e637960c01b6000908152600e85016020818152604080842054606090811c8387015271736574746c656d656e7443757272656e637960701b855283835281852054811c82870152781b585c9ad95d13d89a9958dd10dbd91954985d1954995cd95d603a1b85528383528185205481870152697374617475734461746560b01b855283835281852054608087015272696e697469616c45786368616e67654461746560681b85528383528185205460a08701526b6d617475726974794461746560a01b85528383528185205460c08701526869737375654461746560b81b85528383528185205460e08701526b70757263686173654461746560a01b855283835281852054610100870152746361706974616c697a6174696f6e456e644461746560581b8552838352818520546101208701527f6379636c65416e63686f72446174654f66496e7465726573745061796d656e748552838352818520546101408701527f6379636c65416e63686f72446174654f665261746552657365740000000000008552838352818520546101608701527f6379636c65416e63686f72446174654f665363616c696e67496e646578000000855283835281852054610180870152736379636c65416e63686f72446174654f6646656560601b8552838352818520546101a0870152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b8552838352818520546101c0870152726e6f6d696e616c496e7465726573745261746560681b8552838352818520546101e08701526e1858d8dc9d5959125b9d195c995cdd608a1b8552838352818520546102008701526d3930ba32a6bab63a34b83634b2b960911b855283835281852054610220870152691c985d1954dc1c99585960b21b8552838352818520546102408701526c6e65787452657365745261746560981b855283835281852054610260870152666665655261746560c81b855283835281852054610280870152691999595058d8dc9d595960b21b8552838352818520546102a0870152731c1c995b5a5d5b511a5cd8dbdd5b9d105d12515160621b8552838352818520546102c0870152727072696365417450757263686173654461746560681b8552838352818520546102e087015275707269636541745465726d696e6174696f6e4461746560501b8552838352818520546103008701526606c6966654361760cc1b855283835281852054610320870152683634b332a33637b7b960b91b855283835281852054610340870152680706572696f644361760bc1b8552838352818520546103608701526a3832b934b7b2233637b7b960a91b855283835281852054610380870152815190810182526a19dc9858d954195c9a5bd960aa1b80865284845291852054601881901c8252919094529181526103a09093019282019060101c60ff166005811115611d9d57fe5b6005811115611da857fe5b81526a19dc9858d954195c9a5bd960aa1b6000908152600e8701602090815260409091205491019060081c600190811614611de4576000611de7565b60015b151590528152604080516060810182527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115611e4557fe5b6005811115611e5057fe5b81527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000908152600e8701602090815260409091205491019060081c600190811614611e92576000611e95565b60015b151590528152604080516080810182527518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115611ef857fe5b6005811115611f0357fe5b8152602001600886600e0160007518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b815260200190815260200160002054901c60001c60ff166001811115611f4c57fe5b6001811115611f5757fe5b81527518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b6000908152600e87016020908152604090912054910190600190811614611f9b576000611f9e565b60015b151590528152604080516080810182526f18de58db1953d994985d1954995cd95d60821b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115611ffb57fe5b600581111561200657fe5b8152602001600886600e0160006f18de58db1953d994985d1954995cd95d60821b815260200190815260200160002054901c60001c60ff16600181111561204957fe5b600181111561205457fe5b81526f18de58db1953d994985d1954995cd95d60821b6000908152600e87016020908152604090912054910190600190811614612092576000612095565b60015b15159052815260408051608081018252720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff1660058111156120f557fe5b600581111561210057fe5b8152602001600886600e016000720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b815260200190815260200160002054901c60001c60ff16600181111561214657fe5b600181111561215157fe5b8152720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b6000908152600e87016020908152604090912054910190600190811614612192576000612195565b60015b15159052815260408051608081018252696379636c654f6646656560b01b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff1660058111156121ec57fe5b60058111156121f757fe5b8152602001600886600e016000696379636c654f6646656560b01b815260200190815260200160002054901c60001c60ff16600181111561223457fe5b600181111561223f57fe5b8152696379636c654f6646656560b01b6000908152600e8701602090815260409091205491019060019081161461227757600061227a565b60015b15159052905292915050565b6000828152600f840160205260409020548114156122a3576122b7565b6000828152600f8401602052604090208190555b505050565b6000828152600e840160205260409020548114156122d9576122b7565b6000918252600e929092016020526040902055565b6040805161016081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516080810182526000808252602082018190529091820190815260200160005b905290565b6040805160608101909152600080825260208201905b8152600060209091015290565b60408051608081019091526000808252602082019081526020016000612387565b60408051610540810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016124db612371565b81526020016124e8612371565b81526020016124f5612394565b8152602001612502612394565b815260200161250f612394565b815260200161236c612394565b80356001600160a01b038116811461049657600080fd5b8035801515811461049657600080fd5b80356009811061049657600080fd5b803561049681612e80565b803561049681612e8d565b8035600d811061049657600080fd5b80356014811061049657600080fd5b8035600b811061049657600080fd5b80356004811061049657600080fd5b6000608082840312156125b5578081fd5b6040516080810181811067ffffffffffffffff821117156125d257fe5b6040528235815290508060208301356125ea81612e8d565b602082015260408301356125fd81612e80565b604082015261260e60608401612533565b60608201525092915050565b60006060828403121561262b578081fd5b6040516060810181811067ffffffffffffffff8211171561264857fe5b60405282358152905080602083013561266081612e8d565b602082015261267160408401612533565b60408201525092915050565b60006020828403121561268e578081fd5b5035919050565b600080604083850312156126a7578081fd5b50508035926020909101359150565b6000808284036101808112156126ca578283fd5b8335925061016080601f19830112156126e1578283fd5b6126ea81612e3b565b91506126f86020860161255d565b825260408501356020830152606085013560408301526080850135606083015260a0850135608083015260c085013560a083015260e085013560c08301526101008086013560e08401526101208087013582850152610140915081870135818501525081860135818401525050809150509250929050565b600080828403610760811215612784578283fd5b83359250610740601f198201121561279a578182fd5b506127a6610540612e3b565b6127b260208501612577565b81526127c060408501612552565b60208201526127d160608501612568565b60408201526127e260808501612586565b60608201526127f360a08501612543565b608082015261280460c08501612552565b60a082015261281560e08501612595565b60c0820152610100612828818601612552565b60e083015261012061283b81870161251c565b82840152610140915061284f82870161251c565b8184015250610160808601358284015261018091508186013581840152506101a080860135828401526101c091508186013581840152506101e08086013582840152610200915081860135818401525061022080860135828401526102409150818601358184015250610260808601358284015261028091508186013581840152506102a080860135828401526102c091508186013581840152506102e08086013582840152610300915081860135818401525061032080860135828401526103409150818601358184015250610360808601358284015261038091508186013581840152506103a080860135828401526103c091508186013581840152506103e08086013582840152610400915081860135818401525061042080860135828401526104409150818601358184015250610460808601358284015261048091508186013581840152506104a06129a88782880161261a565b8284015261050091506129bd8783880161261a565b908301526129cf8661056087016125a4565b6104c08301526129e3866105e087016125a4565b6104e08301526129f78661066087016125a4565b90820152612a09856106e086016125a4565b610520820152809150509250929050565b6001600160a01b03169052565b60098110612a3157fe5b9052565b612a3181612e5f565b612a3181612e6c565b600d8110612a3157fe5b60148110612a3157fe5b600b8110612a3157fe5b60048110612a3157fe5b805182526020810151612a8181612e6c565b60208301526040810151612a9481612e5f565b60408301526060908101511515910152565b805182526020810151612ab881612e6c565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b90815260200190565b815181526020808301519082015260408201516080820190612b0881612e76565b60408301526060830151612b1b81612e76565b8060608401525092915050565b608081016102d08284612a6f565b606081016102d08284612aa6565b600061016082019050612b58828451612a3e565b6020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525092915050565b600061074082019050612bdc828451612a51565b6020830151612bee6020840182612a35565b506040830151612c016040840182612a47565b506060830151612c146060840182612a5b565b506080830151612c276080840182612a27565b5060a0830151612c3a60a0840182612a35565b5060c0830151612c4d60c0840182612a65565b5060e0830151612c6060e0840182612a35565b5061010080840151612c7482850182612a1a565b505061012080840151612c8982850182612a1a565b50506101408381015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151908301526102a080840151908301526102c080840151908301526102e08084015190830152610300808401519083015261032080840151908301526103408084015190830152610360808401519083015261038080840151908301526103a080840151908301526103c080840151908301526103e08084015190830152610400808401519083015261042080840151908301526104408084015190830152610460808401519083015261048080840151612dbc82850182612aa6565b50506104a08301516104e0612dd381850183612aa6565b6104c08501519150612de9610540850183612a6f565b8401519050612dfc6105c0840182612a6f565b50610500830151612e11610640840182612a6f565b50610520830151612e266106c0840182612a6f565b5092915050565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715612e5757fe5b604052919050565b60028110612e6957fe5b50565b60068110612e6957fe5b60058110612e6957fe5b60028110612e6957600080fd5b60068110612e6957600080fdfea2646970667358221220ae74ef30d0548d9f3296a5f93e3ef078ff643bd42f31e372a0c5052240eda32b64736f6c63430007040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101155760003560e01c806369a71f91116100ac57806381a14c5c1161007b57806381a14c5c1461025e578063c6e40d321461011a578063c84d7f121461027e578063db779e5614610183578063f21917af1461029e57610115565b806369a71f911461020b57806377f76dc81461022b5780637a56fcc71461023e5780637f66c64e1461018357610115565b806334e2040d116100e857806334e2040d14610196578063379fb223146101b65780633d37fbe9146101c95780635276dec1146101eb57610115565b80630383a9b61461011a57806307db5500146101435780630e2c8ca5146101635780631707b04a14610183575b600080fd5b61012d610128366004612695565b6102be565b60405161013a9190612ade565b60405180910390f35b61015661015136600461267d565b6102d6565b60405161013a9190612b44565b610176610171366004612695565b61049b565b60405161013a9190612aca565b61012d610191366004612695565b61052b565b6101a96101a4366004612695565b610541565b60405161013a9190612ae7565b6101566101c436600461267d565b610574565b8180156101d557600080fd5b506101e96101e43660046126b6565b610752565b005b8180156101f757600080fd5b506101e9610206366004612770565b610921565b61021e610219366004612695565b6110fc565b60405161013a9190612e2d565b61021e610239366004612695565b6111a0565b81801561024a57600080fd5b506101e96102593660046126b6565b611382565b61027161026c366004612695565b611529565b60405161013a9190612b36565b61029161028c366004612695565b611611565b60405161013a9190612b28565b6102b16102ac36600461267d565b61175e565b60405161013a9190612bc8565b6000818152600f830160205260409020545b92915050565b6102de6122ee565b604080516101608101825272636f6e7472616374506572666f726d616e636560681b6000908152600f85016020529190912054819060f81c600581111561032157fe5b600581111561032c57fe5b8152697374617475734461746560b01b6000908152600f8501602081815260408084205482860152706e6f6e506572666f726d696e674461746560781b845282825280842054818601526b6d617475726974794461746560a01b84528282528084205460608601526e7465726d696e6174696f6e4461746560881b8452828252808420546080860152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b84528282528084205460a08601526e1858d8dc9d5959125b9d195c995cdd608a1b84528282528084205460c0860152691999595058d8dc9d595960b21b84528282528084205460e0860152726e6f6d696e616c496e7465726573745261746560681b8452828252808420546101008601527834b73a32b932b9ba29b1b0b634b733a6bab63a34b83634b2b960391b845282825280842054610120860152783737ba34b7b730b629b1b0b634b733a6bab63a34b83634b2b960391b84529190529020546101409091015290505b919050565b60006763757272656e637960c01b8214156104d657506763757272656e637960c01b6000908152600e8301602052604090205460601c6102d0565b71736574746c656d656e7443757272656e637960701b821415610523575071736574746c656d656e7443757272656e637960701b6000908152600e8301602052604090205460601c6102d0565b5060006102d0565b6000908152600e91909101602052604090205490565b610549612349565b6040805160808101825260008082526020820181905290918201908152602001600090529392505050565b61057c6122ee565b604080516101608101825274465f636f6e7472616374506572666f726d616e636560581b6000908152600f85016020529190912054819060f81c60058111156105c157fe5b60058111156105cc57fe5b81526b465f7374617475734461746560a01b6000908152600f850160208181526040808420548286015272465f6e6f6e506572666f726d696e674461746560681b845282825280842054818601526d465f6d617475726974794461746560901b845282825280842054606086015270465f7465726d696e6174696f6e4461746560781b8452828252808420546080860152721197db9bdd1a5bdb985b141c9a5b98da5c185b606a1b84528282528084205460a0860152701197d858d8dc9d5959125b9d195c995cdd607a1b84528282528084205460c08601526b1197d999595058d8dc9d595960a21b84528282528084205460e086015274465f6e6f6d696e616c496e7465726573745261746560581b8452828252808420546101008601527f465f696e7465726573745363616c696e674d756c7469706c69657200000000008452828252808420546101208601527f465f6e6f74696f6e616c5363616c696e674d756c7469706c69657200000000008452919052902054610140909101529050919050565b61078b8274465f636f6e7472616374506572666f726d616e636560581b60f88460000151600581111561078157fe5b60ff16901b612286565b6107ac826b465f7374617475734461746560a01b836020015160001b612286565b6107d48272465f6e6f6e506572666f726d696e674461746560681b836040015160001b612286565b6107f7826d465f6d617475726974794461746560901b836060015160001b612286565b61081d8270465f7465726d696e6174696f6e4461746560781b836080015160001b612286565b61084582721197db9bdd1a5bdb985b141c9a5b98da5c185b606a1b8360a0015160001b612286565b61086b82701197d858d8dc9d5959125b9d195c995cdd607a1b8360c0015160001b612286565b61088c826b1197d999595058d8dc9d595960a21b8360e0015160001b612286565b6108b78274465f6e6f6d696e616c496e7465726573745261746560581b83610100015160001b612286565b6108ea827f465f696e7465726573745363616c696e674d756c7469706c696572000000000083610120015160001b612286565b61091d827f465f6e6f74696f6e616c5363616c696e674d756c7469706c696572000000000083610140015160001b612286565b5050565b610a078264656e756d7360d81b60c08460e00151600181111561094057fe5b60ff1660001b901b60c88560c00151600381111561095a57fe5b60ff1660001b901b60d08660a00151600181111561097457fe5b60ff1660001b901b60d88760800151600881111561098e57fe5b60ff1660001b901b60e08860600151600a8111156109a857fe5b60ff1660001b901b60e88960400151600c8111156109c257fe5b60ff1660001b901b60f08a6020015160018111156109dc57fe5b60ff1660001b901b60f88b6000015160138111156109f657fe5b60ff16901b171717171717176122bc565b610a32826763757272656e637960c01b60608461010001516001600160a01b0316901b60001b6122bc565b610a678271736574746c656d656e7443757272656e637960701b60608461012001516001600160a01b0316901b60001b6122bc565b610a9382781b585c9ad95d13d89a9958dd10dbd91954985d1954995cd95d603a1b8361014001516122bc565b610ab382697374617475734461746560b01b83610160015160001b6122bc565b610adc8272696e697469616c45786368616e67654461746560681b83610180015160001b6122bc565b610afe826b6d617475726974794461746560a01b836101a0015160001b6122bc565b610b1d826869737375654461746560b81b836101c0015160001b6122bc565b610b3f826b70757263686173654461746560a01b836101e0015160001b6122bc565b610b6a82746361706974616c697a6174696f6e456e644461746560581b83610200015160001b6122bc565b610b9d827f6379636c65416e63686f72446174654f66496e7465726573745061796d656e7483610220015160001b6122bc565b610bd0827f6379636c65416e63686f72446174654f6652617465526573657400000000000083610240015160001b6122bc565b610c03827f6379636c65416e63686f72446174654f665363616c696e67496e64657800000083610260015160001b6122bc565b610c2d82736379636c65416e63686f72446174654f6646656560601b83610280015160001b6122bc565b610c5482701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b836102a0015160001b6122bc565b610c7d82726e6f6d696e616c496e7465726573745261746560681b836102c0015160001b6122bc565b610ca2826e1858d8dc9d5959125b9d195c995cdd608a1b836102e0015160001b6122bc565b610cc6826d3930ba32a6bab63a34b83634b2b960911b83610300015160001b6122bc565b610ce682691c985d1954dc1c99585960b21b83610320015160001b6122bc565b610d09826c6e65787452657365745261746560981b83610340015160001b6122bc565b610d2682666665655261746560c81b83610360015160001b6122bc565b610d4682691999595058d8dc9d595960b21b83610380015160001b6122bc565b610d7082731c1c995b5a5d5b511a5cd8dbdd5b9d105d12515160621b836103a0015160001b6122bc565b610d9982727072696365417450757263686173654461746560681b836103c0015160001b6122bc565b610dc58275707269636541745465726d696e6174696f6e4461746560501b836103e0015160001b6122bc565b610de2826606c6966654361760cc1b83610400015160001b6122bc565b610e0182683634b332a33637b7b960b91b83610420015160001b6122bc565b610e2082680706572696f644361760bc1b83610440015160001b6122bc565b610e41826a3832b934b7b2233637b7b960a91b83610460015160001b6122bc565b610ea0826a19dc9858d954195c9a5bd960aa1b600884610480015160400151610e6b576000610e6e565b60015b60ff1660001b901b6010856104800151602001516005811115610e8d57fe5b6104808701515160181b911b17176122bc565b610f05827019195b1a5b9c5d595b98de54195c9a5bd9607a1b6008846104a0015160400151610ed0576000610ed3565b60015b60ff1660001b901b6010856104a00151602001516005811115610ef257fe5b6104a08701515160181b911b17176122bc565b610f88827518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b836104c0015160600151610f38576000610f3b565b60015b60ff1660001b6008856104c00151604001516001811115610f5857fe5b60001b901b6010866104c00151602001516005811115610f7457fe5b6104c08801515160181b911b1717176122bc565b611005826f18de58db1953d994985d1954995cd95d60821b836104e0015160600151610fb5576000610fb8565b60015b60ff1660001b6008856104e00151604001516001811115610fd557fe5b60001b901b6010866104e00151602001516005811115610ff157fe5b6104e08801515160181b911b1717176122bc565b61108582720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b83610500015160600151611035576000611038565b60015b60ff1660001b600885610500015160400151600181111561105557fe5b60001b901b601086610500015160200151600581111561107157fe5b6105008801515160181b911b1717176122bc565b61091d82696379636c654f6646656560b01b836105200151606001516110ac5760006110af565b60015b60ff1660001b60088561052001516040015160018111156110cc57fe5b60001b901b60108661052001516020015160058111156110e857fe5b6105208801515160181b911b1717176122bc565b600072636f6e7472616374506572666f726d616e636560681b82141561114d575072636f6e7472616374506572666f726d616e636560681b6000908152600f8301602052604090205460f81c6102d0565b74465f636f6e7472616374506572666f726d616e636560581b821415610523575074465f636f6e7472616374506572666f726d616e636560581b6000908152600f8301602052604090205460f81c6102d0565b60006b636f6e74726163745479706560a01b8214156111dc575064656e756d7360d81b6000908152600e8301602052604090205460f81c6102d0565b6731b0b632b73230b960c11b821415611212575064656e756d7360d81b6000908152600e8301602052604090205460f01c6102d0565b6b636f6e7472616374526f6c6560a01b82141561124c575064656e756d7360d81b6000908152600e8301602052604090205460e81c6102d0565b713230bca1b7bab73a21b7b73b32b73a34b7b760711b82141561128c575064656e756d7360d81b6000908152600e8301602052604090205460e01c6102d0565b74313ab9b4b732b9b9a230bca1b7b73b32b73a34b7b760591b8214156112cf575064656e756d7360d81b6000908152600e8301602052604090205460d81c6102d0565b7332b73227b326b7b73a3421b7b73b32b73a34b7b760611b821415611311575064656e756d7360d81b6000908152600e8301602052604090205460d01c6102d0565b6c1cd8d85b1a5b99d159999958dd609a1b82141561134c575064656e756d7360d81b6000908152600e8301602052604090205460c81c6102d0565b67666565426173697360c01b821415610523575064656e756d7360d81b6000908152600e8301602052604090205460c01c6102d0565b6113af8272636f6e7472616374506572666f726d616e636560681b60f88460000151600581111561078157fe5b6113ce82697374617475734461746560b01b836020015160001b612286565b6113f482706e6f6e506572666f726d696e674461746560781b836040015160001b612286565b611415826b6d617475726974794461746560a01b836060015160001b612286565b611439826e7465726d696e6174696f6e4461746560881b836080015160001b612286565b61145f82701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b8360a0015160001b612286565b611483826e1858d8dc9d5959125b9d195c995cdd608a1b8360c0015160001b612286565b6114a282691999595058d8dc9d595960b21b8360e0015160001b612286565b6114cb82726e6f6d696e616c496e7465726573745261746560681b83610100015160001b612286565b6114fa827834b73a32b932b9ba29b1b0b634b733a6bab63a34b83634b2b960391b83610120015160001b612286565b61091d82783737ba34b7b730b629b1b0b634b733a6bab63a34b83634b2b960391b83610140015160001b612286565b611531612371565b6a19dc9858d954195c9a5bd960aa1b82148061156057507019195b1a5b9c5d595b98de54195c9a5bd9607a1b82145b156115ea57604080516060810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff1660058111156115a457fe5b60058111156115af57fe5b81526000848152600e8601602090815260409091205491019060081c6001908116146115dc5760006115df565b60015b1515905290506102d0565b6040805160608101909152600080825260208201905b8152600060209091015290506102d0565b611619612394565b7518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b82148061165257506f18de58db1953d994985d1954995cd95d60821b82145b806116725750720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b82145b806116895750696379636c654f6646656560b01b82145b1561173d57604080516080810182526000848152600e8601602081815293822054601881901c8452918690528352909182019060101c60ff1660058111156116cd57fe5b60058111156116d857fe5b8152602001600885600e01600086815260200190815260200160002054901c60001c60ff16600181111561170857fe5b600181111561171357fe5b81526000848152600e860160209081526040909120549101906001908116146115dc5760006115df565b60408051608081019091526000808252602082019081526020016000611600565b6117666123b5565b604080516105408101825264656e756d7360d81b6000908152600e85016020529190912054819060f81c601381111561179b57fe5b60138111156117a657fe5b815260200160f084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660018111156117de57fe5b60018111156117e957fe5b815260200160e884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600c81111561182157fe5b600c81111561182c57fe5b815260200160e084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600a81111561186457fe5b600a81111561186f57fe5b815260200160d884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660088111156118a757fe5b60088111156118b257fe5b815260200160d084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff1660018111156118ea57fe5b60018111156118f557fe5b815260200160c884600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600381111561192d57fe5b600381111561193857fe5b815260200160c084600e01600064656e756d7360d81b815260200190815260200160002054901c60001c60ff16600181111561197057fe5b600181111561197b57fe5b81526763757272656e637960c01b6000908152600e85016020818152604080842054606090811c8387015271736574746c656d656e7443757272656e637960701b855283835281852054811c82870152781b585c9ad95d13d89a9958dd10dbd91954985d1954995cd95d603a1b85528383528185205481870152697374617475734461746560b01b855283835281852054608087015272696e697469616c45786368616e67654461746560681b85528383528185205460a08701526b6d617475726974794461746560a01b85528383528185205460c08701526869737375654461746560b81b85528383528185205460e08701526b70757263686173654461746560a01b855283835281852054610100870152746361706974616c697a6174696f6e456e644461746560581b8552838352818520546101208701527f6379636c65416e63686f72446174654f66496e7465726573745061796d656e748552838352818520546101408701527f6379636c65416e63686f72446174654f665261746552657365740000000000008552838352818520546101608701527f6379636c65416e63686f72446174654f665363616c696e67496e646578000000855283835281852054610180870152736379636c65416e63686f72446174654f6646656560601b8552838352818520546101a0870152701b9bdd1a5bdb985b141c9a5b98da5c185b607a1b8552838352818520546101c0870152726e6f6d696e616c496e7465726573745261746560681b8552838352818520546101e08701526e1858d8dc9d5959125b9d195c995cdd608a1b8552838352818520546102008701526d3930ba32a6bab63a34b83634b2b960911b855283835281852054610220870152691c985d1954dc1c99585960b21b8552838352818520546102408701526c6e65787452657365745261746560981b855283835281852054610260870152666665655261746560c81b855283835281852054610280870152691999595058d8dc9d595960b21b8552838352818520546102a0870152731c1c995b5a5d5b511a5cd8dbdd5b9d105d12515160621b8552838352818520546102c0870152727072696365417450757263686173654461746560681b8552838352818520546102e087015275707269636541745465726d696e6174696f6e4461746560501b8552838352818520546103008701526606c6966654361760cc1b855283835281852054610320870152683634b332a33637b7b960b91b855283835281852054610340870152680706572696f644361760bc1b8552838352818520546103608701526a3832b934b7b2233637b7b960a91b855283835281852054610380870152815190810182526a19dc9858d954195c9a5bd960aa1b80865284845291852054601881901c8252919094529181526103a09093019282019060101c60ff166005811115611d9d57fe5b6005811115611da857fe5b81526a19dc9858d954195c9a5bd960aa1b6000908152600e8701602090815260409091205491019060081c600190811614611de4576000611de7565b60015b151590528152604080516060810182527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115611e4557fe5b6005811115611e5057fe5b81527019195b1a5b9c5d595b98de54195c9a5bd9607a1b6000908152600e8701602090815260409091205491019060081c600190811614611e92576000611e95565b60015b151590528152604080516080810182527518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115611ef857fe5b6005811115611f0357fe5b8152602001600886600e0160007518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b815260200190815260200160002054901c60001c60ff166001811115611f4c57fe5b6001811115611f5757fe5b81527518de58db1953d9925b9d195c995cdd14185e5b595b9d60521b6000908152600e87016020908152604090912054910190600190811614611f9b576000611f9e565b60015b151590528152604080516080810182526f18de58db1953d994985d1954995cd95d60821b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff166005811115611ffb57fe5b600581111561200657fe5b8152602001600886600e0160006f18de58db1953d994985d1954995cd95d60821b815260200190815260200160002054901c60001c60ff16600181111561204957fe5b600181111561205457fe5b81526f18de58db1953d994985d1954995cd95d60821b6000908152600e87016020908152604090912054910190600190811614612092576000612095565b60015b15159052815260408051608081018252720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff1660058111156120f557fe5b600581111561210057fe5b8152602001600886600e016000720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b815260200190815260200160002054901c60001c60ff16600181111561214657fe5b600181111561215157fe5b8152720c6f2c6d8ca9ecca6c6c2d8d2dcce92dcc8caf606b1b6000908152600e87016020908152604090912054910190600190811614612192576000612195565b60015b15159052815260408051608081018252696379636c654f6646656560b01b6000818152600e8801602081815294822054601881901c855292909152835292820192909182019060101c60ff1660058111156121ec57fe5b60058111156121f757fe5b8152602001600886600e016000696379636c654f6646656560b01b815260200190815260200160002054901c60001c60ff16600181111561223457fe5b600181111561223f57fe5b8152696379636c654f6646656560b01b6000908152600e8701602090815260409091205491019060019081161461227757600061227a565b60015b15159052905292915050565b6000828152600f840160205260409020548114156122a3576122b7565b6000828152600f8401602052604090208190555b505050565b6000828152600e840160205260409020548114156122d9576122b7565b6000918252600e929092016020526040902055565b6040805161016081019091528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516080810182526000808252602082018190529091820190815260200160005b905290565b6040805160608101909152600080825260208201905b8152600060209091015290565b60408051608081019091526000808252602082019081526020016000612387565b60408051610540810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008019168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016124db612371565b81526020016124e8612371565b81526020016124f5612394565b8152602001612502612394565b815260200161250f612394565b815260200161236c612394565b80356001600160a01b038116811461049657600080fd5b8035801515811461049657600080fd5b80356009811061049657600080fd5b803561049681612e80565b803561049681612e8d565b8035600d811061049657600080fd5b80356014811061049657600080fd5b8035600b811061049657600080fd5b80356004811061049657600080fd5b6000608082840312156125b5578081fd5b6040516080810181811067ffffffffffffffff821117156125d257fe5b6040528235815290508060208301356125ea81612e8d565b602082015260408301356125fd81612e80565b604082015261260e60608401612533565b60608201525092915050565b60006060828403121561262b578081fd5b6040516060810181811067ffffffffffffffff8211171561264857fe5b60405282358152905080602083013561266081612e8d565b602082015261267160408401612533565b60408201525092915050565b60006020828403121561268e578081fd5b5035919050565b600080604083850312156126a7578081fd5b50508035926020909101359150565b6000808284036101808112156126ca578283fd5b8335925061016080601f19830112156126e1578283fd5b6126ea81612e3b565b91506126f86020860161255d565b825260408501356020830152606085013560408301526080850135606083015260a0850135608083015260c085013560a083015260e085013560c08301526101008086013560e08401526101208087013582850152610140915081870135818501525081860135818401525050809150509250929050565b600080828403610760811215612784578283fd5b83359250610740601f198201121561279a578182fd5b506127a6610540612e3b565b6127b260208501612577565b81526127c060408501612552565b60208201526127d160608501612568565b60408201526127e260808501612586565b60608201526127f360a08501612543565b608082015261280460c08501612552565b60a082015261281560e08501612595565b60c0820152610100612828818601612552565b60e083015261012061283b81870161251c565b82840152610140915061284f82870161251c565b8184015250610160808601358284015261018091508186013581840152506101a080860135828401526101c091508186013581840152506101e08086013582840152610200915081860135818401525061022080860135828401526102409150818601358184015250610260808601358284015261028091508186013581840152506102a080860135828401526102c091508186013581840152506102e08086013582840152610300915081860135818401525061032080860135828401526103409150818601358184015250610360808601358284015261038091508186013581840152506103a080860135828401526103c091508186013581840152506103e08086013582840152610400915081860135818401525061042080860135828401526104409150818601358184015250610460808601358284015261048091508186013581840152506104a06129a88782880161261a565b8284015261050091506129bd8783880161261a565b908301526129cf8661056087016125a4565b6104c08301526129e3866105e087016125a4565b6104e08301526129f78661066087016125a4565b90820152612a09856106e086016125a4565b610520820152809150509250929050565b6001600160a01b03169052565b60098110612a3157fe5b9052565b612a3181612e5f565b612a3181612e6c565b600d8110612a3157fe5b60148110612a3157fe5b600b8110612a3157fe5b60048110612a3157fe5b805182526020810151612a8181612e6c565b60208301526040810151612a9481612e5f565b60408301526060908101511515910152565b805182526020810151612ab881612e6c565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b90815260200190565b815181526020808301519082015260408201516080820190612b0881612e76565b60408301526060830151612b1b81612e76565b8060608401525092915050565b608081016102d08284612a6f565b606081016102d08284612aa6565b600061016082019050612b58828451612a3e565b6020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525092915050565b600061074082019050612bdc828451612a51565b6020830151612bee6020840182612a35565b506040830151612c016040840182612a47565b506060830151612c146060840182612a5b565b506080830151612c276080840182612a27565b5060a0830151612c3a60a0840182612a35565b5060c0830151612c4d60c0840182612a65565b5060e0830151612c6060e0840182612a35565b5061010080840151612c7482850182612a1a565b505061012080840151612c8982850182612a1a565b50506101408381015190830152610160808401519083015261018080840151908301526101a080840151908301526101c080840151908301526101e08084015190830152610200808401519083015261022080840151908301526102408084015190830152610260808401519083015261028080840151908301526102a080840151908301526102c080840151908301526102e08084015190830152610300808401519083015261032080840151908301526103408084015190830152610360808401519083015261038080840151908301526103a080840151908301526103c080840151908301526103e08084015190830152610400808401519083015261042080840151908301526104408084015190830152610460808401519083015261048080840151612dbc82850182612aa6565b50506104a08301516104e0612dd381850183612aa6565b6104c08501519150612de9610540850183612a6f565b8401519050612dfc6105c0840182612a6f565b50610500830151612e11610640840182612a6f565b50610520830151612e266106c0840182612a6f565b5092915050565b60ff91909116815260200190565b60405181810167ffffffffffffffff81118282101715612e5757fe5b604052919050565b60028110612e6957fe5b50565b60068110612e6957fe5b60058110612e6957fe5b60028110612e6957600080fd5b60068110612e6957600080fdfea2646970667358221220ae74ef30d0548d9f3296a5f93e3ef078ff643bd42f31e372a0c5052240eda32b64736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "decodeAndGetFinalizedPAMState(Asset storage)": {
        "details": "Decode and load the finalized PAMState of the asset"
      },
      "decodeAndGetPAMState(Asset storage)": {
        "details": "Decode and load the PAMState of the asset"
      },
      "decodeAndGetPAMTerms(Asset storage)": {
        "details": "Decode and loads PAMTerms"
      },
      "encodeAndSetFinalizedPAMState(Asset storage,PAMState)": {
        "details": "Tightly pack and store finalized PAMState"
      },
      "encodeAndSetPAMState(Asset storage,PAMState)": {
        "details": "Tightly pack and store PAMState"
      },
      "encodeAndSetPAMTerms(Asset storage,PAMTerms)": {
        "details": "Tightly pack and store only non-zero overwritten terms (LifecycleTerms)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "encodeAndSetPAMTerms(Asset storage,PAMTerms)": {
        "notice": "All non zero values of the overwrittenTerms object are stored. It does not check if overwrittenAttributesMap actually marks attribute as overwritten."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}