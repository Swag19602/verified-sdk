{
  "address": "0xf64305d9914fE8876991872F31Fd43968fEe31Db",
  "abi": [
    {
      "inputs": [],
      "name": "MAX_CYCLE_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_EVENT_SCHEDULE_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_POINT_ZERO",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EndOfMonthConvention",
          "name": "eomc",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "enum P",
              "name": "p",
              "type": "uint8"
            },
            {
              "internalType": "enum S",
              "name": "s",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isSet",
              "type": "bool"
            }
          ],
          "internalType": "struct IPS",
          "name": "cycle",
          "type": "tuple"
        }
      ],
      "name": "adjustEndOfMonthConvention",
      "outputs": [
        {
          "internalType": "enum EndOfMonthConvention",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeOfCollateral",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "coverageOfCollateral",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            }
          ],
          "internalType": "struct COLLATerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "segmentStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "segmentEnd",
          "type": "uint256"
        },
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "computeCyclicScheduleSegment",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        },
        {
          "internalType": "enum BusinessDayConvention",
          "name": "bdc",
          "type": "uint8"
        },
        {
          "internalType": "enum Calendar",
          "name": "calendar",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "computeEventTimeForEvent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeOfCollateral",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "coverageOfCollateral",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            }
          ],
          "internalType": "struct COLLATerms",
          "name": "terms",
          "type": "tuple"
        }
      ],
      "name": "computeInitialState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            }
          ],
          "internalType": "struct COLLAState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeOfCollateral",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "coverageOfCollateral",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            }
          ],
          "internalType": "struct COLLATerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "lastScheduleTime",
          "type": "uint256"
        },
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "computeNextCyclicEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeOfCollateral",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "coverageOfCollateral",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            }
          ],
          "internalType": "struct COLLATerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "lastNonCyclicEvent",
          "type": "bytes32"
        }
      ],
      "name": "computeNextNonCyclicEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeOfCollateral",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "coverageOfCollateral",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            }
          ],
          "internalType": "struct COLLATerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "segmentStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "segmentEnd",
          "type": "uint256"
        }
      ],
      "name": "computeNonCyclicScheduleSegment",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeOfCollateral",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "coverageOfCollateral",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            }
          ],
          "internalType": "struct COLLATerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            }
          ],
          "internalType": "struct COLLAState",
          "name": "state",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "externalData",
          "type": "bytes"
        }
      ],
      "name": "computePayoffForEvent",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeOfCollateral",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "coverageOfCollateral",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            }
          ],
          "internalType": "struct COLLATerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            }
          ],
          "internalType": "struct COLLAState",
          "name": "state",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "externalData",
          "type": "bytes"
        }
      ],
      "name": "computeStateForEvent",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            }
          ],
          "internalType": "struct COLLAState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractType",
      "outputs": [
        {
          "internalType": "enum ContractType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        }
      ],
      "name": "decodeEvent",
      "outputs": [
        {
          "internalType": "enum EventType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "scheduleTime",
          "type": "uint256"
        }
      ],
      "name": "encodeEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "getEpochOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeOfCollateral",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "coverageOfCollateral",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            }
          ],
          "internalType": "struct COLLATerms",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            }
          ],
          "internalType": "struct COLLAState",
          "name": "state",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "exerciseAmount",
              "type": "int256"
            },
            {
              "internalType": "bool",
              "name": "isSet",
              "type": "bool"
            }
          ],
          "internalType": "struct UnderlyingState",
          "name": "",
          "type": "tuple"
        }
      ],
      "name": "isEventScheduled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum BusinessDayConvention",
          "name": "convention",
          "type": "uint8"
        },
        {
          "internalType": "enum Calendar",
          "name": "calendar",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "shiftCalcTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum BusinessDayConvention",
          "name": "convention",
          "type": "uint8"
        },
        {
          "internalType": "enum Calendar",
          "name": "calendar",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "maturityDate",
          "type": "uint256"
        }
      ],
      "name": "shiftEventTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x8cf976363ae8cc6e96f0b26befa2f54fae14b9aaf79ba85b1d3dddac93f79f29",
  "receipt": {
    "to": null,
    "from": "0xf6bb741F0C106a504943eaE908C3b67bcf4bF1CC",
    "contractAddress": "0xf64305d9914fE8876991872F31Fd43968fEe31Db",
    "transactionIndex": 16,
    "gasUsed": "3222256",
    "logsBloom": "0x
    "blockHash": "0xfe205d08fa9838d82d6375b5ce6d4a826b8efb3d49edce754bbea08c1a3770c3",
    "transactionHash": "0x8cf976363ae8cc6e96f0b26befa2f54fae14b9aaf79ba85b1d3dddac93f79f29",
    "logs": [],
    "blockNumber": 7712996,
    "cumulativeGasUsed": "5007753",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "37e2a100a6f868553298dee57e286371",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MAX_CYCLE_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_EVENT_SCHEDULE_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_POINT_ZERO\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"eomc\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycle\",\"type\":\"tuple\"}],\"name\":\"adjustEndOfMonthConvention\",\"outputs\":[{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeOfCollateral\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"coverageOfCollateral\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"}],\"internalType\":\"struct COLLATerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"segmentEnd\",\"type\":\"uint256\"},{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"computeCyclicScheduleSegment\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"bdc\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"computeEventTimeForEvent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeOfCollateral\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"coverageOfCollateral\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"}],\"internalType\":\"struct COLLATerms\",\"name\":\"terms\",\"type\":\"tuple\"}],\"name\":\"computeInitialState\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"}],\"internalType\":\"struct COLLAState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeOfCollateral\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"coverageOfCollateral\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"}],\"internalType\":\"struct COLLATerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"lastScheduleTime\",\"type\":\"uint256\"},{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"computeNextCyclicEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeOfCollateral\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"coverageOfCollateral\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"}],\"internalType\":\"struct COLLATerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"lastNonCyclicEvent\",\"type\":\"bytes32\"}],\"name\":\"computeNextNonCyclicEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeOfCollateral\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"coverageOfCollateral\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"}],\"internalType\":\"struct COLLATerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"segmentStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"segmentEnd\",\"type\":\"uint256\"}],\"name\":\"computeNonCyclicScheduleSegment\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeOfCollateral\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"coverageOfCollateral\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"}],\"internalType\":\"struct COLLATerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"}],\"internalType\":\"struct COLLAState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"externalData\",\"type\":\"bytes\"}],\"name\":\"computePayoffForEvent\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeOfCollateral\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"coverageOfCollateral\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"}],\"internalType\":\"struct COLLATerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"}],\"internalType\":\"struct COLLAState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"externalData\",\"type\":\"bytes\"}],\"name\":\"computeStateForEvent\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"}],\"internalType\":\"struct COLLAState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractType\",\"outputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"}],\"name\":\"decodeEvent\",\"outputs\":[{\"internalType\":\"enum EventType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"scheduleTime\",\"type\":\"uint256\"}],\"name\":\"encodeEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"getEpochOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeOfCollateral\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"coverageOfCollateral\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"}],\"internalType\":\"struct COLLATerms\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"}],\"internalType\":\"struct COLLAState\",\"name\":\"state\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"exerciseAmount\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct UnderlyingState\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"isEventScheduled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"convention\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"shiftCalcTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"convention\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"}],\"name\":\"shiftEventTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"All numbers except unix timestamp are represented as multiple of 10 ** 18\",\"kind\":\"dev\",\"methods\":{\"adjustEndOfMonthConvention(uint8,uint256,(uint256,uint8,uint8,bool))\":{\"details\":\"The following is considered to dertermine if schedule dates are shifted to the end of month: - The convention SD (same day) means not adjusting, EM (end of month) means adjusting - Dates are only shifted if the schedule start date is an end-of-month date - Dates are only shifted if the schedule cycle is based on an \\\"M\\\" period unit or multiple thereof\",\"params\":{\"cycle\":\"the cycle struct\",\"eomc\":\"the end of month convention to adjust\",\"startTime\":\"timestamp of the cycle start\"},\"returns\":{\"_0\":\"the adjusted end of month convention\"}},\"computeCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256,uint8)\":{\"params\":{\"eventType\":\"eventType of the cyclic schedule\",\"segmentEnd\":\"end timestamp of the segement\",\"segmentStart\":\"start timestamp of the segment\",\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"event schedule segment\"}},\"computeEventTimeForEvent(bytes32,uint8,uint8,uint256)\":{\"details\":\"For optimization reasons not located in EventUtil by applying the BDC specified in the terms\"},\"computeInitialState((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)))\":{\"params\":{\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"the initial state of the contract\"}},\"computeNextCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint8)\":{\"params\":{\"eventType\":\"eventType of the cyclic schedule\",\"lastScheduleTime\":\"last occurrence of cyclic event\",\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"event schedule segment\"}},\"computeNextNonCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),bytes32)\":{\"details\":\"Assumes that non-cyclic events of the same event type have a unique schedule time\",\"params\":{\"lastNonCyclicEvent\":\"last non-cyclic event\",\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"next non-cyclic event\"}},\"computeNonCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256)\":{\"params\":{\"segmentEnd\":\"end timestamp of the segement\",\"segmentStart\":\"start timestamp of the segment\",\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"segment of the non-cyclic schedule\"}},\"computePayoffForEvent((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256),bytes32,bytes)\":{\"params\":{\"_event\":\"event for which the payoff should be evaluated\",\"externalData\":\"external data needed for POF evaluation (e.g. fxRate)\",\"state\":\"current state of the contract\",\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"the payoff of the event\"}},\"computeStateForEvent((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256),bytes32,bytes)\":{\"params\":{\"_event\":\"event to be applied to the contract state\",\"externalData\":\"external data needed for STF evaluation (e.g. rate for RR events)\",\"state\":\"current state of the contract\",\"terms\":\"terms of the contract\"},\"returns\":{\"_0\":\"the resulting contract state\"}},\"isEventScheduled(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256),(int256,bool))\":{\"params\":{\"state\":\"current state of the contract param hasUnderlying boolean indicating whether the contract has an underlying contract param underlyingState state of the underlying (empty state object if non-existing)\"},\"returns\":{\"_0\":\"boolean indicating whether event is still scheduled\"}}},\"title\":\"COLLAEngine\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"adjustEndOfMonthConvention(uint8,uint256,(uint256,uint8,uint8,bool))\":{\"notice\":\"This function makes an adjustment on the end of month convention.\"},\"computeCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256,uint8)\":{\"notice\":\"Computes a schedule segment of cyclic contract events based on the contract terms and the specified timestamps.\"},\"computeEventTimeForEvent(bytes32,uint8,uint8,uint256)\":{\"notice\":\"Returns the event time for a given schedule time\"},\"computeInitialState((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)))\":{\"notice\":\"Initialize contract state space based on the contract terms.\"},\"computeNextCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint8)\":{\"notice\":\"Computes a schedule segment of cyclic contract events based on the contract terms and the specified timestamps.\"},\"computeNextNonCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),bytes32)\":{\"notice\":\"Computes the next non-cyclic contract events based on the contract terms and the timestamp on which the prev. event occured.\"},\"computeNonCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256)\":{\"notice\":\"Computes a schedule segment of non-cyclic contract events based on the contract terms and the specified timestamps.\"},\"computePayoffForEvent((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256),bytes32,bytes)\":{\"notice\":\"Evaluates the payoff for an event under the current state of the contract.\"},\"computeStateForEvent((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256),bytes32,bytes)\":{\"notice\":\"Applys an event to the current state of a contract and returns the resulting contract state.\"},\"getEpochOffset(uint8)\":{\"notice\":\"Returns the epoch offset for a given event type to determine the correct order of events if multiple events have the same timestamp\"},\"isEventScheduled(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256),(int256,bool))\":{\"notice\":\"Verifies that the provided event is still scheduled under the terms, the current state of the contract and the current state of the underlying. param _event event for which to check if its still scheduled param terms terms of the contract\"},\"shiftCalcTime(uint256,uint8,uint8,uint256)\":{\"notice\":\"Used in POFs and STFs for DCFs. No shifting is applied if a Calc/Shift instead of Shift/Calc BDC is provided.\"}},\"notice\":\"Inherits from BaseEngine by implementing STFs, POFs according to the ACTUS standard for a COLLA contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ACTUS/Engines/COLLA/COLLAEngine.sol\":\"COLLAEngine\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xba085261d44cf28d2583f7c8cdb2f0a6a495ff1a640f86d995ea9d36b42b0046\",\"license\":\"MIT\"},\"contracts/ACTUS/Core/ACTUSConstants.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @title ACTUSConstants\\n * @notice Contains all type definitions for ACTUS. See ACTUS-Dictionary for definitions\\n */\\ncontract ACTUSConstants {\\n\\n    // constants used throughout\\n    uint256 constant public PRECISION = 18;\\n    int256 constant public ONE_POINT_ZERO = 1 * 10 ** 18;\\n    uint256 constant public MAX_CYCLE_SIZE = 120;\\n    uint256 constant public MAX_EVENT_SCHEDULE_SIZE = 120;\\n}\\n\",\"keccak256\":\"0x1568471e72800002ad945bf084f96368f5dfb597105f2e3f11534905abda9495\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/ACTUSTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n/**\\n * Commit: https://github.com/atpar/actus-dictionary/commit/b85b9b378967de6bfc4d8b6687b520c48bce9890\\n * Date: 2020-10-06\\n */\\n\\n// IPS\\nenum P {D, W, M, Q, H, Y} // P=[D=Days, W=Weeks, M=Months, Q=Quarters, H=Halfyear, Y=Year]\\nenum S {LONG, SHORT} // S=[+=long stub,- short stub, {} if S empty then - for short stub]\\nstruct IPS {\\n    uint256 i; // I=Integer\\n    P p;\\n    S s;\\n    bool isSet;\\n}\\n\\nstruct IP {\\n    uint256 i;\\n    P p;\\n    bool isSet;\\n}\\n\\n// Number of enum options should be limited to 256 (8 bits) such that 255 enums can be packed fit into 256 bits (bytes32)\\nenum BusinessDayConvention {NOS, SCF, SCMF, CSF, CSMF, SCP, SCMP, CSP, CSMP}\\nenum Calendar {NC, MF}\\nenum ContractPerformance {PF, DL, DQ, DF, MD, TD}\\nenum ContractReferenceType {CNT, CID, MOC, EID, CST}\\nenum ContractReferenceRole {UDL, FIL, SEL, COVE, COVI}\\nenum ContractRole {RPA, RPL, RFL, PFL, RF, PF, BUY, SEL, COL, CNO, UDL, UDLP, UDLM}\\nenum ContractType {PAM, ANN, NAM, LAM, LAX, CLM, UMP, CSH, STK, COM, SWAPS, SWPPV, FXOUT, CAPFL, FUTUR, OPTNS, CEG, CEC, CERTF, COLLA}\\nenum CouponType {NOC, FIX, FCN, PRF}\\nenum CyclePointOfInterestPayment {B, E}\\nenum CyclePointOfRateReset {B, E}\\nenum DayCountConvention {AA, A360, A365, _30E360ISDA, _30E360, _28E336, ONE, OBYT, HRSAA, MINAA, SECAA}\\nenum EndOfMonthConvention {SD, EOM}\\n//               0   1    2    3    4   5   6   7   8   9  10    11  12   13   14   15   16   17   18   19   20   21   22   23   24   25  26  27    28   29  30  31  32  33\\nenum EventType {NE, CE, ISS, IED, PRD, FP, PR, PD, PY, PP, IP, IPCI, RRF, RR, DIF, DIX, DIP, COF, COP, REF, REX, REP, SPF, SPS, EXO, EXE, ST, SC, IPCB, PRF, MC, TD, MD, AD}\\nenum FeeBasis {A, N}\\n// enum GuaranteedExposure {NO, NI, MV} // not implemented\\n// enum InterestCalculationBase {NT, NTIED, NTL} // not implemented\\n// enum PenaltyType {O, A, N, I}\\n// enum PrepaymentEffect {N, A, M} // not implemented\\nenum RedeemableByIssuer {Y, N}\\nenum ScalingEffect {_000, I00, _0N0, IN0}\\n// enum Seniority {S, J} // not implemented\\n\\nstruct ContractReference {\\n    bytes32 object;\\n    bytes32 object2; // workaround for solc bug (replace object and object2 with single bytes attribute)\\n    ContractReferenceType _type;\\n    ContractReferenceRole role;\\n}\\n\\nstruct UnderlyingState {\\n    int256 exerciseAmount;\\n    bool isSet;\\n}\\n\\nstruct ANNState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n    int256 nextPrincipalRedemptionPayment;\\n}\\n\\nstruct CECState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n\\n    int256 feeAccrued;\\n    int256 exerciseAmount;\\n}\\n\\nstruct CEGState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    int256 feeAccrued;\\n    int256 exerciseAmount;\\n}\\n\\nstruct CERTFState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastCouponFixingDate;\\n\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n}\\n\\nstruct PAMState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n}\\n\\nstruct STKState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastDividendFixingDate;\\n    // uint256 dividendFixingDate; // not implemented\\n    // uint256 dividendExDate; // not implemented\\n    // uint256 dividendPaymentDate; // not implemented\\n    // uint256 splitSettlementDate; // not implemented\\n    // uint256 redemptionExDate; // not implemented\\n    // uint256 redemptionPaymentDate; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n    int256 dividendPaymentAmount;\\n    int256 splitRatio;\\n}\\n\\nstruct COLLAState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    int256 accruedInterest;\\n    int256 nominalInterestRate;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n}\\n\\nstruct ANNTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // InterestCalculationBase interestCalculationBase; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 ammortizationDate; // not implemented\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    // uint256 cycleAnchorDateOfInterestCalculationBase; // not implemented\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    uint256 cycleAnchorDateOfPrincipalRedemption;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 nextPrincipalRedemptionPayment;\\n    // int256 coverageOfCreditEnhancement;\\n    // int256 interestCalculationBaseAmount; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    IPS cycleOfPrincipalRedemption;\\n    // IPS cycleOfOptionality; // not implemented\\n    // IPS cycleOfInterestCalculationBase; // not implemented\\n}\\n\\nstruct CECTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ContractPerformance creditEventTypeCovered;\\n    FeeBasis feeBasis;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    // uint256 exerciseDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 feeRate;\\n    // int256 exerciseAmount; // state only\\n    int256 coverageOfCreditEnhancement;\\n\\n    // IP settlementPeriod; // not implemented\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CEGTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    ContractPerformance creditEventTypeCovered;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 exerciseDate; // state only\\n    // uint256 nonPerformingDate; // state only\\n\\n    int256 notionalPrincipal;\\n    // int256 delinquencyRate; not implemented\\n    int256 feeAccrued;\\n    int256 feeRate;\\n    int256 priceAtPurchaseDate;\\n    int256 coverageOfCreditEnhancement;\\n    // int256 exerciseAmount; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP settlementPeriod; // not implemented\\n\\n    IPS cycleOfFee;\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CERTFTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    CouponType couponType;\\n    // ContractPerformance contractPerformance; state only\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 issueDate;\\n    // uint256 lastCouponFixingDate; // state only\\n    uint256 cycleAnchorDateOfRedemption;\\n    uint256 cycleAnchorDateOfTermination;\\n    uint256 cycleAnchorDateOfCoupon;\\n\\n    int256 nominalPrice;\\n    int256 issuePrice;\\n    // int256 delinquencyRate; // not implemented\\n    int256 quantity;\\n    // int256 exerciseQuantity; // state only\\n    // int256 exerciseQuantityOrdered; // state only\\n    // int256 marginFactor;  // state only\\n    // int256 adjustmentFactor; // state only\\n    int256 denominationRatio;\\n    int256 couponRate;\\n    // int256 exerciseAmount; // state only\\n    // int256 couponAmountFixed; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    IP settlementPeriod;\\n    IP fixingPeriod;\\n    IP redemptionRecordPeriod;\\n\\n    IPS cycleOfRedemption;\\n    IPS cycleOfTermination;\\n    IPS cycleOfCoupon;\\n\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct PAMTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // CyclePointOfInterestPayment cyclePointOfInterestPayment; // not implemented\\n    // CyclePointOfRateReset cyclePointOfRateReset; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; // not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    // IPS cycleOfOptionality; // not implemented\\n}\\n\\nstruct STKTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    RedeemableByIssuer redeemableByIssuer;\\n    // Seniority seniority; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 issueDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfDividend;\\n\\n    int256 nominalPrice;\\n    int256 notionalPrincipal;\\n    int256 issuePrice;\\n    int256 quantity;\\n    int256 priceAtPurchaseDate;\\n    int256 redemptionPrice;\\n    int256 priceAtTerminationDate;\\n\\n    IP dividendRecordPeriod;\\n    IP dividendPaymentPeriod;\\n    IP splitSettlementPeriod;\\n    IP redemptionRecordPeriod;\\n    IP redemptionPaymentPeriod;\\n\\n    IPS cycleOfDividend;\\n}\\n\\nstruct COLLATerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    // ContractPerformance contractPerformance; // state only\\n\\n    bytes32 marketObjectCodeOfCollateral;\\n\\n    address currency;\\n    address settlementCurrency;\\n    address collateralCurrency;\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 premiumDiscountAtIED;\\n    int256 coverageOfCollateral;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n\\n    IPS cycleOfInterestPayment;\\n}\\n\",\"keccak256\":\"0x79bdd18aa3c6bdb9bb27e50b140bf43977ced292fdf89c2b2a237a0ec6c719fb\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Conventions/BusinessDayConventions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n\\n/**\\n * @title BusinessDayConventions\\n * @notice Contains conventions of how to handle non-business days when generating schedules of events.\\n * The events schedule time can be shifted or not, if shifted it is possible that it is shifted to the next\\n * or previous valid business days, etc.\\n */\\ncontract BusinessDayConventions {\\n\\n    /**\\n     * @notice Used in POFs and STFs for DCFs.\\n     * No shifting is applied if a Calc/Shift instead of Shift/Calc BDC is provided.\\n     */\\n    function shiftCalcTime(\\n        uint256 timestamp,\\n        BusinessDayConvention convention,\\n        Calendar calendar,\\n        uint256 maturityDate\\n    )\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        if (\\n            convention == BusinessDayConvention.CSF ||\\n            convention == BusinessDayConvention.CSMF ||\\n            convention == BusinessDayConvention.CSP ||\\n            convention == BusinessDayConvention.CSMP\\n        ) {\\n            return timestamp;\\n        }\\n\\n        return shiftEventTime(timestamp, convention, calendar, maturityDate);\\n    }\\n\\n    /*\\n     * @notice Used for generating event schedules (for single events and event cycles schedules).\\n     * This convention assumes that when shifting the events schedule time according\\n     * to a BDC, the time is shifted first and calculations are performed thereafter.\\n     * (Calculations in POFs and STFs are based on the shifted time as well)\\n     */\\n    function shiftEventTime(\\n        uint256 timestamp,\\n        BusinessDayConvention convention,\\n        Calendar calendar,\\n        uint256 maturityDate\\n    )\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        // do not shift if equal to maturity date\\n        if (timestamp == maturityDate) return timestamp;\\n\\n        // Shift/Calc Following, Calc/Shift following\\n        if (convention == BusinessDayConvention.SCF || convention == BusinessDayConvention.CSF) {\\n            return getClosestBusinessDaySameDayOrFollowing(timestamp, calendar);\\n        // Shift/Calc Modified Following, Calc/Shift Modified following\\n        // Same as unmodified if shifted date is in the same month, if not it returns the previous buiness-day\\n        } else if (convention == BusinessDayConvention.SCMF || convention == BusinessDayConvention.CSMF) {\\n            uint256 followingOrSameBusinessDay = getClosestBusinessDaySameDayOrFollowing(timestamp, calendar);\\n            if (BokkyPooBahsDateTimeLibrary.getMonth(followingOrSameBusinessDay) == BokkyPooBahsDateTimeLibrary.getMonth(timestamp)) {\\n                return followingOrSameBusinessDay;\\n            }\\n            return getClosestBusinessDaySameDayOrPreceeding(timestamp, calendar);\\n        // Shift/Calc Preceeding, Calc/Shift Preceeding\\n        } else if (convention == BusinessDayConvention.SCP || convention == BusinessDayConvention.CSP) {\\n            return getClosestBusinessDaySameDayOrPreceeding(timestamp, calendar);\\n        // Shift/Calc Modified Preceeding, Calc/Shift Modified Preceeding\\n        // Same as unmodified if shifted date is in the same month, if not it returns the following buiness-day\\n        } else if (convention == BusinessDayConvention.SCMP || convention == BusinessDayConvention.CSMP) {\\n            uint256 preceedingOrSameBusinessDay = getClosestBusinessDaySameDayOrPreceeding(timestamp, calendar);\\n            if (BokkyPooBahsDateTimeLibrary.getMonth(preceedingOrSameBusinessDay) == BokkyPooBahsDateTimeLibrary.getMonth(timestamp)) {\\n                return preceedingOrSameBusinessDay;\\n            }\\n            return getClosestBusinessDaySameDayOrFollowing(timestamp, calendar);\\n        }\\n\\n        return timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the following business day if a non-business day is provided.\\n     * (Returns the same day if calendar != MondayToFriday)\\n     */\\n    function getClosestBusinessDaySameDayOrFollowing(uint256 timestamp, Calendar calendar)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (calendar == Calendar.MF) {\\n            if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 6) {\\n                return BokkyPooBahsDateTimeLibrary.addDays(timestamp, 2);\\n            } else if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 7) {\\n                return BokkyPooBahsDateTimeLibrary.addDays(timestamp, 1);\\n            }\\n        }\\n        return timestamp;\\n    }\\n\\n    /**\\n     * @notice Returns the previous buiness day if a non-businessday is provided.\\n     * (Returns the same day if calendar != MondayToFriday)\\n     */\\n    function getClosestBusinessDaySameDayOrPreceeding(uint256 timestamp, Calendar calendar)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (calendar == Calendar.MF) {\\n            if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 6) {\\n                return BokkyPooBahsDateTimeLibrary.subDays(timestamp, 1);\\n            } else if (BokkyPooBahsDateTimeLibrary.getDayOfWeek(timestamp) == 7) {\\n                return BokkyPooBahsDateTimeLibrary.subDays(timestamp, 2);\\n            }\\n        }\\n        return timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x1406e47e0631852d7cab09816927778609dd56893df469ecc7a492bb8b45aa67\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Conventions/ContractRoleConventions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n\\n/**\\n * @title ContractRoleConventions\\n */\\ncontract ContractRoleConventions {\\n\\n    /**\\n     * Returns the role sign for a given Contract Role.\\n     */\\n    function roleSign(ContractRole contractRole)\\n        internal\\n        pure\\n        returns (int8)\\n    {\\n        if (contractRole == ContractRole.RPA) return 1;\\n        if (contractRole == ContractRole.RPL) return -1;\\n\\n        if (contractRole == ContractRole.BUY) return 1;\\n        if (contractRole == ContractRole.SEL) return -1;\\n\\n        if (contractRole == ContractRole.RFL) return 1;\\n        if (contractRole == ContractRole.PFL) return -1;\\n\\n        revert(\\\"ContractRoleConvention.roleSign: ATTRIBUTE_NOT_FOUND\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf9a875b4c55500a23f8ac6bc854cb0f7bbc679f76127bf22e8a09410582641cc\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Conventions/DayCountConventions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\nimport \\\"../ACTUSConstants.sol\\\";\\n\\nimport \\\"../SignedMath.sol\\\";\\n\\n\\n/**\\n * @title DayCountConventions\\n * @notice Implements various ISDA day count conventions as specified by ACTUS\\n */\\ncontract DayCountConventions is ACTUSConstants {\\n\\n    using SafeMath for uint;\\n    using SignedSafeMath for int;\\n    using SignedMath for int;\\n\\n    /**\\n     * Returns the fraction of the year between two timestamps.\\n     */\\n    function yearFraction(\\n        uint256 startTimestamp,\\n        uint256 endTimestamp,\\n        DayCountConvention ipdc,\\n        uint256 maturityDate\\n    )\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        require(endTimestamp >= startTimestamp, \\\"Core.yearFraction: START_NOT_BEFORE_END\\\");\\n        if (ipdc == DayCountConvention.AA) {\\n            return actualActual(startTimestamp, endTimestamp);\\n        } else if (ipdc == DayCountConvention.A360) {\\n            return actualThreeSixty(startTimestamp, endTimestamp);\\n        } else if (ipdc == DayCountConvention.A365) {\\n            return actualThreeSixtyFive(startTimestamp, endTimestamp);\\n        } else if (ipdc == DayCountConvention._30E360) {\\n            return thirtyEThreeSixty(startTimestamp, endTimestamp);\\n        } else if (ipdc == DayCountConvention._30E360ISDA) {\\n            return thirtyEThreeSixtyISDA(startTimestamp, endTimestamp, maturityDate);\\n        } else if (ipdc == DayCountConvention._28E336) {\\n            return twentyEightEThreeThirtySix(startTimestamp, endTimestamp, maturityDate);\\n        } else if (ipdc == DayCountConvention.ONE) {\\n            return one(startTimestamp, endTimestamp);\\n        } else if (ipdc == DayCountConvention.OBYT) {\\n            return oneByTwelve(startTimestamp, endTimestamp);\\n        } else if (ipdc == DayCountConvention.HRSAA) {\\n            return hoursActualActual(startTimestamp, endTimestamp);\\n        } else if (ipdc == DayCountConvention.MINAA) {\\n            return minutesActualActual(startTimestamp, endTimestamp);\\n        } else if (ipdc == DayCountConvention.SECAA) {\\n            return secondsActualActual(startTimestamp, endTimestamp);\\n        } else {\\n            revert(\\\"DayCountConvention.yearFraction: ATTRIBUTE_NOT_FOUND.\\\");\\n        }\\n    }\\n\\n    /**\\n     * ISDA A/A day count convention\\n     */\\n    function actualActual(uint256 startTime, uint256 endTime)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        uint256 d1Year = BokkyPooBahsDateTimeLibrary.getYear(startTime);\\n        uint256 d2Year = BokkyPooBahsDateTimeLibrary.getYear(endTime);\\n\\n        int256 firstBasis = (BokkyPooBahsDateTimeLibrary.isLeapYear(startTime)) ? 366 : 365;\\n\\n        if (d1Year == d2Year) {\\n            return int256(BokkyPooBahsDateTimeLibrary.diffDays(startTime, endTime)).floatDiv(firstBasis);\\n        }\\n\\n        int256 secondBasis = (BokkyPooBahsDateTimeLibrary.isLeapYear(endTime)) ? 366 : 365;\\n\\n        int256 firstFraction = int256(BokkyPooBahsDateTimeLibrary.diffDays(\\n            startTime,\\n            BokkyPooBahsDateTimeLibrary.timestampFromDate(d1Year.add(1), 1, 1)\\n        )).floatDiv(firstBasis);\\n        int256 secondFraction = int256(BokkyPooBahsDateTimeLibrary.diffDays(\\n            BokkyPooBahsDateTimeLibrary.timestampFromDate(d2Year, 1, 1),\\n            endTime\\n        )).floatDiv(secondBasis);\\n\\n        return firstFraction.add(secondFraction).add(int256(d2Year.sub(d1Year).sub(1)));\\n    }\\n\\n    /**\\n     * ISDA A/360 day count convention\\n     */\\n    function actualThreeSixty(uint256 startTime, uint256 endTime)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        return (int256((endTime.sub(startTime)).div(86400)).floatDiv(360));\\n    }\\n\\n    /**\\n     * ISDA A/365-Fixed day count convention\\n     */\\n    function actualThreeSixtyFive(uint256 startTime, uint256 endTime)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        return (int256((endTime.sub(startTime)).div(86400)).floatDiv(365));\\n    }\\n\\n    /**\\n     * ISDA 30E/360 day count convention\\n     */\\n    function thirtyEThreeSixty(uint256 startTime, uint256 endTime)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        uint256 d1Day;\\n        uint256 d1Month;\\n        uint256 d1Year;\\n\\n        uint256 d2Day;\\n        uint256 d2Month;\\n        uint256 d2Year;\\n\\n        (d1Year, d1Month, d1Day) = BokkyPooBahsDateTimeLibrary.timestampToDate(startTime);\\n        (d2Year, d2Month, d2Day) = BokkyPooBahsDateTimeLibrary.timestampToDate(endTime);\\n\\n        if (d1Day == 31) {\\n            d1Day = 30;\\n        }\\n\\n        if (d2Day == 31) {\\n            d2Day = 30;\\n        }\\n\\n        int256 delD = int256(d2Day).sub(int256(d1Day));\\n        int256 delM = int256(d2Month).sub(int256(d1Month));\\n        int256 delY = int256(d2Year).sub(int256(d1Year));\\n\\n        return ((delY.mul(360).add(delM.mul(30)).add(delD)).floatDiv(360));\\n    }\\n\\n    /**\\n     * ISDA 30E/360-ISDA day count convention\\n     */\\n    function thirtyEThreeSixtyISDA(uint256 startTime, uint256 endTime, uint256 maturityDate)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        uint256 d1Day;\\n        uint256 d1Month;\\n        uint256 d1Year;\\n\\n        uint256 d2Day;\\n        uint256 d2Month;\\n        uint256 d2Year;\\n\\n        (d1Year, d1Month, d1Day) = BokkyPooBahsDateTimeLibrary.timestampToDate(startTime);\\n        (d2Year, d2Month, d2Day) = BokkyPooBahsDateTimeLibrary.timestampToDate(endTime);\\n\\n        if (d1Day == BokkyPooBahsDateTimeLibrary.getDaysInMonth(startTime)) {\\n            d1Day = 30;\\n        }\\n\\n        if (!(endTime == maturityDate && d2Month == 2) && d2Day == BokkyPooBahsDateTimeLibrary.getDaysInMonth(endTime)) {\\n            d2Day = 30;\\n        }\\n\\n        int256 delD = int256(d2Day).sub(int256(d1Day));\\n        int256 delM = int256(d2Month).sub(int256(d1Month));\\n        int256 delY = int256(d2Year).sub(int256(d1Year));\\n\\n        return ((delY.mul(360).add(delM.mul(30)).add(delD)).floatDiv(360));\\n    }\\n\\n    /**\\n     * ISDA 28E/336 day count convention\\n     */\\n    function twentyEightEThreeThirtySix(uint256 startTime, uint256 endTime, uint256 maturityDate)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        (uint256 d1Year, uint256 d1Month, uint256 d1Day) = BokkyPooBahsDateTimeLibrary.timestampToDate(startTime);\\n        (uint256 d2Year, uint256 d2Month, uint256 d2Day) = BokkyPooBahsDateTimeLibrary.timestampToDate(endTime);\\n\\n        if (d1Day == BokkyPooBahsDateTimeLibrary.getDaysInMonth(startTime)) {\\n            d1Day = 28;\\n        }\\n\\n        // if (!(endTime == maturityDate && d2Month == 2) && d2Day == BokkyPooBahsDateTimeLibrary.getDaysInMonth(endTime)) {\\n        if (!(endTime == maturityDate && d2Month == 2) && (d2Day == BokkyPooBahsDateTimeLibrary.getDaysInMonth(startTime) || d2Day > 28)) {\\n            d2Day = 28;\\n        }\\n\\n        int256 delD = int256(d2Day).sub(int256(d1Day));\\n        int256 delM = int256(d2Month).sub(int256(d1Month));\\n        int256 delY = int256(d2Year).sub(int256(d1Year));\\n\\n        return ((delY.mul(336).add(delM.mul(28)).add(delD)).floatDiv(336));\\n    }\\n\\n    /**\\n     * One\\n     */\\n    function one(uint256 startTime, uint256 endTime)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        return ONE_POINT_ZERO;\\n    }\\n\\n    /**\\n     * One By Twelve\\n     */\\n    function oneByTwelve(uint256 startTime, uint256 endTime)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        return int256(ONE_POINT_ZERO).floatDiv(12 * ONE_POINT_ZERO);\\n    }\\n\\n    /**\\n     * Hours/Actual/Actual\\n     */\\n    function hoursActualActual(uint256 startTime, uint256 endTime)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        uint256 d1Year = BokkyPooBahsDateTimeLibrary.getYear(startTime);\\n        uint256 d2Year = BokkyPooBahsDateTimeLibrary.getYear(endTime);\\n\\n        // no risk of overflow\\n        // 366 * 24, 365 * 24\\n        int256 firstBasis = (BokkyPooBahsDateTimeLibrary.isLeapYear(startTime)) ? 8784 : 8760;\\n\\n        if (d1Year == d2Year) {\\n            return int256(BokkyPooBahsDateTimeLibrary.diffHours(startTime, endTime)).floatDiv(firstBasis);\\n        }\\n\\n        // no risk of overflow\\n        // 366 * 24, 365 * 24\\n        int256 secondBasis = (BokkyPooBahsDateTimeLibrary.isLeapYear(endTime)) ? 8784 : 8760;\\n\\n        int256 firstFraction = int256(BokkyPooBahsDateTimeLibrary.diffHours(\\n            startTime,\\n            BokkyPooBahsDateTimeLibrary.timestampFromDate(d1Year.add(1), 1, 1)\\n        )).floatDiv(firstBasis);\\n        int256 secondFraction = int256(BokkyPooBahsDateTimeLibrary.diffHours(\\n            BokkyPooBahsDateTimeLibrary.timestampFromDate(d2Year, 1, 1),\\n            endTime\\n        )).floatDiv(secondBasis);\\n\\n        return firstFraction.add(secondFraction).add(int256(d2Year.sub(d1Year).sub(1)));\\n    }\\n\\n    /**\\n     * Minutes/Actual/Actual\\n     */\\n    function minutesActualActual(uint256 startTime, uint256 endTime)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        uint256 d1Year = BokkyPooBahsDateTimeLibrary.getYear(startTime);\\n        uint256 d2Year = BokkyPooBahsDateTimeLibrary.getYear(endTime);\\n\\n        // no risk of overflow\\n        // 366 * 1440, 365 * 1440\\n        int256 firstBasis = (BokkyPooBahsDateTimeLibrary.isLeapYear(startTime)) ? 527040 : 525600;\\n\\n        if (d1Year == d2Year) {\\n            return int256(BokkyPooBahsDateTimeLibrary.diffMinutes(startTime, endTime)).floatDiv(firstBasis);\\n        }\\n\\n        // no risk of overflow\\n        // 366 * 1440, 365 * 1440\\n        int256 secondBasis = (BokkyPooBahsDateTimeLibrary.isLeapYear(endTime)) ? 527040 : 525600;\\n\\n        int256 firstFraction = int256(BokkyPooBahsDateTimeLibrary.diffMinutes(\\n            startTime,\\n            BokkyPooBahsDateTimeLibrary.timestampFromDate(d1Year.add(1), 1, 1)\\n        )).floatDiv(firstBasis);\\n        int256 secondFraction = int256(BokkyPooBahsDateTimeLibrary.diffMinutes(\\n            BokkyPooBahsDateTimeLibrary.timestampFromDate(d2Year, 1, 1),\\n            endTime\\n        )).floatDiv(secondBasis);\\n\\n        return firstFraction.add(secondFraction).add(int256(d2Year.sub(d1Year).sub(1)));\\n    }\\n\\n    /**\\n     * Seconds/Actual/Actual\\n     */\\n    function secondsActualActual(uint256 startTime, uint256 endTime)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        uint256 d1Year = BokkyPooBahsDateTimeLibrary.getYear(startTime);\\n        uint256 d2Year = BokkyPooBahsDateTimeLibrary.getYear(endTime);\\n\\n        // no risk of overflow\\n        // 366 * 86400, 365 * 86400\\n        int256 firstBasis = (BokkyPooBahsDateTimeLibrary.isLeapYear(startTime)) ? 31622400 : 31536000;\\n\\n        if (d1Year == d2Year) {\\n            return int256(BokkyPooBahsDateTimeLibrary.diffSeconds(startTime, endTime)).floatDiv(firstBasis);\\n        }\\n\\n        // no risk of overflow\\n        // 366 * 86400, 365 * 86400\\n        int256 secondBasis = (BokkyPooBahsDateTimeLibrary.isLeapYear(endTime)) ? 31622400 : 31536000;\\n\\n        int256 firstFraction = int256(BokkyPooBahsDateTimeLibrary.diffSeconds(\\n            startTime,\\n            BokkyPooBahsDateTimeLibrary.timestampFromDate(d1Year.add(1), 1, 1)\\n        )).floatDiv(firstBasis);\\n        int256 secondFraction = int256(BokkyPooBahsDateTimeLibrary.diffSeconds(\\n            BokkyPooBahsDateTimeLibrary.timestampFromDate(d2Year, 1, 1),\\n            endTime\\n        )).floatDiv(secondBasis);\\n\\n        return firstFraction.add(secondFraction).add(int256(d2Year.sub(d1Year).sub(1)));\\n    }\\n}\\n\",\"keccak256\":\"0x4fcc109bba8539931926e96cff0a341c755bfff481015cec227a38f9493d0210\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Conventions/EndOfMonthConventions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n\\n/**\\n * @title EndOfMonthConventions\\n * @notice Implements the ACTUS end of month convention.\\n */\\ncontract EndOfMonthConventions {\\n\\n    /**\\n     * This function makes an adjustment on the end of month convention.\\n     * @dev The following is considered to dertermine if schedule dates are shifted to the end of month:\\n     * - The convention SD (same day) means not adjusting, EM (end of month) means adjusting\\n     * - Dates are only shifted if the schedule start date is an end-of-month date\\n     * - Dates are only shifted if the schedule cycle is based on an \\\"M\\\" period unit or multiple thereof\\n     * @param eomc the end of month convention to adjust\\n     * @param startTime timestamp of the cycle start\\n     * @param cycle the cycle struct\\n     * @return the adjusted end of month convention\\n     */\\n    function adjustEndOfMonthConvention(\\n        EndOfMonthConvention eomc,\\n        uint256 startTime,\\n        IPS memory cycle\\n    )\\n        public\\n        pure\\n        returns (EndOfMonthConvention)\\n    {\\n        if (eomc == EndOfMonthConvention.EOM) {\\n            // check if startTime is last day in month and schedule has month based period\\n            // otherwise switch to SD convention\\n            if (\\n                BokkyPooBahsDateTimeLibrary.getDay(startTime) == BokkyPooBahsDateTimeLibrary.getDaysInMonth(startTime) &&\\n                (cycle.p == P.M || cycle.p == P.Q || cycle.p == P.H)\\n            ) {\\n                return EndOfMonthConvention.EOM;\\n            }\\n            return EndOfMonthConvention.SD;\\n        } else if (eomc == EndOfMonthConvention.SD) {\\n            return EndOfMonthConvention.SD;\\n        }\\n        revert(\\\"EndOfMonthConvention.adjustEndOfMonthConvention: ATTRIBUTE_NOT_FOUND.\\\");\\n    }\\n\\n    /**\\n\\t * This function is for the EndOfMonthConvention.EOM convention and\\n\\t * shifts a timestamp to the last day of the month.\\n\\t * @param timestamp the timestmap to shift\\n\\t * @return the shifted timestamp\\n\\t */\\n\\tfunction shiftEndOfMonth(uint256 timestamp)\\n\\t  internal\\n\\t  pure\\n\\t  returns (uint256)\\n\\t{\\n        // // check if startTime is last day in month and schedule has month based period\\n        // // otherwise switch to SD convention\\n        // if (\\n        //     eomc != EndOfMonthConvention.EOM\\n        //     || BokkyPooBahsDateTimeLibrary.getDay(startTime) != BokkyPooBahsDateTimeLibrary.getDaysInMonth(startTime)\\n        //     || (cycle.p == P.M || cycle.p == P.Q || cycle.p == P.H)\\n        // ) {\\n        //     // SD\\n        //     return timestamp;\\n        // }\\n\\n\\t\\tuint256 year;\\n\\t\\tuint256 month;\\n\\t\\tuint256 day;\\n\\t\\t(year, month, day) = BokkyPooBahsDateTimeLibrary.timestampToDate(timestamp);\\n\\t\\tuint256 lastDayOfMonth = BokkyPooBahsDateTimeLibrary._getDaysInMonth(year, month);\\n\\n\\t\\treturn BokkyPooBahsDateTimeLibrary.timestampFromDate(year, month, lastDayOfMonth);\\n\\t}\\n}\\n\",\"keccak256\":\"0xdf4d28ba01767a6e737bdcf2e8e9e08143f9cd08a6d62ed90780031c4811876f\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Core.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\r\\npragma solidity ^0.7.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"./ACTUSTypes.sol\\\";\\r\\nimport \\\"./ACTUSConstants.sol\\\";\\r\\nimport \\\"./Utils/Utils.sol\\\";\\r\\nimport \\\"./Conventions/BusinessDayConventions.sol\\\";\\r\\nimport \\\"./Conventions/ContractRoleConventions.sol\\\";\\r\\nimport \\\"./Conventions/DayCountConventions.sol\\\";\\r\\nimport \\\"./Conventions/EndOfMonthConventions.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Core\\r\\n * @notice Contains all type definitions, conventions as specified by the ACTUS Standard\\r\\n * and utility methods for generating event schedules\\r\\n */\\r\\ncontract Core is\\r\\n    ACTUSConstants,\\r\\n    ContractRoleConventions,\\r\\n    DayCountConventions,\\r\\n    EndOfMonthConventions,\\r\\n    Utils\\r\\n{}\\r\\n\",\"keccak256\":\"0x4f0be10497e1c0e5facce3686a8454bed5989ce9cc440e8438057f07ff5c04f8\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/SignedMath.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * Advanced math library for signed integers\\n * (including floats which are represented as multiples of 10 ** 18)\\n */\\nlibrary SignedMath {\\n\\n    int256 constant private INT256_MIN = -2 ** 255;\\n\\n    uint256 constant public PRECISION = 18;\\n    uint256 constant public MULTIPLICATOR = 10 ** PRECISION;\\n\\n\\n    /**\\n     * @dev The product of a and b has to be less than INT256_MAX (~10 ** 76),\\n     * as devision (normalization) is performed after multiplication\\n     * Upper boundary would be (10 ** 58) * (MULTIPLICATOR) == ~10 ** 76\\n     */\\n    function floatMult(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        if (a == 0 || b == 0) return 0;\\n\\n        require(!(a == -1 && b == INT256_MIN), \\\"SignedMath.floatMult: OVERFLOW_DETECTED\\\");\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedMath.floatMult: OVERFLOW_DETECTED\\\");\\n\\n        // normalize (divide by MULTIPLICATOR)\\n        int256 d = c / int256(MULTIPLICATOR);\\n        require(d != 0, \\\"SignedMath.floatMult: CANNOT_REPRESENT_GRANULARITY\\\");\\n\\n        return d;\\n    }\\n\\n    function floatDiv(int256 a, int256 b)\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        require(b != 0, \\\"SignedMath.floatDiv: DIVIDED_BY_ZERO\\\");\\n\\n        // normalize (multiply by MULTIPLICATOR)\\n        if (a == 0) return 0;\\n        int256 c = a * int256(MULTIPLICATOR);\\n        require(c / a == int256(MULTIPLICATOR), \\\"SignedMath.floatDiv: OVERFLOW_DETECTED\\\");\\n\\n        require(!(b == -1 && a == INT256_MIN), \\\"SignedMath.floatDiv: OVERFLOW_DETECTED\\\");\\n        int256 d = c / b;\\n        require(d != 0, \\\"SignedMath.floatDiv: CANNOT_REPRESENT_GRANULARITY\\\");\\n\\n        return d;\\n    }\\n\\n    /**\\n        * @dev Returns the smallest of two signed numbers.\\n        */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n            return a <= b ? a : b;\\n    }\\n\\n    /**\\n        * @dev Returns the largest of two signed numbers.\\n        */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n            return a >= b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x884bb3aec6597cb12c2ce3417ec60a1ffc82970342eefde5b195fad728efa233\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Utils/CycleUtils.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath as SafeMul} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\nimport \\\"../ACTUSConstants.sol\\\";\\nimport \\\"../Conventions/EndOfMonthConventions.sol\\\";\\nimport \\\"./PeriodUtils.sol\\\";\\n\\n\\n/**\\n * @title Schedule\\n * @notice Methods related to generating event schedules.\\n */\\ncontract CycleUtils is ACTUSConstants, EndOfMonthConventions, PeriodUtils {\\n\\n    using BokkyPooBahsDateTimeLibrary for uint;\\n    using SafeMul for uint;\\n\\n    /**\\n     * @notice Applies the cycle n - times (n := cycleIndex) to a given date\\n     */\\n    function getNextCycleDate(IPS memory cycle, uint256 cycleStart, uint256 cycleIndex)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 newTimestamp;\\n\\n        if (cycle.p == P.D) {\\n            newTimestamp = cycleStart.addDays(cycle.i.mul(cycleIndex));\\n        } else if (cycle.p == P.W) {\\n            newTimestamp = cycleStart.addDays(cycle.i.mul(7).mul(cycleIndex));\\n        } else if (cycle.p == P.M) {\\n            newTimestamp = cycleStart.addMonths(cycle.i.mul(cycleIndex));\\n        } else if (cycle.p == P.Q) {\\n            newTimestamp = cycleStart.addMonths(cycle.i.mul(3).mul(cycleIndex));\\n        } else if (cycle.p == P.H) {\\n            newTimestamp = cycleStart.addMonths(cycle.i.mul(6).mul(cycleIndex));\\n        } else if (cycle.p == P.Y) {\\n            newTimestamp = cycleStart.addYears(cycle.i.mul(cycleIndex));\\n        } else {\\n            revert(\\\"CycleUtils.getNextCycleDate: ATTRIBUTE_NOT_FOUND\\\");\\n        }\\n\\n        return newTimestamp;\\n    }\\n\\n    /**\\n     * Computes an array of timestamps that represent dates in a cycle falling within a given segment.\\n     * @dev There are some notable edge cases: If the cycle is \\\"not set\\\" we return the start end end dates\\n     * of the cycle if they lie within the segment. Otherwise and empty array is returned.\\n     * @param cycleStart start time of the cycle\\n     * @param cycleEnd end time of the cycle\\n     * @param cycle IPS cycle\\n     * @param eomc end of month convention\\n     * @param addEndDate end date of the cycle should be added to the result if it falls in the segment\\n     * @param segmentStart start time of the segment\\n     * @param segmentEnd end time of the segment\\n     * @return an array of timestamps from the given cycle that fall within the specified segement\\n     */\\n    function computeDatesFromCycleSegment(\\n        uint256 cycleStart,\\n        uint256 cycleEnd,\\n        IPS memory cycle,\\n        EndOfMonthConvention eomc,\\n        bool addEndDate,\\n        uint256 segmentStart,\\n        uint256 segmentEnd\\n    )\\n        internal\\n        pure\\n        returns (uint256[MAX_CYCLE_SIZE] memory)\\n    {\\n        uint256[MAX_CYCLE_SIZE] memory dates;\\n        uint256 index;\\n\\n        // if the cycle is not set we return only the cycle start end end dates under these conditions:\\n        // we return the cycle start, if it's in the segment\\n        // in case of addEntTime = true, the cycle end is also returned if in the segment\\n        if (cycle.isSet == false) {\\n            if (isInSegment(cycleStart, segmentStart, segmentEnd)) {\\n                dates[index] = cycleStart;\\n                index++;\\n            }\\n            if (isInSegment(cycleEnd, segmentStart, segmentEnd)) {\\n                if (addEndDate == true) dates[index] = cycleEnd;\\n            }\\n            return dates;\\n        }\\n\\n        uint256 date = cycleStart;\\n        uint256 cycleIndex;\\n\\n        EndOfMonthConvention actualEOMC = adjustEndOfMonthConvention(eomc, cycleStart, cycle);\\n\\n        // walk through the cycle and create the cycle dates to be returned\\n        while (date < cycleEnd) {\\n            // if date is in segment and MAX_CYCLE_SIZE is not reached add it to the output array\\n            if (isInSegment(date, segmentStart, segmentEnd)) {\\n                require(index < (MAX_CYCLE_SIZE - 2), \\\"CycleUtils.computeDatesFromCycle: MAX_CYCLE_SIZE\\\");\\n                dates[index] = date;\\n                index++;\\n            }\\n\\n            cycleIndex++;\\n\\n            date = (actualEOMC == EndOfMonthConvention.EOM)\\n                ? shiftEndOfMonth(getNextCycleDate(cycle, cycleStart, cycleIndex))\\n                : getNextCycleDate(cycle, cycleStart, cycleIndex);\\n        }\\n\\n        // add additional time at the end if addEndDate\\n        if (addEndDate == true) {\\n            if (isInSegment(cycleEnd, segmentStart, segmentEnd)) {\\n                dates[index] = cycleEnd;\\n            }\\n        }\\n\\n        // handle a special case where S is set to LONG (e.g. for trimming a cycle to the maturity date)\\n        if (index > 0 && isInSegment(dates[index - 1], segmentStart, segmentEnd)) {\\n            if (cycle.s == S.LONG && index > 1 && cycleEnd != date) {\\n                dates[index - 1] = dates[index];\\n                delete dates[index];\\n            }\\n        }\\n\\n        return dates;\\n    }\\n\\n    /**\\n     * Computes the next date for a given an IPS cycle.\\n     * @param cycle IPS cycle\\n     * @param eomc end of month convention\\n     * @param anchorDate anchor date of the cycle\\n     * @param precedingDate the previous date of the cycle\\n     * @param addEndDate end date of the cycle should be added to the result if it falls in the segment\\n     * @param cycleEnd end date of the cyclic schedule\\n     * @return next date of the cycle\\n     */\\n    function computeNextCycleDateFromPrecedingDate(\\n        IPS memory cycle,\\n        EndOfMonthConvention eomc,\\n        uint256 anchorDate,\\n        uint256 precedingDate,\\n        bool addEndDate,\\n        uint256 cycleEnd\\n    )\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (cycle.isSet == false || precedingDate == 0) return anchorDate;\\n\\n        uint256 nextCyclicDate = (adjustEndOfMonthConvention(eomc, anchorDate, cycle) == EndOfMonthConvention.EOM)\\n            ? shiftEndOfMonth(getNextCycleDate(cycle, precedingDate, 1))\\n            : getNextCycleDate(cycle, precedingDate, 1);\\n\\n        if (addEndDate && cycleEnd != 0) {\\n            // handle infinite loop (since preceding date is cycleEnd)\\n            if (precedingDate == cycleEnd) return 0;\\n            // add occurence at cycle end if date is greater than cycle end\\n            if (nextCyclicDate > cycleEnd) return cycleEnd;\\n        }\\n        // remove occurence if it is one cycle end\\n        if (addEndDate == false && cycleEnd != 0 && nextCyclicDate == cycleEnd) return 0;\\n\\n        return nextCyclicDate;\\n    }\\n\\n    /*\\n     * @notice Checks if a timestamp is in a given range.\\n     */\\n    function isInSegment(\\n        uint256 timestamp,\\n        uint256 startTimestamp,\\n        uint256 endTimestamp\\n    )\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (startTimestamp > endTimestamp) return false;\\n        if (startTimestamp <= timestamp && timestamp <= endTimestamp) return true;\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x93c64a514dea64d4f854183d2b60061eca88f3d828804cfee63ac9999bb449dc\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Utils/EventUtils.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n/**\\n * @title EventUtils\\n * @notice Methods for encoding decoding events\\n */\\ncontract EventUtils {\\n\\n    function encodeEvent(EventType eventType, uint256 scheduleTime)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return (\\n            bytes32(uint256(uint8(eventType))) << 248 |\\n            bytes32(scheduleTime)\\n        );\\n    }\\n\\n    function decodeEvent(bytes32 _event)\\n        public\\n        pure\\n        returns (EventType, uint256)\\n    {\\n        EventType eventType = EventType(uint8(uint256(_event >> 248)));\\n        uint256 scheduleTime = uint256(uint64(uint256(_event)));\\n\\n        return (eventType, scheduleTime);\\n    }\\n\\n    /**\\n     * @notice Returns the epoch offset for a given event type to determine the\\n     * correct order of events if multiple events have the same timestamp\\n     */\\n    function getEpochOffset(EventType eventType)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(eventType);\\n    }\\n}\\n\",\"keccak256\":\"0x0b57772142cc74943c55eea2bd2c8d2fd035bead19592b75cd4f7ad3159f96ee\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Utils/PeriodUtils.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath as SafeMul} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n/**\\n * @title PeriodUtils\\n * @notice Utility methods for dealing with Periods\\n */\\ncontract PeriodUtils {\\n\\n    using BokkyPooBahsDateTimeLibrary for uint;\\n    using SafeMul for uint;\\n\\n    /**\\n     * @notice Applies a period in IP notation to a given timestamp\\n     */\\n    function getTimestampPlusPeriod(IP memory period, uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 newTimestamp;\\n\\n        if (period.p == P.D) {\\n            newTimestamp = timestamp.addDays(period.i);\\n        } else if (period.p == P.W) {\\n            newTimestamp = timestamp.addDays(period.i.mul(7));\\n        } else if (period.p == P.M) {\\n            newTimestamp = timestamp.addMonths(period.i);\\n        } else if (period.p == P.Q) {\\n            newTimestamp = timestamp.addMonths(period.i.mul(3));\\n        } else if (period.p == P.H) {\\n            newTimestamp = timestamp.addMonths(period.i.mul(6));\\n        } else if (period.p == P.Y) {\\n            newTimestamp = timestamp.addYears(period.i);\\n        } else {\\n            revert(\\\"PeriodUtils.getTimestampPlusPeriod: ATTRIBUTE_NOT_FOUND\\\");\\n        }\\n\\n        return newTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x7ba86e98c89c11d4b16bb7cf81339679e01c7a73d099a980e71335bb890e82d9\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Utils/Utils.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\nimport \\\"../Conventions/BusinessDayConventions.sol\\\";\\n\\nimport \\\"./EventUtils.sol\\\";\\nimport \\\"./PeriodUtils.sol\\\";\\nimport \\\"./CycleUtils.sol\\\";\\n\\n\\n/**\\n * @title Utils\\n * @notice Utility methods used throughout Core and all Engines\\n */\\ncontract Utils is BusinessDayConventions, EventUtils, PeriodUtils, CycleUtils {\\n\\n    /**\\n     * @notice Returns the event time for a given schedule time\\n     * @dev For optimization reasons not located in EventUtil\\n     * by applying the BDC specified in the terms\\n     */\\n    function computeEventTimeForEvent(bytes32 _event, BusinessDayConvention bdc, Calendar calendar, uint256 maturityDate)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        (, uint256 scheduleTime) = decodeEvent(_event);\\n\\n        // handle maturity date\\n        return shiftEventTime(scheduleTime, bdc, calendar, maturityDate);\\n    }\\n}\\n\",\"keccak256\":\"0x0ab55d9aea5c5ba13eb25b08ec98afa1f48693644022c58b0f212dddcbc8a2a4\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/COLLA/COLLAEngine.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\nimport \\\"../../Core/Core.sol\\\";\\nimport \\\"../../Core/SignedMath.sol\\\";\\nimport \\\"./ICOLLAEngine.sol\\\";\\nimport \\\"./COLLASTF.sol\\\";\\nimport \\\"./COLLAPOF.sol\\\";\\n\\n\\n/**\\n * @title COLLAEngine\\n * @notice Inherits from BaseEngine by implementing STFs, POFs according to the ACTUS standard for a COLLA contract\\n * @dev All numbers except unix timestamp are represented as multiple of 10 ** 18\\n */\\ncontract COLLAEngine is Core, COLLASTF, COLLAPOF, ICOLLAEngine {\\n\\n    using SignedSafeMath for int;\\n    using SignedMath for int;\\n\\n\\n    function contractType() external pure override returns (ContractType) {\\n        return ContractType.COLLA;\\n    }\\n\\n    /**\\n     * Applys an event to the current state of a contract and returns the resulting contract state.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event to be applied to the contract state\\n     * @param externalData external data needed for STF evaluation (e.g. rate for RR events)\\n     * @return the resulting contract state\\n     */\\n    function computeStateForEvent(\\n        COLLATerms calldata terms,\\n        COLLAState calldata state,\\n        bytes32 _event,\\n        bytes calldata externalData\\n    )\\n        external\\n        pure\\n        override\\n        returns (COLLAState memory)\\n    {\\n        return stateTransitionFunction(\\n            terms,\\n            state,\\n            _event,\\n            externalData\\n        );\\n    }\\n\\n    /**\\n     * Evaluates the payoff for an event under the current state of the contract.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event for which the payoff should be evaluated\\n     * @param externalData external data needed for POF evaluation (e.g. fxRate)\\n     * @return the payoff of the event\\n     */\\n    function computePayoffForEvent(\\n        COLLATerms calldata terms,\\n        COLLAState calldata state,\\n        bytes32 _event,\\n        bytes calldata externalData\\n    )\\n        external\\n        pure\\n        override\\n        returns (int256)\\n    {\\n        // if alternative settlementCurrency is set then apply fxRate to payoff\\n        if (terms.settlementCurrency != address(0) && terms.currency != terms.settlementCurrency) {\\n            return payoffFunction(\\n                terms,\\n                state,\\n                _event,\\n                externalData\\n            ).floatMult(abi.decode(externalData, (int256)));\\n        }\\n\\n        return payoffFunction(\\n            terms,\\n            state,\\n            _event,\\n            externalData\\n        );\\n    }\\n\\n    /**\\n     * @notice Initialize contract state space based on the contract terms.\\n     * @param terms terms of the contract\\n     * @return the initial state of the contract\\n     */\\n    function computeInitialState(COLLATerms calldata terms)\\n        external\\n        pure\\n        override\\n        returns (COLLAState memory)\\n    {\\n        COLLAState memory state;\\n\\n        state.contractPerformance = ContractPerformance.PF;\\n        state.notionalScalingMultiplier = ONE_POINT_ZERO;\\n        state.interestScalingMultiplier = ONE_POINT_ZERO;\\n        state.statusDate = terms.statusDate;\\n        state.maturityDate = terms.maturityDate;\\n        state.notionalPrincipal = terms.notionalPrincipal;\\n        state.nominalInterestRate = terms.nominalInterestRate;\\n        state.accruedInterest = terms.accruedInterest;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * @notice Computes a schedule segment of non-cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segement\\n     * @return segment of the non-cyclic schedule\\n     */\\n    function computeNonCyclicScheduleSegment(\\n        COLLATerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd\\n    )\\n        external\\n        pure\\n        override\\n        returns (bytes32[] memory)\\n    {\\n        bytes32[MAX_EVENT_SCHEDULE_SIZE] memory events;\\n        uint16 index;\\n\\n        // initial exchange\\n        if (terms.initialExchangeDate != 0) {\\n            if (isInSegment(terms.initialExchangeDate, segmentStart, segmentEnd)) {\\n                events[index] = encodeEvent(EventType.IED, terms.initialExchangeDate);\\n                index++;\\n            }\\n        }\\n\\n        // principal redemption\\n        if (terms.maturityDate != 0) {\\n            if (isInSegment(terms.maturityDate, segmentStart, segmentEnd)) {\\n                events[index] = encodeEvent(EventType.MD, terms.maturityDate);\\n                index++;\\n            }\\n        }\\n\\n        // remove null entries from returned array\\n        bytes32[] memory schedule = new bytes32[](index);\\n        for (uint256 i = 0; i < index; i++) {\\n            schedule[i] = events[i];\\n        }\\n\\n        return schedule;\\n    }\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segement\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeCyclicScheduleSegment(\\n        COLLATerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        override\\n        returns(bytes32[] memory)\\n    {\\n        bytes32[MAX_EVENT_SCHEDULE_SIZE] memory events;\\n        uint256 index;\\n\\n        // IP\\n        // interest payment related (starting with PRANX interest is paid following the PR schedule)\\n        if (eventType == EventType.IP) {\\n            if (terms.cycleAnchorDateOfInterestPayment != 0) {\\n                uint256[MAX_CYCLE_SIZE] memory interestPaymentSchedule = computeDatesFromCycleSegment(\\n                    terms.cycleAnchorDateOfInterestPayment,\\n                    terms.maturityDate,\\n                    terms.cycleOfInterestPayment,\\n                    terms.endOfMonthConvention,\\n                    true,\\n                    segmentStart,\\n                    segmentEnd\\n                );\\n                for (uint8 i = 0; i < MAX_CYCLE_SIZE; i++) {\\n                    if (interestPaymentSchedule[i] == 0) break;\\n                    if (interestPaymentSchedule[i] <= terms.capitalizationEndDate) continue;\\n                    if (isInSegment(interestPaymentSchedule[i], segmentStart, segmentEnd) == false) continue;\\n                    events[index] = encodeEvent(EventType.IP, interestPaymentSchedule[i]);\\n                    index++;\\n                }\\n            }\\n        }\\n\\n        // IPCI\\n        if (eventType == EventType.IPCI) {\\n            if (terms.cycleAnchorDateOfInterestPayment != 0 && terms.capitalizationEndDate != 0) {\\n                IPS memory cycleOfInterestCapitalization = terms.cycleOfInterestPayment;\\n                cycleOfInterestCapitalization.s = S.SHORT;\\n                uint256[MAX_CYCLE_SIZE] memory interestPaymentSchedule = computeDatesFromCycleSegment(\\n                    terms.cycleAnchorDateOfInterestPayment,\\n                    terms.capitalizationEndDate,\\n                    cycleOfInterestCapitalization,\\n                    terms.endOfMonthConvention,\\n                    true,\\n                    segmentStart,\\n                    segmentEnd\\n                );\\n                for (uint8 i = 0; i < MAX_CYCLE_SIZE; i++) {\\n                    if (interestPaymentSchedule[i] == 0) break;\\n                    if (isInSegment(interestPaymentSchedule[i], segmentStart, segmentEnd) == false) continue;\\n                    events[index] = encodeEvent(EventType.IPCI, interestPaymentSchedule[i]);\\n                    index++;\\n                }\\n            }\\n        }\\n\\n        // remove null entries from returned array\\n        bytes32[] memory schedule = new bytes32[](index);\\n        for (uint256 i = 0; i < index; i++) {\\n            schedule[i] = events[i];\\n        }\\n\\n        return schedule;\\n    }\\n\\n    /**\\n     * @notice Computes the next non-cyclic contract events based on the contract terms\\n     * and the timestamp on which the prev. event occured.\\n     * @dev Assumes that non-cyclic events of the same event type have a unique schedule time\\n     * @param terms terms of the contract\\n     * @param lastNonCyclicEvent last non-cyclic event\\n     * @return next non-cyclic event\\n     */\\n    function computeNextNonCyclicEvent(\\n        COLLATerms calldata terms,\\n        bytes32 lastNonCyclicEvent\\n    )\\n        external\\n        pure\\n        override\\n        returns (bytes32)\\n    {\\n        (EventType lastEventType, uint256 lastScheduleTime) = decodeEvent(lastNonCyclicEvent);\\n\\n        EventType eventTypeNextEvent;\\n        uint256 scheduleTimeNextEvent;\\n\\n        // EventTypes ordered after epoch offset - so we don't have make an additional epochOffset check\\n\\n        // initial exchange\\n        if (\\n            // date for event has to be set in terms and date of event can be in the past\\n            (terms.initialExchangeDate != 0 && (lastScheduleTime <= terms.initialExchangeDate))\\n            // date for event has to come before previous candidate for the next event\\n            && (scheduleTimeNextEvent == 0 || terms.initialExchangeDate < scheduleTimeNextEvent)\\n            // avoid endless loop by requiring that the event is not the lastNonCyclicEvent\\n            && (lastScheduleTime != terms.initialExchangeDate || lastEventType != EventType.IED)\\n        ) {\\n            eventTypeNextEvent = EventType.IED;\\n            scheduleTimeNextEvent = terms.initialExchangeDate;\\n        }\\n\\n        // principal redemption at maturity\\n        if (\\n            (terms.maturityDate != 0 && (lastScheduleTime <= terms.maturityDate))\\n            && (scheduleTimeNextEvent == 0 || terms.maturityDate < scheduleTimeNextEvent)\\n            && (lastScheduleTime != terms.maturityDate || lastEventType != EventType.MD)\\n        ) {\\n            eventTypeNextEvent = EventType.MD;\\n            scheduleTimeNextEvent = terms.maturityDate;\\n        }\\n\\n        return encodeEvent(eventTypeNextEvent, scheduleTimeNextEvent);\\n    }\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param lastScheduleTime last occurrence of cyclic event\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeNextCyclicEvent(\\n        COLLATerms calldata terms,\\n        uint256 lastScheduleTime,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        override\\n        returns(bytes32)\\n    {\\n        // IP\\n        // interest payment related (starting with PRANX interest is paid following the PR schedule)\\n        if (eventType == EventType.IP) {\\n            if (terms.cycleOfInterestPayment.isSet == true && terms.cycleAnchorDateOfInterestPayment != 0) {\\n                uint256 nextInterestPaymentDate = computeNextCycleDateFromPrecedingDate(\\n                    terms.cycleOfInterestPayment,\\n                    terms.endOfMonthConvention,\\n                    terms.cycleAnchorDateOfInterestPayment,\\n                    lastScheduleTime,\\n                    true,\\n                    terms.maturityDate\\n                );\\n                if (nextInterestPaymentDate == 0) return bytes32(0);\\n                if (nextInterestPaymentDate <= terms.capitalizationEndDate) return bytes32(0);\\n                return encodeEvent(EventType.IP, nextInterestPaymentDate);\\n            }\\n        }\\n\\n        // IPCI\\n        if (eventType == EventType.IPCI) {\\n            if (terms.cycleAnchorDateOfInterestPayment != 0 && terms.capitalizationEndDate != 0) {\\n                IPS memory cycleOfInterestCapitalization = terms.cycleOfInterestPayment;\\n                cycleOfInterestCapitalization.s = S.SHORT;\\n                uint256 nextInterestCapitalizationDate = computeNextCycleDateFromPrecedingDate(\\n                    cycleOfInterestCapitalization,\\n                    terms.endOfMonthConvention,\\n                    terms.cycleAnchorDateOfInterestPayment,\\n                    lastScheduleTime,\\n                    true,\\n                    terms.maturityDate\\n                );\\n                if (nextInterestCapitalizationDate == 0) return bytes32(0);\\n                return encodeEvent(EventType.IPCI, nextInterestCapitalizationDate);\\n            }\\n        }\\n\\n        return bytes32(0);\\n    }\\n\\n    /**\\n     * @notice Verifies that the provided event is still scheduled under the terms, the current state of the\\n     * contract and the current state of the underlying.\\n     * param _event event for which to check if its still scheduled\\n     * param terms terms of the contract\\n     * @param state current state of the contract\\n     * param hasUnderlying boolean indicating whether the contract has an underlying contract\\n     * param underlyingState state of the underlying (empty state object if non-existing)\\n     * @return boolean indicating whether event is still scheduled\\n     */\\n    function isEventScheduled(\\n        bytes32 /* _event */,\\n        COLLATerms calldata /* terms */,\\n        COLLAState calldata state,\\n        UnderlyingState calldata /* underlyingState */\\n    )\\n        external\\n        pure\\n        override\\n        returns (bool)\\n    {\\n        if (\\n            state.contractPerformance == ContractPerformance.DF\\n            || state.contractPerformance == ContractPerformance.MD\\n            || state.contractPerformance == ContractPerformance.TD\\n        ) { return false; }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Implements abstract method which is defined in BaseEngine.\\n     * Applies an event to the current state of the contract and returns the resulting state.\\n     * The inheriting Engine contract has to map the events type to the designated STF.\\n     * todo Annuity calculator for RR/RRF events, IPCB events and ICB state variable\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event for which to evaluate the next state for\\n     * @param externalData external data needed for STF evaluation (e.g. rate for RR events)\\n     * @return the resulting contract state\\n     */\\n    function stateTransitionFunction(\\n        COLLATerms memory terms,\\n        COLLAState memory state,\\n        bytes32 _event,\\n        bytes calldata externalData\\n    )\\n        internal\\n        pure\\n        returns (COLLAState memory)\\n    {\\n        (EventType eventType, uint256 scheduleTime) = decodeEvent(_event);\\n\\n        /*\\n         * Note:\\n         * Not supported: PRD (Purchase) events\\n         */\\n\\n        if (eventType == EventType.AD) return STF_COLLA_AD(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.IED) return STF_COLLA_IED(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.IPCI) return STF_COLLA_IPCI(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.IP) return STF_COLLA_IP(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.MD) return STF_COLLA_MD(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.CE)  return STF_COLLA_CE(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.EXE)  return STF_COLLA_EXE(terms, state, scheduleTime, externalData);\\n\\n        revert(\\\"COLLAEngine.stateTransitionFunction: ATTRIBUTE_NOT_FOUND\\\");\\n    }\\n\\n    /**\\n     * @notice Implements abstract method which is defined in BaseEngine.\\n     * Computes the payoff for an event under the current state of the contract.\\n     * The inheriting Engine contract has to map the events type to the designated POF.\\n     * todo IPCB events and Icb state variable, Icb state variable updates in IP-paying events\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event for which the payoff should be evaluated\\n     * @param externalData external data needed for POF evaluation (e.g. fxRate)\\n     * @return the payoff of the event\\n     */\\n    function payoffFunction(\\n        COLLATerms memory terms,\\n        COLLAState memory state,\\n        bytes32 _event,\\n        bytes calldata externalData\\n    )\\n        internal\\n        pure\\n        returns (int256)\\n    {\\n        (EventType eventType, uint256 scheduleTime) = decodeEvent(_event);\\n\\n        /*\\n         * Note: COLLA contracts don't have IPCB and PR events.\\n         * Not supported: PRD (Purchase) events\\n         */\\n\\n        if (eventType == EventType.AD) return 0;\\n        if (eventType == EventType.IPCI) return 0;\\n        if (eventType == EventType.CE) return 0;\\n        if (eventType == EventType.EXE) return 0;\\n        if (eventType == EventType.IED) return POF_COLLA_IED(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.IP) return POF_COLLA_IP(terms, state, scheduleTime, externalData);\\n        if (eventType == EventType.MD) return POF_COLLA_MD(terms, state, scheduleTime, externalData);\\n\\n        revert(\\\"COLLAEngine.payoffFunction: ATTRIBUTE_NOT_FOUND\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x829c47e3c76aa2435aaeda7ce7e198b5cb654b3044af70d768958038a4960ca7\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/COLLA/COLLAPOF.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\nimport \\\"../../Core/Core.sol\\\";\\nimport \\\"../../Core/SignedMath.sol\\\";\\n\\n\\n/**\\n * @title POF\\n * @notice Contains all payoff functions (POFs) currently used by all Engines\\n */\\ncontract COLLAPOF is Core {\\n\\n    using SignedSafeMath for int;\\n    using SignedMath for int;\\n\\n\\n    /**\\n     * Calculate the payoff for the initial exchange\\n     * @return the payoff at iniitial exchange for COLLA contracts\\n     */\\n    function POF_COLLA_IED (\\n        COLLATerms memory terms,\\n        COLLAState memory /* state */,\\n        uint256 /* scheduleTime */,\\n        bytes calldata /* externalData */\\n    )\\n        internal\\n        pure\\n        returns(int256)\\n    {\\n        return (\\n            roleSign(terms.contractRole)\\n            * (-1)\\n            * terms.notionalPrincipal\\n                .add(terms.premiumDiscountAtIED)\\n        );\\n    }\\n\\n    /**\\n     * Calculate the interest payment payoff\\n     * @return the interest amount to pay for COLLA contracts\\n     */\\n    function POF_COLLA_IP (\\n        COLLATerms memory terms,\\n        COLLAState memory state,\\n        uint256 scheduleTime,\\n        bytes calldata /* externalData */\\n    )\\n        internal\\n        pure\\n        returns(int256)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n\\n        return (\\n            state.interestScalingMultiplier\\n            .floatMult(\\n                state.accruedInterest\\n                .add(\\n                    timeFromLastEvent\\n                    .floatMult(state.nominalInterestRate)\\n                    .floatMult(state.notionalPrincipal)\\n                )\\n            )\\n        );\\n    }\\n\\n    /**\\n     * Calculate the payoff in case of maturity\\n     * @return the maturity payoff for COLLA contracts\\n     */\\n    function POF_COLLA_MD (\\n        COLLATerms memory /* terms */,\\n        COLLAState memory state,\\n        uint256 /* scheduleTime */,\\n        bytes calldata /* externalData */\\n    )\\n        internal\\n        pure\\n        returns(int256)\\n    {\\n        return (\\n            state.notionalScalingMultiplier\\n                .floatMult(state.notionalPrincipal)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xd09d81250553e4da8cf8230b49a5f9d5187e3200c6cc84b05226cacb053cfa2a\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/COLLA/COLLASTF.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SignedSafeMath.sol\\\";\\n\\nimport \\\"../../Core/Core.sol\\\";\\nimport \\\"../../Core/SignedMath.sol\\\";\\n\\n\\n/**\\n * @title STF\\n * @notice Contains all state transition functions (STFs) currently used by all Engines\\n */\\ncontract COLLASTF is Core {\\n\\n    using SignedSafeMath for int;\\n    using SignedMath for int;\\n\\n\\n    /**\\n     * State transition for COLLA analysis events\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_COLLA_NE (\\n        COLLATerms memory /* terms */,\\n        COLLAState memory state,\\n        uint256 /* scheduleTime */,\\n        bytes calldata /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (COLLAState memory)\\n    {\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for COLLA analysis events\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_COLLA_AD (\\n        COLLATerms memory terms,\\n        COLLAState memory state,\\n        uint256 scheduleTime,\\n        bytes calldata /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (COLLAState memory)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n        state.accruedInterest = state.accruedInterest\\n        .add(\\n            state.nominalInterestRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for COLLA initial exchange\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_COLLA_IED (\\n        COLLATerms memory terms,\\n        COLLAState memory state,\\n        uint256 scheduleTime,\\n        bytes calldata /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (COLLAState memory)\\n    {\\n        state.notionalPrincipal = roleSign(terms.contractRole) * terms.notionalPrincipal;\\n        state.nominalInterestRate = terms.nominalInterestRate;\\n        state.statusDate = scheduleTime;\\n        state.accruedInterest = terms.accruedInterest;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for COLLA interest capitalization\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_COLLA_IPCI (\\n        COLLATerms memory terms,\\n        COLLAState memory state,\\n        uint256 scheduleTime,\\n        bytes calldata /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (COLLAState memory)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n        state.notionalPrincipal = state.notionalPrincipal\\n        .add(\\n            state.accruedInterest\\n            .add(\\n                state.nominalInterestRate\\n                .floatMult(state.notionalPrincipal)\\n                .floatMult(timeFromLastEvent)\\n            )\\n        );\\n        state.accruedInterest = 0;\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for COLLA interest payment\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_COLLA_IP (\\n        COLLATerms memory terms,\\n        COLLAState memory state,\\n        uint256 scheduleTime,\\n        bytes calldata /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (COLLAState memory)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n        state.accruedInterest = 0;\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for COLLA principal redemption\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_COLLA_PR (\\n        COLLATerms memory terms,\\n        COLLAState memory state,\\n        uint256 scheduleTime,\\n        bytes calldata /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (COLLAState memory)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n        state.accruedInterest = state.accruedInterest\\n        .add(\\n            state.nominalInterestRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.notionalPrincipal = 0;\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for COLLA principal redemption\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_COLLA_MD (\\n        COLLATerms memory terms,\\n        COLLAState memory state,\\n        uint256 scheduleTime,\\n        bytes calldata /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (COLLAState memory)\\n    {\\n        int256 timeFromLastEvent;\\n        {\\n            timeFromLastEvent = yearFraction(\\n                shiftCalcTime(state.statusDate, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                shiftCalcTime(scheduleTime, terms.businessDayConvention, terms.calendar, terms.maturityDate),\\n                terms.dayCountConvention,\\n                terms.maturityDate\\n            );\\n        }\\n        state.accruedInterest = state.accruedInterest\\n        .add(\\n            state.nominalInterestRate\\n            .floatMult(state.notionalPrincipal)\\n            .floatMult(timeFromLastEvent)\\n        );\\n        state.notionalPrincipal = 0;\\n        state.contractPerformance = ContractPerformance.MD;\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for COLLA credit events\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_COLLA_CE (\\n        COLLATerms memory terms,\\n        COLLAState memory state,\\n        uint256 scheduleTime,\\n        bytes calldata externalData\\n    )\\n        internal\\n        pure\\n        returns (COLLAState memory)\\n    {\\n        // handle maturity date\\n        uint256 nonPerformingDate = (state.nonPerformingDate == 0)\\n            ? shiftEventTime(\\n                scheduleTime,\\n                terms.businessDayConvention,\\n                terms.calendar,\\n                terms.maturityDate\\n            ) : state.nonPerformingDate;\\n\\n        uint256 currentTimestamp = abi.decode(externalData, (uint256));\\n\\n        bool isInGracePeriod = false;\\n        if (terms.gracePeriod.isSet) {\\n            uint256 graceDate = getTimestampPlusPeriod(terms.gracePeriod, nonPerformingDate);\\n            if (currentTimestamp <= graceDate) {\\n                state.contractPerformance = ContractPerformance.DL;\\n                isInGracePeriod = true;\\n            }\\n        }\\n\\n        if (terms.delinquencyPeriod.isSet && !isInGracePeriod) {\\n            uint256 delinquencyDate = getTimestampPlusPeriod(terms.delinquencyPeriod, nonPerformingDate);\\n            if (currentTimestamp <= delinquencyDate) {\\n                state.contractPerformance = ContractPerformance.DQ;\\n            } else {\\n                state.contractPerformance = ContractPerformance.DF;\\n            }\\n        }\\n\\n        if (state.nonPerformingDate == 0) {\\n            // handle maturity date\\n            state.nonPerformingDate = shiftEventTime(\\n                scheduleTime,\\n                terms.businessDayConvention,\\n                terms.calendar,\\n                terms.maturityDate\\n            );\\n        }\\n\\n        return state;\\n    }\\n\\n    /**\\n     * State transition for COLLA principal redemption\\n     * @param state the old state\\n     * @return the new state\\n     */\\n    function STF_COLLA_EXE (\\n        COLLATerms memory /* terms */,\\n        COLLAState memory state,\\n        uint256 scheduleTime,\\n        bytes calldata /* externalData */\\n    )\\n        internal\\n        pure\\n        returns (COLLAState memory)\\n    {\\n        state.contractPerformance = ContractPerformance.DF;\\n        state.statusDate = scheduleTime;\\n\\n        return state;\\n    }\\n}\\n\",\"keccak256\":\"0x3e2ce9dd00c8dc973cf68e7de1edb3f611b16b4b34fa8670950f7437fbf7a922\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/COLLA/ICOLLAEngine.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../Core/ACTUSTypes.sol\\\";\\nimport \\\"../IEngine.sol\\\";\\n\\n\\n/**\\n * @title IEngine\\n * @notice Interface which all Engines have to implement\\n */\\ninterface ICOLLAEngine is IEngine {\\n\\n    /**\\n     * @notice Initialize contract state space based on the contract terms.\\n     * @param terms terms of the contract\\n     * @return initial state of the contract\\n     */\\n    function computeInitialState(COLLATerms calldata terms)\\n        external\\n        pure\\n        returns (COLLAState memory);\\n\\n    /**\\n     * Applys an event to the current state of a contract and returns the resulting contract state.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event to be applied to the contract state\\n     * @param externalData external data needed for STF evaluation (e.g. rate for RR events)\\n     * @return the resulting contract state\\n     */\\n    function computeStateForEvent(\\n        COLLATerms calldata terms,\\n        COLLAState calldata state,\\n        bytes32 _event,\\n        bytes calldata externalData\\n    )\\n        external\\n        pure\\n        returns (COLLAState memory);\\n\\n    /**\\n     * Evaluates the payoff for an event under the current state of the contract.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event for which the payoff should be evaluated\\n     * @param externalData external data needed for POF evaluation (e.g. fxRate)\\n     * @return the payoff of the event\\n     */\\n    function computePayoffForEvent(\\n        COLLATerms calldata terms,\\n        COLLAState calldata state,\\n        bytes32 _event,\\n        bytes calldata externalData\\n    )\\n        external\\n        pure\\n        returns (int256);\\n\\n    /**\\n     * @notice Computes a schedule segment of non-cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segement\\n     * @return segment of the non-cyclic schedule\\n     */\\n    function computeNonCyclicScheduleSegment(\\n        COLLATerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd\\n    )\\n        external\\n        pure\\n        returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Computes the next non-cyclic contract events based on the contract terms\\n     * and the timestamp on which the prev. event occured.\\n     * @dev Assumes that non-cyclic events of the same event type have a unique schedule time\\n     * @param terms terms of the contract\\n     * @param lastNonCyclicEvent last non-cyclic event\\n     * @return next non-cyclic event\\n     */\\n    function computeNextNonCyclicEvent(\\n        COLLATerms calldata terms,\\n        bytes32 lastNonCyclicEvent\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param lastScheduleTime last occurrence of cyclic event\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeNextCyclicEvent(\\n        COLLATerms calldata terms,\\n        uint256 lastScheduleTime,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        returns(bytes32);\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segement\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeCyclicScheduleSegment(\\n        COLLATerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Verifies that the provided event is still scheduled under the terms, the current state of the\\n     * contract and the current state of the underlying.\\n     * @param _event event for which to check if its still scheduled\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param underlyingState state of the underlying (empty state object if non-existing)\\n     * @return boolean indicating whether event is still scheduled\\n     */\\n    function isEventScheduled(\\n        bytes32 _event,\\n        COLLATerms calldata terms,\\n        COLLAState calldata state,\\n        UnderlyingState calldata underlyingState\\n    )\\n        external\\n        pure\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x99e9d4cb1a4322aa9791484648022ee7c6cc6b6dcb7ef39b4969342ff5b330d8\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/IEngine.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../Core/ACTUSTypes.sol\\\";\\n\\n\\ninterface IEngine {\\n    function contractType() external pure returns (ContractType);\\n}\",\"keccak256\":\"0xe2ecdc18616473e64d932c47ccf8408e5a35c100fa24e3157ad9f530556135bb\",\"license\":\"Apache-2.0\"},\"contracts/external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: MIT\\\"\\npragma solidity ^0.7.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\",\"keccak256\":\"0x2b0c785d6fe1e5ae7239ac6833b6c014f865e1d12c4628dc9def5e0a901cc3eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "All numbers except unix timestamp are represented as multiple of 10 ** 18",
    "kind": "dev",
    "methods": {
      "adjustEndOfMonthConvention(uint8,uint256,(uint256,uint8,uint8,bool))": {
        "details": "The following is considered to dertermine if schedule dates are shifted to the end of month: - The convention SD (same day) means not adjusting, EM (end of month) means adjusting - Dates are only shifted if the schedule start date is an end-of-month date - Dates are only shifted if the schedule cycle is based on an \"M\" period unit or multiple thereof",
        "params": {
          "cycle": "the cycle struct",
          "eomc": "the end of month convention to adjust",
          "startTime": "timestamp of the cycle start"
        },
        "returns": {
          "_0": "the adjusted end of month convention"
        }
      },
      "computeCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256,uint8)": {
        "params": {
          "eventType": "eventType of the cyclic schedule",
          "segmentEnd": "end timestamp of the segement",
          "segmentStart": "start timestamp of the segment",
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "event schedule segment"
        }
      },
      "computeEventTimeForEvent(bytes32,uint8,uint8,uint256)": {
        "details": "For optimization reasons not located in EventUtil by applying the BDC specified in the terms"
      },
      "computeInitialState((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)))": {
        "params": {
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "the initial state of the contract"
        }
      },
      "computeNextCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint8)": {
        "params": {
          "eventType": "eventType of the cyclic schedule",
          "lastScheduleTime": "last occurrence of cyclic event",
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "event schedule segment"
        }
      },
      "computeNextNonCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),bytes32)": {
        "details": "Assumes that non-cyclic events of the same event type have a unique schedule time",
        "params": {
          "lastNonCyclicEvent": "last non-cyclic event",
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "next non-cyclic event"
        }
      },
      "computeNonCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256)": {
        "params": {
          "segmentEnd": "end timestamp of the segement",
          "segmentStart": "start timestamp of the segment",
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "segment of the non-cyclic schedule"
        }
      },
      "computePayoffForEvent((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256),bytes32,bytes)": {
        "params": {
          "_event": "event for which the payoff should be evaluated",
          "externalData": "external data needed for POF evaluation (e.g. fxRate)",
          "state": "current state of the contract",
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "the payoff of the event"
        }
      },
      "computeStateForEvent((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256),bytes32,bytes)": {
        "params": {
          "_event": "event to be applied to the contract state",
          "externalData": "external data needed for STF evaluation (e.g. rate for RR events)",
          "state": "current state of the contract",
          "terms": "terms of the contract"
        },
        "returns": {
          "_0": "the resulting contract state"
        }
      },
      "isEventScheduled(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256),(int256,bool))": {
        "params": {
          "state": "current state of the contract param hasUnderlying boolean indicating whether the contract has an underlying contract param underlyingState state of the underlying (empty state object if non-existing)"
        },
        "returns": {
          "_0": "boolean indicating whether event is still scheduled"
        }
      }
    },
    "title": "COLLAEngine",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "adjustEndOfMonthConvention(uint8,uint256,(uint256,uint8,uint8,bool))": {
        "notice": "This function makes an adjustment on the end of month convention."
      },
      "computeCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256,uint8)": {
        "notice": "Computes a schedule segment of cyclic contract events based on the contract terms and the specified timestamps."
      },
      "computeEventTimeForEvent(bytes32,uint8,uint8,uint256)": {
        "notice": "Returns the event time for a given schedule time"
      },
      "computeInitialState((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)))": {
        "notice": "Initialize contract state space based on the contract terms."
      },
      "computeNextCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint8)": {
        "notice": "Computes a schedule segment of cyclic contract events based on the contract terms and the specified timestamps."
      },
      "computeNextNonCyclicEvent((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),bytes32)": {
        "notice": "Computes the next non-cyclic contract events based on the contract terms and the timestamp on which the prev. event occured."
      },
      "computeNonCyclicScheduleSegment((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),uint256,uint256)": {
        "notice": "Computes a schedule segment of non-cyclic contract events based on the contract terms and the specified timestamps."
      },
      "computePayoffForEvent((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256),bytes32,bytes)": {
        "notice": "Evaluates the payoff for an event under the current state of the contract."
      },
      "computeStateForEvent((uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256),bytes32,bytes)": {
        "notice": "Applys an event to the current state of a contract and returns the resulting contract state."
      },
      "getEpochOffset(uint8)": {
        "notice": "Returns the epoch offset for a given event type to determine the correct order of events if multiple events have the same timestamp"
      },
      "isEventScheduled(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256),(int256,bool))": {
        "notice": "Verifies that the provided event is still scheduled under the terms, the current state of the contract and the current state of the underlying. param _event event for which to check if its still scheduled param terms terms of the contract"
      },
      "shiftCalcTime(uint256,uint8,uint8,uint256)": {
        "notice": "Used in POFs and STFs for DCFs. No shifting is applied if a Calc/Shift instead of Shift/Calc BDC is provided."
      }
    },
    "notice": "Inherits from BaseEngine by implementing STFs, POFs according to the ACTUS standard for a COLLA contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}