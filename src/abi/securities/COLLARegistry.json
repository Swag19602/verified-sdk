{
  "address": "0x84eE97F340C1CBE330d1Deb284c3e45aa74fC629",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "methodSignature",
          "type": "bytes4"
        }
      ],
      "name": "GrantedAccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "RegisteredAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "methodSignature",
          "type": "bytes4"
        }
      ],
      "name": "RevokedAccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevActor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newActor",
          "type": "address"
        }
      ],
      "name": "UpdatedActor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevBeneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBeneficiary",
          "type": "address"
        }
      ],
      "name": "UpdatedBeneficiary",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevEngine",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newEngine",
          "type": "address"
        }
      ],
      "name": "UpdatedEngine",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "statusDate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedFinalizedState",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevObligor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newObligor",
          "type": "address"
        }
      ],
      "name": "UpdatedObligor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "statusDate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedState",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "UpdatedTerms",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "approveActor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedActors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        }
      ],
      "name": "decodeEvent",
      "outputs": [
        {
          "internalType": "enum EventType",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "scheduleTime",
          "type": "uint256"
        }
      ],
      "name": "encodeEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getActor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getAddressValueForTermsAttribute",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getBytes32ValueForTermsAttribute",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getContractReferenceValueForTermsAttribute",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "object",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "object2",
              "type": "bytes32"
            },
            {
              "internalType": "enum ContractReferenceType",
              "name": "_type",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractReferenceRole",
              "name": "role",
              "type": "uint8"
            }
          ],
          "internalType": "struct ContractReference",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getCycleValueForTermsAttribute",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "enum P",
              "name": "p",
              "type": "uint8"
            },
            {
              "internalType": "enum S",
              "name": "s",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isSet",
              "type": "bool"
            }
          ],
          "internalType": "struct IPS",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getEngine",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getEnumValueForStateAttribute",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getEnumValueForTermsAttribute",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum EventType",
          "name": "eventType",
          "type": "uint8"
        }
      ],
      "name": "getEpochOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getEventAtIndex",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getExtension",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getFinalizedState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            }
          ],
          "internalType": "struct COLLAState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getIntValueForStateAttribute",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getIntValueForTermsAttribute",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getNextScheduleIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getNextScheduledEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getNextUnderlyingEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getOwnership",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creatorObligor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creatorBeneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterpartyObligor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterpartyBeneficiary",
              "type": "address"
            }
          ],
          "internalType": "struct AssetOwnership",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getPendingEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getPeriodValueForTermsAttribute",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "i",
              "type": "uint256"
            },
            {
              "internalType": "enum P",
              "name": "p",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isSet",
              "type": "bool"
            }
          ],
          "internalType": "struct IP",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getSchedule",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getScheduleLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            }
          ],
          "internalType": "struct COLLAState",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "getTerms",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeOfCollateral",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "coverageOfCollateral",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            }
          ],
          "internalType": "struct COLLATerms",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getUIntValueForTermsAttribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "attribute",
          "type": "bytes32"
        }
      ],
      "name": "getUintValueForStateAttribute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "methodSignature",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "methodSignature",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRootAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        }
      ],
      "name": "isEventSettled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "isRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_event",
          "type": "bytes32"
        },
        {
          "internalType": "int256",
          "name": "_payoff",
          "type": "int256"
        }
      ],
      "name": "markEventAsSettled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "popNextScheduledEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        }
      ],
      "name": "popPendingEvent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "pendingEvent",
          "type": "bytes32"
        }
      ],
      "name": "pushPendingEvent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeOfCollateral",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "coverageOfCollateral",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            }
          ],
          "internalType": "struct COLLATerms",
          "name": "terms",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            }
          ],
          "internalType": "struct COLLAState",
          "name": "state",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "schedule",
          "type": "bytes32[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "creatorObligor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creatorBeneficiary",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterpartyObligor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "counterpartyBeneficiary",
              "type": "address"
            }
          ],
          "internalType": "struct AssetOwnership",
          "name": "ownership",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "engine",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "extension",
          "type": "address"
        }
      ],
      "name": "registerAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes4",
          "name": "methodSignature",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "setActor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newCounterpartyBeneficiary",
          "type": "address"
        }
      ],
      "name": "setCounterpartyBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newCounterpartyObligor",
          "type": "address"
        }
      ],
      "name": "setCounterpartyObligor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newCreatorBeneficiary",
          "type": "address"
        }
      ],
      "name": "setCreatorBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newCreatorObligor",
          "type": "address"
        }
      ],
      "name": "setCreatorObligor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "engine",
          "type": "address"
        }
      ],
      "name": "setEngine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "extension",
          "type": "address"
        }
      ],
      "name": "setExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            }
          ],
          "internalType": "struct COLLAState",
          "name": "state",
          "type": "tuple"
        }
      ],
      "name": "setFinalizedState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ContractPerformance",
              "name": "contractPerformance",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonPerformingDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "terminationDate",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "interestScalingMultiplier",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "notionalScalingMultiplier",
              "type": "int256"
            }
          ],
          "internalType": "struct COLLAState",
          "name": "state",
          "type": "tuple"
        }
      ],
      "name": "setState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ContractType",
              "name": "contractType",
              "type": "uint8"
            },
            {
              "internalType": "enum Calendar",
              "name": "calendar",
              "type": "uint8"
            },
            {
              "internalType": "enum ContractRole",
              "name": "contractRole",
              "type": "uint8"
            },
            {
              "internalType": "enum DayCountConvention",
              "name": "dayCountConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum BusinessDayConvention",
              "name": "businessDayConvention",
              "type": "uint8"
            },
            {
              "internalType": "enum EndOfMonthConvention",
              "name": "endOfMonthConvention",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "marketObjectCodeOfCollateral",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "settlementCurrency",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralCurrency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "statusDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialExchangeDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maturityDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "capitalizationEndDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleAnchorDateOfInterestPayment",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "notionalPrincipal",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "nominalInterestRate",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accruedInterest",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "premiumDiscountAtIED",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "coverageOfCollateral",
              "type": "int256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "gracePeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IP",
              "name": "delinquencyPeriod",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "i",
                  "type": "uint256"
                },
                {
                  "internalType": "enum P",
                  "name": "p",
                  "type": "uint8"
                },
                {
                  "internalType": "enum S",
                  "name": "s",
                  "type": "uint8"
                },
                {
                  "internalType": "bool",
                  "name": "isSet",
                  "type": "bool"
                }
              ],
              "internalType": "struct IPS",
              "name": "cycleOfInterestPayment",
              "type": "tuple"
            }
          ],
          "internalType": "struct COLLATerms",
          "name": "terms",
          "type": "tuple"
        }
      ],
      "name": "setTerms",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa5f257ee75aca8de2687f47558fc9cc2d63ad5677f3ea23846814764c2d163cc",
  "receipt": {
    "to": null,
    "from": "0xf6bb741F0C106a504943eaE908C3b67bcf4bF1CC",
    "contractAddress": "0x84eE97F340C1CBE330d1Deb284c3e45aa74fC629",
    "transactionIndex": 10,
    "gasUsed": "3992923",
    "logsBloom": "0x
    "blockHash": "0x2d689acf045e62f85746c2a6d9a1803468c7a8e145cc121bb223ddcdc758c2ec",
    "transactionHash": "0xa5f257ee75aca8de2687f47558fc9cc2d63ad5677f3ea23846814764c2d163cc",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 7713010,
        "transactionHash": "0xa5f257ee75aca8de2687f47558fc9cc2d63ad5677f3ea23846814764c2d163cc",
        "address": "0x84eE97F340C1CBE330d1Deb284c3e45aa74fC629",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f6bb741f0c106a504943eae908c3b67bcf4bf1cc"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x2d689acf045e62f85746c2a6d9a1803468c7a8e145cc121bb223ddcdc758c2ec"
      }
    ],
    "blockNumber": 7713010,
    "cumulativeGasUsed": "4644600",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "37e2a100a6f868553298dee57e286371",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"methodSignature\",\"type\":\"bytes4\"}],\"name\":\"GrantedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"RegisteredAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"methodSignature\",\"type\":\"bytes4\"}],\"name\":\"RevokedAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevActor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newActor\",\"type\":\"address\"}],\"name\":\"UpdatedActor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"UpdatedBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevEngine\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newEngine\",\"type\":\"address\"}],\"name\":\"UpdatedEngine\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"}],\"name\":\"UpdatedFinalizedState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevObligor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newObligor\",\"type\":\"address\"}],\"name\":\"UpdatedObligor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"}],\"name\":\"UpdatedState\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"UpdatedTerms\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"approveActor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedActors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"}],\"name\":\"decodeEvent\",\"outputs\":[{\"internalType\":\"enum EventType\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"scheduleTime\",\"type\":\"uint256\"}],\"name\":\"encodeEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getActor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getAddressValueForTermsAttribute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getBytes32ValueForTermsAttribute\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getContractReferenceValueForTermsAttribute\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"object\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"object2\",\"type\":\"bytes32\"},{\"internalType\":\"enum ContractReferenceType\",\"name\":\"_type\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractReferenceRole\",\"name\":\"role\",\"type\":\"uint8\"}],\"internalType\":\"struct ContractReference\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getCycleValueForTermsAttribute\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getEngine\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getEnumValueForStateAttribute\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getEnumValueForTermsAttribute\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum EventType\",\"name\":\"eventType\",\"type\":\"uint8\"}],\"name\":\"getEpochOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getEventAtIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getExtension\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getFinalizedState\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"}],\"internalType\":\"struct COLLAState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getIntValueForStateAttribute\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getIntValueForTermsAttribute\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getNextScheduleIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getNextScheduledEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getNextUnderlyingEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getOwnership\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creatorObligor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorBeneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterpartyObligor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterpartyBeneficiary\",\"type\":\"address\"}],\"internalType\":\"struct AssetOwnership\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getPendingEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getPeriodValueForTermsAttribute\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getSchedule\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getScheduleLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getState\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"}],\"internalType\":\"struct COLLAState\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"getTerms\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeOfCollateral\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"coverageOfCollateral\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"}],\"internalType\":\"struct COLLATerms\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getUIntValueForTermsAttribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"attribute\",\"type\":\"bytes32\"}],\"name\":\"getUintValueForStateAttribute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"methodSignature\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"methodSignature\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRootAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"}],\"name\":\"isEventSettled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_event\",\"type\":\"bytes32\"},{\"internalType\":\"int256\",\"name\":\"_payoff\",\"type\":\"int256\"}],\"name\":\"markEventAsSettled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"popNextScheduledEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"}],\"name\":\"popPendingEvent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"pendingEvent\",\"type\":\"bytes32\"}],\"name\":\"pushPendingEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeOfCollateral\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"coverageOfCollateral\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"}],\"internalType\":\"struct COLLATerms\",\"name\":\"terms\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"}],\"internalType\":\"struct COLLAState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"schedule\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"creatorObligor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creatorBeneficiary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterpartyObligor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"counterpartyBeneficiary\",\"type\":\"address\"}],\"internalType\":\"struct AssetOwnership\",\"name\":\"ownership\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"engine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"}],\"name\":\"registerAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes4\",\"name\":\"methodSignature\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"setActor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newCounterpartyBeneficiary\",\"type\":\"address\"}],\"name\":\"setCounterpartyBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newCounterpartyObligor\",\"type\":\"address\"}],\"name\":\"setCounterpartyObligor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newCreatorBeneficiary\",\"type\":\"address\"}],\"name\":\"setCreatorBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newCreatorObligor\",\"type\":\"address\"}],\"name\":\"setCreatorObligor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"engine\",\"type\":\"address\"}],\"name\":\"setEngine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"extension\",\"type\":\"address\"}],\"name\":\"setExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"}],\"internalType\":\"struct COLLAState\",\"name\":\"state\",\"type\":\"tuple\"}],\"name\":\"setFinalizedState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ContractPerformance\",\"name\":\"contractPerformance\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonPerformingDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"terminationDate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"interestScalingMultiplier\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"notionalScalingMultiplier\",\"type\":\"int256\"}],\"internalType\":\"struct COLLAState\",\"name\":\"state\",\"type\":\"tuple\"}],\"name\":\"setState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"},{\"internalType\":\"enum Calendar\",\"name\":\"calendar\",\"type\":\"uint8\"},{\"internalType\":\"enum ContractRole\",\"name\":\"contractRole\",\"type\":\"uint8\"},{\"internalType\":\"enum DayCountConvention\",\"name\":\"dayCountConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum BusinessDayConvention\",\"name\":\"businessDayConvention\",\"type\":\"uint8\"},{\"internalType\":\"enum EndOfMonthConvention\",\"name\":\"endOfMonthConvention\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"marketObjectCodeOfCollateral\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"settlementCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"statusDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"capitalizationEndDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleAnchorDateOfInterestPayment\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"notionalPrincipal\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"nominalInterestRate\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accruedInterest\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"premiumDiscountAtIED\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"coverageOfCollateral\",\"type\":\"int256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"gracePeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IP\",\"name\":\"delinquencyPeriod\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"enum P\",\"name\":\"p\",\"type\":\"uint8\"},{\"internalType\":\"enum S\",\"name\":\"s\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"internalType\":\"struct IPS\",\"name\":\"cycleOfInterestPayment\",\"type\":\"tuple\"}],\"internalType\":\"struct COLLATerms\",\"name\":\"terms\",\"type\":\"tuple\"}],\"name\":\"setTerms\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approveActor(address)\":{\"details\":\"Can only be called by the owner of the contract.\",\"params\":{\"actor\":\"address of the actor\"}},\"getActor(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"address of the asset actor\"}},\"getEngine(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"address of the engine of the asset\"}},\"getEventAtIndex(bytes32,uint256)\":{\"params\":{\"assetId\":\"id of the asset\",\"index\":\"index of the event to return\"},\"returns\":{\"_0\":\"Event\"}},\"getExtension(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"address of the asset actor\"}},\"getFinalizedState(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"state of the asset\"}},\"getNextScheduleIndex(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"Index\"}},\"getNextScheduledEvent(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"event\"}},\"getOwnership(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"addresses of all owners of the asset\"}},\"getSchedule(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"the schedule\"}},\"getScheduleLength(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"Length of the schedule\"}},\"getState(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"state of the asset\"}},\"getTerms(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"terms of the asset\"}},\"grantAccess(bytes32,bytes4,address)\":{\"details\":\"Can only be called by an authorized account.\",\"params\":{\"account\":\"address of the account to grant access to\",\"assetId\":\"id of the asset\",\"methodSignature\":\"function / method signature (4 byte keccak256 hash of the method selector)\"}},\"hasAccess(bytes32,bytes4,address)\":{\"params\":{\"account\":\"address of the account for which to check access\",\"assetId\":\"id of the asset\",\"methodSignature\":\"function / method signature (4 byte keccak256 hash of the method selector)\"},\"returns\":{\"_0\":\"true if allowed access\"}},\"hasRootAccess(bytes32,address)\":{\"params\":{\"account\":\"address of the account for which to check root acccess\",\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"true if has root access\"}},\"isEventSettled(bytes32,bytes32)\":{\"params\":{\"_event\":\"event (encoded)\",\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"true if event was settled\"}},\"isRegistered(bytes32)\":{\"params\":{\"assetId\":\"id of the asset\"},\"returns\":{\"_0\":\"true if asset exist\"}},\"markEventAsSettled(bytes32,bytes32,int256)\":{\"details\":\"Can only be set by authorized account.\",\"params\":{\"_event\":\"event (encoded) to be marked as settled\",\"assetId\":\"id of the asset\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"popNextScheduledEvent(bytes32)\":{\"details\":\"Can only be updated by the assets actor or by an authorized account.\",\"params\":{\"assetId\":\"id of the asset\"}},\"registerAsset(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256),bytes32[],(address,address,address,address),address,address,address,address)\":{\"params\":{\"actor\":\"account which is allowed to update the asset state\",\"admin\":\"account which as admin rights (optional)\",\"engine\":\"ACTUS Engine of the asset\",\"extension\":\"address of the extension (optional)\",\"ownership\":\"ownership of the asset\",\"schedule\":\"schedule of the asset\",\"state\":\"initial state of the asset\",\"terms\":\"asset specific terms (COLLATerms)\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAccess(bytes32,bytes4,address)\":{\"details\":\"Can only be called by an authorized account.\",\"params\":{\"account\":\"address of the account to revoke access for\",\"assetId\":\"id of the asset\",\"methodSignature\":\"function / method signature (4 byte keccak256 hash of the method selector)\"}},\"setActor(bytes32,address)\":{\"params\":{\"actor\":\"address of the Actor contract\",\"assetId\":\"id of the asset\"}},\"setCounterpartyBeneficiary(bytes32,address)\":{\"details\":\"Can only be updated by the current counterparty beneficiary or by an authorized account.\",\"params\":{\"assetId\":\"id of the asset\",\"newCounterpartyBeneficiary\":\"address of the new beneficiary\"}},\"setCounterpartyObligor(bytes32,address)\":{\"details\":\"Can only be updated by an authorized account.\",\"params\":{\"assetId\":\"id of the asset\",\"newCounterpartyObligor\":\"address of the new counterparty obligor\"}},\"setCreatorBeneficiary(bytes32,address)\":{\"details\":\"Can only be updated by the current creator beneficiary or by an authorized account.\",\"params\":{\"assetId\":\"id of the asset\",\"newCreatorBeneficiary\":\"address of the new beneficiary\"}},\"setCreatorObligor(bytes32,address)\":{\"details\":\"Can only be updated by an authorized account.\",\"params\":{\"assetId\":\"id of the asset\",\"newCreatorObligor\":\"address of the new creator obligor\"}},\"setEngine(bytes32,address)\":{\"details\":\"Can only be set by authorized account.\",\"params\":{\"assetId\":\"id of the asset\",\"engine\":\"new engine address\"}},\"setExtension(bytes32,address)\":{\"details\":\"Can only be set by authorized account.\",\"params\":{\"assetId\":\"id of the asset\",\"extension\":\"new extension address\"}},\"setFinalizedState(bytes32,(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256))\":{\"details\":\"Can only be updated by the assets actor or by an authorized account.\",\"params\":{\"assetId\":\"id of the asset\",\"state\":\"next state of the asset\"}},\"setState(bytes32,(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256))\":{\"details\":\"Can only be updated by the assets actor or by an authorized account.\",\"params\":{\"assetId\":\"id of the asset\",\"state\":\"next state of the asset\"}},\"setTerms(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)))\":{\"details\":\"Can only be set by authorized account.\",\"params\":{\"assetId\":\"id of the asset\",\"terms\":\"new terms\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"COLLARegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveActor(address)\":{\"notice\":\"Approves the address of an actor contract e.g. for registering assets.\"},\"getActor(bytes32)\":{\"notice\":\"Returns the address of the actor which is allowed to update the state of the asset.\"},\"getEngine(bytes32)\":{\"notice\":\"Returns the address of a the ACTUS engine corresponding to the ContractType of an asset.\"},\"getEpochOffset(uint8)\":{\"notice\":\"Returns the epoch offset for a given event type to determine the correct order of events if multiple events have the same timestamp\"},\"getEventAtIndex(bytes32,uint256)\":{\"notice\":\"Returns an event for a given position (index) in a schedule of a given asset.\"},\"getExtension(bytes32)\":{\"notice\":\"Returns the address of the extension which is allowed to generate events for the asset.\"},\"getFinalizedState(bytes32)\":{\"notice\":\"Returns the state of an asset.\"},\"getNextScheduleIndex(bytes32)\":{\"notice\":\"Returns the index of the next event to be processed for a schedule of an asset.\"},\"getNextScheduledEvent(bytes32)\":{\"notice\":\"Returns the next event to process.\"},\"getNextUnderlyingEvent(bytes32)\":{\"notice\":\"If the underlying of the asset changes in performance to a covered performance, it returns the exerciseDate event.\"},\"getOwnership(bytes32)\":{\"notice\":\"Retrieves the registered addresses of owners (creator, counterparty) of an asset.\"},\"getSchedule(bytes32)\":{\"notice\":\"Convenience method for retrieving the entire schedule Not recommended to execute method on-chain (if schedule is too long the tx may run out of gas)\"},\"getScheduleLength(bytes32)\":{\"notice\":\"Returns the length of a schedule of a given asset.\"},\"getState(bytes32)\":{\"notice\":\"Returns the state of an asset.\"},\"getTerms(bytes32)\":{\"notice\":\"Returns the terms of an asset.\"},\"grantAccess(bytes32,bytes4,address)\":{\"notice\":\"Grant access to an account to call a specific method on a specific asset.\"},\"hasAccess(bytes32,bytes4,address)\":{\"notice\":\"Check whether an account is allowed to call a specific method on a specific asset.\"},\"hasRootAccess(bytes32,address)\":{\"notice\":\"Check whether an account has root access for a specific asset.\"},\"isEventSettled(bytes32,bytes32)\":{\"notice\":\"Returns true if an event of an assets schedule was settled\"},\"isRegistered(bytes32)\":{\"notice\":\"Returns if there is an asset registerd for a given assetId\"},\"markEventAsSettled(bytes32,bytes32,int256)\":{\"notice\":\"Mark an event as settled\"},\"popNextScheduledEvent(bytes32)\":{\"notice\":\"Increments the index of a schedule of an asset. (if max index is reached the index will be left unchanged)\"},\"registerAsset(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256),bytes32[],(address,address,address,address),address,address,address,address)\":{\"notice\":\"@param assetId id of the asset\"},\"revokeAccess(bytes32,bytes4,address)\":{\"notice\":\"Revoke access for an account to call a specific method on a specific asset.\"},\"setActor(bytes32,address)\":{\"notice\":\"Set the address of the Actor contract which should be going forward.\"},\"setCounterpartyBeneficiary(bytes32,address)\":{\"notice\":\"Updates the address of the default beneficiary of cashflows going to the counterparty.\"},\"setCounterpartyObligor(bytes32,address)\":{\"notice\":\"Update the address of the counterparty which has to fulfill obligations for the counterparty of the asset.\"},\"setCreatorBeneficiary(bytes32,address)\":{\"notice\":\"Update the address of the default beneficiary of cashflows going to the creator.\"},\"setCreatorObligor(bytes32,address)\":{\"notice\":\"Update the address of the obligor which has to fulfill obligations for the creator of the asset.\"},\"setEngine(bytes32,address)\":{\"notice\":\"Set the engine address which should be used for the asset going forward.\"},\"setExtension(bytes32,address)\":{\"notice\":\"Set the extension address which should be used for the asset going forward.\"},\"setFinalizedState(bytes32,(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256))\":{\"notice\":\"Sets next finalized state of an asset.\"},\"setState(bytes32,(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256))\":{\"notice\":\"Sets next state of an asset.\"},\"setTerms(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)))\":{\"notice\":\"Set the terms of the asset\"}},\"notice\":\"Registry for ACTUS Protocol assets\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Core/COLLA/COLLARegistry.sol\":\"COLLARegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x910a2e625b71168563edf9eeef55a50d6d699acfe27ceba3921f291829a8f938\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x46d2453e9db55eae25c9abdae2c42229086c54f1a6a247e8ce32658bb785f6ae\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xba96bc371ba999f452985a98717cca1e4c4abb598dc038a9a9c3db08129b1ba4\",\"license\":\"MIT\"},\"contracts/ACTUS/Core/ACTUSConstants.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n\\n/**\\n * @title ACTUSConstants\\n * @notice Contains all type definitions for ACTUS. See ACTUS-Dictionary for definitions\\n */\\ncontract ACTUSConstants {\\n\\n    // constants used throughout\\n    uint256 constant public PRECISION = 18;\\n    int256 constant public ONE_POINT_ZERO = 1 * 10 ** 18;\\n    uint256 constant public MAX_CYCLE_SIZE = 120;\\n    uint256 constant public MAX_EVENT_SCHEDULE_SIZE = 120;\\n}\\n\",\"keccak256\":\"0x1568471e72800002ad945bf084f96368f5dfb597105f2e3f11534905abda9495\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/ACTUSTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\n/**\\n * Commit: https://github.com/atpar/actus-dictionary/commit/b85b9b378967de6bfc4d8b6687b520c48bce9890\\n * Date: 2020-10-06\\n */\\n\\n// IPS\\nenum P {D, W, M, Q, H, Y} // P=[D=Days, W=Weeks, M=Months, Q=Quarters, H=Halfyear, Y=Year]\\nenum S {LONG, SHORT} // S=[+=long stub,- short stub, {} if S empty then - for short stub]\\nstruct IPS {\\n    uint256 i; // I=Integer\\n    P p;\\n    S s;\\n    bool isSet;\\n}\\n\\nstruct IP {\\n    uint256 i;\\n    P p;\\n    bool isSet;\\n}\\n\\n// Number of enum options should be limited to 256 (8 bits) such that 255 enums can be packed fit into 256 bits (bytes32)\\nenum BusinessDayConvention {NOS, SCF, SCMF, CSF, CSMF, SCP, SCMP, CSP, CSMP}\\nenum Calendar {NC, MF}\\nenum ContractPerformance {PF, DL, DQ, DF, MD, TD}\\nenum ContractReferenceType {CNT, CID, MOC, EID, CST}\\nenum ContractReferenceRole {UDL, FIL, SEL, COVE, COVI}\\nenum ContractRole {RPA, RPL, RFL, PFL, RF, PF, BUY, SEL, COL, CNO, UDL, UDLP, UDLM}\\nenum ContractType {PAM, ANN, NAM, LAM, LAX, CLM, UMP, CSH, STK, COM, SWAPS, SWPPV, FXOUT, CAPFL, FUTUR, OPTNS, CEG, CEC, CERTF, COLLA}\\nenum CouponType {NOC, FIX, FCN, PRF}\\nenum CyclePointOfInterestPayment {B, E}\\nenum CyclePointOfRateReset {B, E}\\nenum DayCountConvention {AA, A360, A365, _30E360ISDA, _30E360, _28E336, ONE, OBYT, HRSAA, MINAA, SECAA}\\nenum EndOfMonthConvention {SD, EOM}\\n//               0   1    2    3    4   5   6   7   8   9  10    11  12   13   14   15   16   17   18   19   20   21   22   23   24   25  26  27    28   29  30  31  32  33\\nenum EventType {NE, CE, ISS, IED, PRD, FP, PR, PD, PY, PP, IP, IPCI, RRF, RR, DIF, DIX, DIP, COF, COP, REF, REX, REP, SPF, SPS, EXO, EXE, ST, SC, IPCB, PRF, MC, TD, MD, AD}\\nenum FeeBasis {A, N}\\n// enum GuaranteedExposure {NO, NI, MV} // not implemented\\n// enum InterestCalculationBase {NT, NTIED, NTL} // not implemented\\n// enum PenaltyType {O, A, N, I}\\n// enum PrepaymentEffect {N, A, M} // not implemented\\nenum RedeemableByIssuer {Y, N}\\nenum ScalingEffect {_000, I00, _0N0, IN0}\\n// enum Seniority {S, J} // not implemented\\n\\nstruct ContractReference {\\n    bytes32 object;\\n    bytes32 object2; // workaround for solc bug (replace object and object2 with single bytes attribute)\\n    ContractReferenceType _type;\\n    ContractReferenceRole role;\\n}\\n\\nstruct UnderlyingState {\\n    int256 exerciseAmount;\\n    bool isSet;\\n}\\n\\nstruct ANNState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n    int256 nextPrincipalRedemptionPayment;\\n}\\n\\nstruct CECState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n\\n    int256 feeAccrued;\\n    int256 exerciseAmount;\\n}\\n\\nstruct CEGState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    int256 feeAccrued;\\n    int256 exerciseAmount;\\n}\\n\\nstruct CERTFState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastCouponFixingDate;\\n\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n}\\n\\nstruct PAMState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    // int256 notionalPrincipal2;\\n    int256 accruedInterest;\\n    // int256 accruedInterest2;\\n    int256 feeAccrued;\\n    int256 nominalInterestRate;\\n    // int256 nominalInterestRate2;\\n    // int256 interestCalculationBaseAmount;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n}\\n\\nstruct STKState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 exerciseDate;\\n    uint256 terminationDate;\\n    uint256 lastDividendFixingDate;\\n    // uint256 dividendFixingDate; // not implemented\\n    // uint256 dividendExDate; // not implemented\\n    // uint256 dividendPaymentDate; // not implemented\\n    // uint256 splitSettlementDate; // not implemented\\n    // uint256 redemptionExDate; // not implemented\\n    // uint256 redemptionPaymentDate; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 exerciseAmount;\\n    int256 exerciseQuantity;\\n    int256 quantity;\\n    int256 couponAmountFixed;\\n    // int256 exerciseQuantityOrdered;\\n    int256 marginFactor;\\n    int256 adjustmentFactor;\\n    int256 dividendPaymentAmount;\\n    int256 splitRatio;\\n}\\n\\nstruct COLLAState {\\n    ContractPerformance contractPerformance;\\n\\n    uint256 statusDate;\\n    uint256 nonPerformingDate;\\n    uint256 maturityDate;\\n    uint256 terminationDate;\\n\\n    int256 notionalPrincipal;\\n    int256 accruedInterest;\\n    int256 nominalInterestRate;\\n    int256 interestScalingMultiplier;\\n    int256 notionalScalingMultiplier;\\n}\\n\\nstruct ANNTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // InterestCalculationBase interestCalculationBase; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 ammortizationDate; // not implemented\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    // uint256 cycleAnchorDateOfInterestCalculationBase; // not implemented\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    uint256 cycleAnchorDateOfPrincipalRedemption;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 nextPrincipalRedemptionPayment;\\n    // int256 coverageOfCreditEnhancement;\\n    // int256 interestCalculationBaseAmount; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    IPS cycleOfPrincipalRedemption;\\n    // IPS cycleOfOptionality; // not implemented\\n    // IPS cycleOfInterestCalculationBase; // not implemented\\n}\\n\\nstruct CECTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ContractPerformance creditEventTypeCovered;\\n    FeeBasis feeBasis;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    // uint256 exerciseDate; // state only\\n\\n    int256 notionalPrincipal;\\n    int256 feeRate;\\n    // int256 exerciseAmount; // state only\\n    int256 coverageOfCreditEnhancement;\\n\\n    // IP settlementPeriod; // not implemented\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CEGTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    ContractPerformance creditEventTypeCovered;\\n    // GuaranteedExposure guaranteedExposure; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    uint256 statusDate;\\n    uint256 maturityDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 exerciseDate; // state only\\n    // uint256 nonPerformingDate; // state only\\n\\n    int256 notionalPrincipal;\\n    // int256 delinquencyRate; not implemented\\n    int256 feeAccrued;\\n    int256 feeRate;\\n    int256 priceAtPurchaseDate;\\n    int256 coverageOfCreditEnhancement;\\n    // int256 exerciseAmount; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP settlementPeriod; // not implemented\\n\\n    IPS cycleOfFee;\\n\\n    // for simplification since terms are limited only two contract references\\n    // - make ContractReference top level and skip ContractStructure\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct CERTFTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    CouponType couponType;\\n    // ContractPerformance contractPerformance; state only\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 issueDate;\\n    // uint256 lastCouponFixingDate; // state only\\n    uint256 cycleAnchorDateOfRedemption;\\n    uint256 cycleAnchorDateOfTermination;\\n    uint256 cycleAnchorDateOfCoupon;\\n\\n    int256 nominalPrice;\\n    int256 issuePrice;\\n    // int256 delinquencyRate; // not implemented\\n    int256 quantity;\\n    // int256 exerciseQuantity; // state only\\n    // int256 exerciseQuantityOrdered; // state only\\n    // int256 marginFactor;  // state only\\n    // int256 adjustmentFactor; // state only\\n    int256 denominationRatio;\\n    int256 couponRate;\\n    // int256 exerciseAmount; // state only\\n    // int256 couponAmountFixed; // state only\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    IP settlementPeriod;\\n    IP fixingPeriod;\\n    IP redemptionRecordPeriod;\\n\\n    IPS cycleOfRedemption;\\n    IPS cycleOfTermination;\\n    IPS cycleOfCoupon;\\n\\n    ContractReference contractReference_1;\\n    ContractReference contractReference_2;\\n}\\n\\nstruct PAMTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    ScalingEffect scalingEffect;\\n    // PenaltyType penaltyType; not implemented\\n    FeeBasis feeBasis;\\n    // ContractPerformance contractPerformance; // state only\\n    // Seniority seniority; // not implemented\\n    // PrepaymentEffect prepaymentEffect; // not implemented\\n    // CyclePointOfInterestPayment cyclePointOfInterestPayment; // not implemented\\n    // CyclePointOfRateReset cyclePointOfRateReset; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n    bytes32 marketObjectCodeRateReset;\\n    // bytes32 marketObjectCodeOfScalingIndex; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 issueDate;\\n    // uint256 terminationDate; // state only\\n    uint256 purchaseDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 optionExerciseEndDate; // not implemented\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n    uint256 cycleAnchorDateOfRateReset;\\n    uint256 cycleAnchorDateOfScalingIndex;\\n    uint256 cycleAnchorDateOfFee;\\n    // uint256 cycleAnchorDateOfOptionality; // not implemented\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 rateMultiplier;\\n    int256 rateSpread;\\n    int256 nextResetRate;\\n    int256 feeRate;\\n    int256 feeAccrued;\\n    // int256 penaltyRate; not implemented\\n    // int256 delinquencyRate; // not implemented\\n    int256 premiumDiscountAtIED;\\n    int256 priceAtPurchaseDate;\\n    int256 priceAtTerminationDate;\\n    // int256 creditLineAmount; // not implemented\\n    // int256 scalingIndexAtStatusDate; // not implemented\\n    // int256 marketValueObserved; // not implemented\\n    int256 lifeCap;\\n    int256 lifeFloor;\\n    int256 periodCap;\\n    int256 periodFloor;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n    // IP prepaymentPeriod; // not implemented\\n    // IP fixingPeriod; // not implemented\\n\\n    IPS cycleOfInterestPayment;\\n    IPS cycleOfRateReset;\\n    IPS cycleOfScalingIndex;\\n    IPS cycleOfFee;\\n    // IPS cycleOfOptionality; // not implemented\\n}\\n\\nstruct STKTerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    RedeemableByIssuer redeemableByIssuer;\\n    // Seniority seniority; // not implemented\\n\\n    address currency;\\n    address settlementCurrency;\\n\\n    // bytes32 marketObjectCode; // not implemented\\n\\n    uint256 statusDate;\\n    uint256 issueDate;\\n    uint256 purchaseDate;\\n    uint256 cycleAnchorDateOfDividend;\\n\\n    int256 nominalPrice;\\n    int256 notionalPrincipal;\\n    int256 issuePrice;\\n    int256 quantity;\\n    int256 priceAtPurchaseDate;\\n    int256 redemptionPrice;\\n    int256 priceAtTerminationDate;\\n\\n    IP dividendRecordPeriod;\\n    IP dividendPaymentPeriod;\\n    IP splitSettlementPeriod;\\n    IP redemptionRecordPeriod;\\n    IP redemptionPaymentPeriod;\\n\\n    IPS cycleOfDividend;\\n}\\n\\nstruct COLLATerms {\\n    ContractType contractType;\\n    Calendar calendar;\\n    ContractRole contractRole;\\n    DayCountConvention dayCountConvention;\\n    BusinessDayConvention businessDayConvention;\\n    EndOfMonthConvention endOfMonthConvention;\\n    // ContractPerformance contractPerformance; // state only\\n\\n    bytes32 marketObjectCodeOfCollateral;\\n\\n    address currency;\\n    address settlementCurrency;\\n    address collateralCurrency;\\n\\n    uint256 statusDate;\\n    uint256 initialExchangeDate;\\n    uint256 maturityDate;\\n    uint256 capitalizationEndDate;\\n    // uint256 nonPerformingDate; // state only\\n    uint256 cycleAnchorDateOfInterestPayment;\\n\\n    int256 notionalPrincipal;\\n    int256 nominalInterestRate;\\n    int256 accruedInterest;\\n    int256 premiumDiscountAtIED;\\n    int256 coverageOfCollateral;\\n\\n    IP gracePeriod;\\n    IP delinquencyPeriod;\\n\\n    IPS cycleOfInterestPayment;\\n}\\n\",\"keccak256\":\"0x79bdd18aa3c6bdb9bb27e50b140bf43977ced292fdf89c2b2a237a0ec6c719fb\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Utils/EventUtils.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n/**\\n * @title EventUtils\\n * @notice Methods for encoding decoding events\\n */\\ncontract EventUtils {\\n\\n    function encodeEvent(EventType eventType, uint256 scheduleTime)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return (\\n            bytes32(uint256(uint8(eventType))) << 248 |\\n            bytes32(scheduleTime)\\n        );\\n    }\\n\\n    function decodeEvent(bytes32 _event)\\n        public\\n        pure\\n        returns (EventType, uint256)\\n    {\\n        EventType eventType = EventType(uint8(uint256(_event >> 248)));\\n        uint256 scheduleTime = uint256(uint64(uint256(_event)));\\n\\n        return (eventType, scheduleTime);\\n    }\\n\\n    /**\\n     * @notice Returns the epoch offset for a given event type to determine the\\n     * correct order of events if multiple events have the same timestamp\\n     */\\n    function getEpochOffset(EventType eventType)\\n        public\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(eventType);\\n    }\\n}\\n\",\"keccak256\":\"0x0b57772142cc74943c55eea2bd2c8d2fd035bead19592b75cd4f7ad3159f96ee\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Core/Utils/PeriodUtils.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {SafeMath as SafeMul} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../../../external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\\\";\\n\\nimport \\\"../ACTUSTypes.sol\\\";\\n\\n/**\\n * @title PeriodUtils\\n * @notice Utility methods for dealing with Periods\\n */\\ncontract PeriodUtils {\\n\\n    using BokkyPooBahsDateTimeLibrary for uint;\\n    using SafeMul for uint;\\n\\n    /**\\n     * @notice Applies a period in IP notation to a given timestamp\\n     */\\n    function getTimestampPlusPeriod(IP memory period, uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        uint256 newTimestamp;\\n\\n        if (period.p == P.D) {\\n            newTimestamp = timestamp.addDays(period.i);\\n        } else if (period.p == P.W) {\\n            newTimestamp = timestamp.addDays(period.i.mul(7));\\n        } else if (period.p == P.M) {\\n            newTimestamp = timestamp.addMonths(period.i);\\n        } else if (period.p == P.Q) {\\n            newTimestamp = timestamp.addMonths(period.i.mul(3));\\n        } else if (period.p == P.H) {\\n            newTimestamp = timestamp.addMonths(period.i.mul(6));\\n        } else if (period.p == P.Y) {\\n            newTimestamp = timestamp.addYears(period.i);\\n        } else {\\n            revert(\\\"PeriodUtils.getTimestampPlusPeriod: ATTRIBUTE_NOT_FOUND\\\");\\n        }\\n\\n        return newTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x7ba86e98c89c11d4b16bb7cf81339679e01c7a73d099a980e71335bb890e82d9\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/COLLA/ICOLLAEngine.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../Core/ACTUSTypes.sol\\\";\\nimport \\\"../IEngine.sol\\\";\\n\\n\\n/**\\n * @title IEngine\\n * @notice Interface which all Engines have to implement\\n */\\ninterface ICOLLAEngine is IEngine {\\n\\n    /**\\n     * @notice Initialize contract state space based on the contract terms.\\n     * @param terms terms of the contract\\n     * @return initial state of the contract\\n     */\\n    function computeInitialState(COLLATerms calldata terms)\\n        external\\n        pure\\n        returns (COLLAState memory);\\n\\n    /**\\n     * Applys an event to the current state of a contract and returns the resulting contract state.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event to be applied to the contract state\\n     * @param externalData external data needed for STF evaluation (e.g. rate for RR events)\\n     * @return the resulting contract state\\n     */\\n    function computeStateForEvent(\\n        COLLATerms calldata terms,\\n        COLLAState calldata state,\\n        bytes32 _event,\\n        bytes calldata externalData\\n    )\\n        external\\n        pure\\n        returns (COLLAState memory);\\n\\n    /**\\n     * Evaluates the payoff for an event under the current state of the contract.\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param _event event for which the payoff should be evaluated\\n     * @param externalData external data needed for POF evaluation (e.g. fxRate)\\n     * @return the payoff of the event\\n     */\\n    function computePayoffForEvent(\\n        COLLATerms calldata terms,\\n        COLLAState calldata state,\\n        bytes32 _event,\\n        bytes calldata externalData\\n    )\\n        external\\n        pure\\n        returns (int256);\\n\\n    /**\\n     * @notice Computes a schedule segment of non-cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segement\\n     * @return segment of the non-cyclic schedule\\n     */\\n    function computeNonCyclicScheduleSegment(\\n        COLLATerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd\\n    )\\n        external\\n        pure\\n        returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Computes the next non-cyclic contract events based on the contract terms\\n     * and the timestamp on which the prev. event occured.\\n     * @dev Assumes that non-cyclic events of the same event type have a unique schedule time\\n     * @param terms terms of the contract\\n     * @param lastNonCyclicEvent last non-cyclic event\\n     * @return next non-cyclic event\\n     */\\n    function computeNextNonCyclicEvent(\\n        COLLATerms calldata terms,\\n        bytes32 lastNonCyclicEvent\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param lastScheduleTime last occurrence of cyclic event\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeNextCyclicEvent(\\n        COLLATerms calldata terms,\\n        uint256 lastScheduleTime,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        returns(bytes32);\\n\\n    /**\\n     * @notice Computes a schedule segment of cyclic contract events based on the contract terms\\n     * and the specified timestamps.\\n     * @param terms terms of the contract\\n     * @param segmentStart start timestamp of the segment\\n     * @param segmentEnd end timestamp of the segement\\n     * @param eventType eventType of the cyclic schedule\\n     * @return event schedule segment\\n     */\\n    function computeCyclicScheduleSegment(\\n        COLLATerms calldata terms,\\n        uint256 segmentStart,\\n        uint256 segmentEnd,\\n        EventType eventType\\n    )\\n        external\\n        pure\\n        returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Verifies that the provided event is still scheduled under the terms, the current state of the\\n     * contract and the current state of the underlying.\\n     * @param _event event for which to check if its still scheduled\\n     * @param terms terms of the contract\\n     * @param state current state of the contract\\n     * @param underlyingState state of the underlying (empty state object if non-existing)\\n     * @return boolean indicating whether event is still scheduled\\n     */\\n    function isEventScheduled(\\n        bytes32 _event,\\n        COLLATerms calldata terms,\\n        COLLAState calldata state,\\n        UnderlyingState calldata underlyingState\\n    )\\n        external\\n        pure\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x99e9d4cb1a4322aa9791484648022ee7c6cc6b6dcb7ef39b4969342ff5b330d8\",\"license\":\"Apache-2.0\"},\"contracts/ACTUS/Engines/IEngine.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../Core/ACTUSTypes.sol\\\";\\n\\n\\ninterface IEngine {\\n    function contractType() external pure returns (ContractType);\\n}\",\"keccak256\":\"0xe2ecdc18616473e64d932c47ccf8408e5a35c100fa24e3157ad9f530556135bb\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/AccessControl/AccessControl.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\nimport \\\"./IAccessControl.sol\\\";\\n\\n\\ncontract AccessControl is BaseRegistryStorage, IAccessControl {\\n\\n    event GrantedAccess(bytes32 indexed assetId, address indexed account, bytes4 methodSignature);\\n    event RevokedAccess(bytes32 indexed assetId, address indexed account, bytes4 methodSignature);\\n\\n\\n    // Method signature == bytes4(0) := Access to all methods defined in the Asset Registry contract\\n    bytes4 constant ROOT_ACCESS = 0;\\n\\n\\n    modifier isAuthorized(bytes32 assetId) {\\n        require(\\n            msg.sender == assets[assetId].actor || hasAccess(assetId, msg.sig, msg.sender),\\n            \\\"AccessControl.isAuthorized: UNAUTHORIZED_SENDER\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Grant access to an account to call a specific method on a specific asset.\\n     * @dev Can only be called by an authorized account.\\n     * @param assetId id of the asset\\n     * @param methodSignature function / method signature (4 byte keccak256 hash of the method selector)\\n     * @param account address of the account to grant access to\\n     */\\n    function grantAccess(bytes32 assetId, bytes4 methodSignature, address account)\\n        external\\n        override\\n    {\\n        require(\\n            hasAccess(assetId, msg.sig, msg.sender),\\n            \\\"AccessControl.revokeAccess: UNAUTHORIZED_SENDER\\\"\\n        );\\n\\n        assets[assetId].access[methodSignature][account] = true;\\n\\n        emit GrantedAccess(assetId, account, methodSignature);\\n    }\\n\\n    /**\\n     * @notice Revoke access for an account to call a specific method on a specific asset.\\n     * @dev Can only be called by an authorized account.\\n     * @param assetId id of the asset\\n     * @param methodSignature function / method signature (4 byte keccak256 hash of the method selector)\\n     * @param account address of the account to revoke access for\\n     */\\n    function revokeAccess(bytes32 assetId, bytes4 methodSignature, address account)\\n        external\\n        override\\n    {\\n        require(\\n            hasAccess(assetId, msg.sig, msg.sender),\\n            \\\"AccessControl.revokeAccess: UNAUTHORIZED_SENDER\\\"\\n        );\\n\\n        assets[assetId].access[methodSignature][account] = false;\\n\\n        emit RevokedAccess(assetId, account, methodSignature);\\n    }\\n\\n    /**\\n     * @notice Check whether an account is allowed to call a specific method on a specific asset.\\n     * @param assetId id of the asset\\n     * @param methodSignature function / method signature (4 byte keccak256 hash of the method selector)\\n     * @param account address of the account for which to check access\\n     * @return true if allowed access\\n     */\\n    function hasAccess(bytes32 assetId, bytes4 methodSignature, address account)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return (\\n            assets[assetId].access[methodSignature][account] || assets[assetId].access[ROOT_ACCESS][account]\\n        );\\n    }\\n\\n    /**\\n     * @notice Check whether an account has root access for a specific asset.\\n     * @param assetId id of the asset\\n     * @param account address of the account for which to check root acccess\\n     * @return  true if has root access\\n     */\\n    function hasRootAccess(bytes32 assetId, address account)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return (assets[assetId].access[ROOT_ACCESS][account]);\\n    }\\n\\n    /**\\n     * @notice Grant access to an account to call all methods on a specific asset\\n     * (giving the account root access to an asset).\\n     * @param assetId id of the asset\\n     * @param account address of the account to set as the root\\n     */\\n    function setDefaultRoot(bytes32 assetId, address account) internal {\\n        assets[assetId].access[ROOT_ACCESS][account] = true;\\n        emit GrantedAccess(assetId, account, ROOT_ACCESS);\\n    }\\n}\\n\",\"keccak256\":\"0xc341374240e788188722dea783a0d7197f431c4c8ed766a417077f8a7a6c2d46\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/AccessControl/IAccessControl.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IAccessControl {\\n\\n    function grantAccess(bytes32 assetId, bytes4 methodSignature, address account)\\n        external;\\n\\n    function revokeAccess(bytes32 assetId, bytes4 methodSignature, address account)\\n        external;\\n\\n    function hasAccess(bytes32 assetId, bytes4 methodSignature, address account)\\n        external\\n        returns (bool);\\n\\n    function hasRootAccess(bytes32 assetId, address account)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x69235896cd0d8b8d460acad192d238bfac387212c2d4b50d495146de90ef9abf\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/BaseRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"../SharedTypes.sol\\\";\\n\\nimport \\\"./BaseRegistryStorage.sol\\\";\\nimport \\\"./IBaseRegistry.sol\\\";\\nimport \\\"./Ownership/OwnershipRegistry.sol\\\";\\nimport \\\"./Terms/TermsRegistry.sol\\\";\\nimport \\\"./State/StateRegistry.sol\\\";\\nimport \\\"./Schedule/ScheduleRegistry.sol\\\";\\nimport \\\"./Schedule/ScheduleEncoder.sol\\\";\\n\\n\\n/**\\n * @title BaseRegistry\\n * @notice Registry for ACTUS Protocol assets\\n */\\nabstract contract BaseRegistry is\\n    Ownable,\\n    BaseRegistryStorage,\\n    TermsRegistry,\\n    StateRegistry,\\n    ScheduleRegistry,\\n    OwnershipRegistry,\\n    IBaseRegistry\\n{\\n    using ScheduleEncoder for Asset;\\n\\n    event RegisteredAsset(bytes32 assetId);\\n    event UpdatedEngine(bytes32 indexed assetId, address prevEngine, address newEngine);\\n    event UpdatedActor(bytes32 indexed assetId, address prevActor, address newActor);\\n\\n    mapping(address => bool) public approvedActors;\\n\\n\\n    modifier onlyApprovedActors {\\n        require(\\n            approvedActors[msg.sender],\\n            \\\"BaseRegistry.onlyApprovedActors: UNAUTHORIZED_SENDER\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() BaseRegistryStorage() {}\\n\\n    /**\\n     * @notice Approves the address of an actor contract e.g. for registering assets.\\n     * @dev Can only be called by the owner of the contract.\\n     * @param actor address of the actor\\n     */\\n    function approveActor(address actor) external onlyOwner {\\n        approvedActors[actor] = true;\\n    }\\n\\n    /**\\n     * @notice Returns if there is an asset registerd for a given assetId\\n     * @param assetId id of the asset\\n     * @return true if asset exist\\n     */\\n    function isRegistered(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return assets[assetId].isSet;\\n    }\\n\\n    /**\\n     * @notice Stores the addresses of the owners (owner of creator-side payment obligations,\\n     * owner of creator-side payment claims), the schedule of the asset\\n     * and sets the address of the actor (address of account which is allowed to update the state).\\n     * Terms and State are contract-type specific and have to be handled by the deriving contracts.\\n     * @dev The state of the asset can only be updates by a whitelisted actor.\\n     * @param assetId id of the asset\\n     * @param schedule schedule of the asset\\n     * @param ownership ownership of the asset\\n     * @param engine ACTUS Engine of the asset\\n     * @param actor account which is allowed to update the asset state\\n     * @param admin account which as admin rights (optional)\\n     * @param extension address of the extension (optional)\\n     */\\n    function setAsset(\\n        bytes32 assetId,\\n        bytes32[] memory schedule,\\n        AssetOwnership memory ownership,\\n        address engine,\\n        address actor,\\n        address admin,\\n        address extension\\n    )\\n        internal\\n    {\\n        Asset storage asset = assets[assetId];\\n\\n        // revert if an asset with the specified assetId already exists\\n        require(\\n            asset.isSet == false,\\n            \\\"BaseRegistry.setAsset: ASSET_ALREADY_EXISTS\\\"\\n        );\\n        // revert if specified address of the actor is not approved\\n        require(\\n            approvedActors[actor] == true,\\n            \\\"BaseRegistry.setAsset: ACTOR_NOT_APPROVED\\\"\\n        );\\n\\n        asset.isSet = true;\\n        asset.ownership = ownership;\\n        asset.engine = engine;\\n        asset.actor = actor;\\n        asset.extension = extension;\\n\\n        asset.encodeAndSetSchedule(schedule);\\n\\n        // set external admin if specified\\n        if (admin != address(0)) setDefaultRoot(assetId, admin);\\n\\n        emit RegisteredAsset(assetId);\\n    }\\n\\n    /**\\n     * @notice Returns the address of a the ACTUS engine corresponding to the ContractType of an asset.\\n     * @param assetId id of the asset\\n     * @return address of the engine of the asset\\n     */\\n    function getEngine(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return assets[assetId].engine;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the actor which is allowed to update the state of the asset.\\n     * @param assetId id of the asset\\n     * @return address of the asset actor\\n     */\\n    function getActor(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return assets[assetId].actor;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the extension which is allowed to generate events for the asset.\\n     * @param assetId id of the asset\\n     * @return address of the asset actor\\n     */\\n    function getExtension(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (address)\\n    {\\n        return assets[assetId].extension;\\n    }\\n\\n    /**\\n     * @notice Set the engine address which should be used for the asset going forward.\\n     * @dev Can only be set by authorized account.\\n     * @param assetId id of the asset\\n     * @param engine new engine address\\n     */\\n    function setEngine(bytes32 assetId, address engine)\\n        external\\n        override\\n        isAuthorized (assetId)\\n    {\\n        address prevEngine = assets[assetId].engine;\\n        assets[assetId].engine = engine;\\n\\n        emit UpdatedEngine(assetId, prevEngine, engine);\\n    }\\n\\n    /**\\n     * @notice Set the address of the Actor contract which should be going forward.\\n     * @param assetId id of the asset\\n     * @param actor address of the Actor contract\\n     */\\n    function setActor(bytes32 assetId, address actor)\\n        external\\n        override\\n        isAuthorized (assetId)\\n    {\\n        address prevActor = assets[assetId].actor;\\n        assets[assetId].actor = actor;\\n\\n        emit UpdatedActor(assetId, prevActor, actor);\\n    }\\n\\n    /**\\n     * @notice Set the extension address which should be used for the asset going forward.\\n     * @dev Can only be set by authorized account.\\n     * @param assetId id of the asset\\n     * @param extension new extension address\\n     */\\n    function setExtension(bytes32 assetId, address extension)\\n        external\\n        override\\n        isAuthorized (assetId)\\n    {\\n        address prevExtension = assets[assetId].extension;\\n        assets[assetId].extension = extension;\\n\\n        emit UpdatedEngine(assetId, prevExtension, extension);\\n    }\\n}\\n\",\"keccak256\":\"0xb750e582bdb1cea52d3410a9a7e9dce6ad92f645b02e3ec48eb0246530e06012\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/BaseRegistryStorage.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Conversions.sol\\\";\\nimport \\\"../SharedTypes.sol\\\";\\nimport \\\"./Schedule/ScheduleEncoder.sol\\\";\\n\\n\\nstruct Settlement {\\n    bool isSettled;\\n    int256 payoff;\\n}\\n\\nstruct Asset {\\n    // boolean indicating that asset exists / is registered\\n    bool isSet;\\n    // address of the ACTUS Engine used for computing the State and the Payoff of the asset\\n    address engine;\\n    // address of the Asset Actor which is allowed to update the State of the asset\\n    address actor;\\n    // address of the Extension which is able to generate unscheduled events for the asset\\n    address extension;\\n    // schedule of the asset\\n    Schedule schedule;\\n    // ownership of the asset\\n    AssetOwnership ownership;\\n    // method level access control - stores which address can a specific method\\n    // method signature => address => has access\\n    mapping (bytes4 => mapping (address => bool)) access;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedTerms;\\n    // tightly packed, encoded Terms and State values of the asset\\n    // bytes32(0) used as default value for each attribute\\n    // storage id => bytes32 encoded value\\n    mapping (bytes32 => bytes32) packedState;\\n    // indicates whether a specific event was settled\\n    mapping (bytes32 => Settlement) settlement;\\n}\\n\\n/**\\n * @title BaseRegistryStorage\\n * @notice Describes the storage of the AssetRegistry\\n * Contains getter and setter methods for encoding, decoding data to optimize gas cost.\\n * Circumvents storing default values by relying on the characteristic of mappings returning zero for not set values.\\n */\\nabstract contract BaseRegistryStorage {\\n\\n    using ScheduleEncoder for Asset;\\n\\n    // AssetId => Asset\\n    mapping (bytes32 => Asset) internal assets;\\n}\\n\",\"keccak256\":\"0x3e8beac681f832d8b6dcf0a1be328ae129c7d71e7ab75ebe2d0809edcc813b46\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/IAssetRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./AccessControl/IAccessControl.sol\\\";\\nimport \\\"./Terms/ITermsRegistry.sol\\\";\\nimport \\\"./State/IStateRegistry.sol\\\";\\nimport \\\"./Schedule/IScheduleRegistry.sol\\\";\\nimport \\\"./Ownership/IOwnershipRegistry.sol\\\";\\nimport \\\"./IBaseRegistry.sol\\\";\\n\\n\\ninterface IAssetRegistry is\\n    IAccessControl,\\n    ITermsRegistry,\\n    IStateRegistry,\\n    IScheduleRegistry,\\n    IOwnershipRegistry,\\n    IBaseRegistry\\n{}\\n\",\"keccak256\":\"0xe7b720c06a1f2656d16d743cd6fed5787c9b802b70917abf17656dd2d1c735e7\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/IBaseRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n\\ninterface IBaseRegistry {\\n\\n    function isRegistered(bytes32 assetId)\\n        external\\n        view\\n        returns (bool);\\n\\n    function getEngine(bytes32 assetId)\\n        external\\n        view\\n        returns (address);\\n\\n    function getActor(bytes32 assetId)\\n        external\\n        view\\n        returns (address);\\n\\n    function getExtension(bytes32 assetId)\\n        external\\n        view\\n        returns (address);\\n\\n    function setEngine(bytes32 assetId, address engine)\\n        external;\\n\\n    function setActor(bytes32 assetId, address actor)\\n        external;\\n\\n    function setExtension(bytes32 assetId, address extension)\\n        external;\\n}\\n\",\"keccak256\":\"0x7fa97b588cb3c73ed61f77f66417f6431a969a81e7b881d877d018992132afce\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Ownership/IOwnershipRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\n\\n\\ninterface IOwnershipRegistry {\\n\\n    function setCreatorObligor (bytes32 assetId, address newCreatorObligor)\\n        external;\\n\\n    function setCounterpartyObligor (bytes32 assetId, address newCounterpartyObligor)\\n        external;\\n\\n    function setCreatorBeneficiary(bytes32 assetId, address newCreatorBeneficiary)\\n        external;\\n\\n    function setCounterpartyBeneficiary(bytes32 assetId, address newCounterpartyBeneficiary)\\n        external;\\n\\n    function getOwnership(bytes32 assetId)\\n        external\\n        view\\n        returns (AssetOwnership memory);\\n}\\n\",\"keccak256\":\"0x7ad4e4883948d40754366c61279e7e1eb8e3c2eb42766c18ad3e07d5f74a7290\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Ownership/OwnershipRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\nimport \\\"../AccessControl/AccessControl.sol\\\";\\nimport \\\"./IOwnershipRegistry.sol\\\";\\n\\n\\n/**\\n * @title OwnershipRegistry\\n */\\ncontract OwnershipRegistry is BaseRegistryStorage, AccessControl, IOwnershipRegistry {\\n\\n    event UpdatedObligor (bytes32 assetId, address prevObligor, address newObligor);\\n    event UpdatedBeneficiary(bytes32 assetId, address prevBeneficiary, address newBeneficiary);\\n\\n\\n    /**\\n     * @notice Update the address of the default beneficiary of cashflows going to the creator.\\n     * @dev Can only be updated by the current creator beneficiary or by an authorized account.\\n     * @param assetId id of the asset\\n     * @param newCreatorBeneficiary address of the new beneficiary\\n     */\\n    function setCreatorBeneficiary(\\n        bytes32 assetId,\\n        address newCreatorBeneficiary\\n    )\\n        external\\n        override\\n    {\\n        address prevCreatorBeneficiary = assets[assetId].ownership.creatorBeneficiary;\\n\\n        require(\\n            prevCreatorBeneficiary != address(0),\\n            \\\"AssetRegistry.setCreatorBeneficiary: ENTRY_DOES_NOT_EXIST\\\"\\n        );\\n        require(\\n            msg.sender == prevCreatorBeneficiary || hasAccess(assetId, msg.sig, msg.sender),\\n            \\\"AssetRegistry.setCreatorBeneficiary: UNAUTHORIZED_SENDER\\\"\\n        );\\n\\n        assets[assetId].ownership.creatorBeneficiary = newCreatorBeneficiary;\\n\\n        emit UpdatedBeneficiary(assetId, prevCreatorBeneficiary, newCreatorBeneficiary);\\n    }\\n\\n    /**\\n     * @notice Updates the address of the default beneficiary of cashflows going to the counterparty.\\n     * @dev Can only be updated by the current counterparty beneficiary or by an authorized account.\\n     * @param assetId id of the asset\\n     * @param newCounterpartyBeneficiary address of the new beneficiary\\n     */\\n    function setCounterpartyBeneficiary(\\n        bytes32 assetId,\\n        address newCounterpartyBeneficiary\\n    )\\n        external\\n        override\\n    {\\n        address prevCounterpartyBeneficiary = assets[assetId].ownership.counterpartyBeneficiary;\\n\\n        require(\\n            prevCounterpartyBeneficiary != address(0),\\n            \\\"AssetRegistry.setCounterpartyBeneficiary: ENTRY_DOES_NOT_EXIST\\\"\\n        );\\n        require(\\n            msg.sender == prevCounterpartyBeneficiary || hasAccess(assetId, msg.sig, msg.sender),\\n            \\\"AssetRegistry.setCounterpartyBeneficiary: UNAUTHORIZED_SENDER\\\"\\n        );\\n\\n        assets[assetId].ownership.counterpartyBeneficiary = newCounterpartyBeneficiary;\\n\\n        emit UpdatedBeneficiary(assetId, prevCounterpartyBeneficiary, newCounterpartyBeneficiary);\\n    }\\n\\n    /**\\n     * @notice Update the address of the obligor which has to fulfill obligations\\n     * for the creator of the asset.\\n     * @dev Can only be updated by an authorized account.\\n     * @param assetId id of the asset\\n     * @param newCreatorObligor address of the new creator obligor\\n     */\\n    function setCreatorObligor (bytes32 assetId, address newCreatorObligor)\\n        external\\n        override\\n    {\\n        require(\\n            hasAccess(assetId, msg.sig, msg.sender),\\n            \\\"AssetRegistry.setCreatorObligor: UNAUTHORIZED_SENDER\\\"\\n        );\\n\\n        address prevCreatorObligor = assets[assetId].ownership.creatorObligor;\\n\\n        assets[assetId].ownership.creatorObligor = newCreatorObligor;\\n\\n        emit UpdatedObligor(assetId, prevCreatorObligor, newCreatorObligor);\\n    }\\n\\n    /**\\n     * @notice Update the address of the counterparty which has to fulfill obligations\\n     * for the counterparty of the asset.\\n     * @dev Can only be updated by an authorized account.\\n     * @param assetId id of the asset\\n     * @param newCounterpartyObligor address of the new counterparty obligor\\n     */\\n    function setCounterpartyObligor (bytes32 assetId, address newCounterpartyObligor)\\n        external\\n        override\\n    {\\n        require(\\n            hasAccess(assetId, msg.sig, msg.sender),\\n            \\\"AssetRegistry.setCounterpartyObligor: UNAUTHORIZED_SENDER\\\"\\n        );\\n\\n        address prevCounterpartyObligor = assets[assetId].ownership.counterpartyObligor;\\n\\n        assets[assetId].ownership.counterpartyObligor = newCounterpartyObligor;\\n\\n        emit UpdatedObligor(assetId, prevCounterpartyObligor, newCounterpartyObligor);\\n    }\\n\\n    /**\\n     * @notice Retrieves the registered addresses of owners (creator, counterparty) of an asset.\\n     * @param assetId id of the asset\\n     * @return addresses of all owners of the asset\\n     */\\n    function getOwnership(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (AssetOwnership memory)\\n    {\\n        return assets[assetId].ownership;\\n    }\\n}\\n\",\"keccak256\":\"0x2376a3cbc9c5195e4cc0b4fb46a672785e1cb051147676dc93bbbdaee8593392\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Schedule/IScheduleRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\n\\n\\ninterface IScheduleRegistry {\\n\\n    function getPendingEvent (bytes32 assetId)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function pushPendingEvent (bytes32 assetId, bytes32 pendingEvent)\\n        external;\\n\\n    function popPendingEvent (bytes32 assetId)\\n        external\\n        returns (bytes32);\\n\\n    function getNextUnderlyingEvent (bytes32 assetId)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function getEventAtIndex(bytes32 assetId, uint256 index)\\n        external\\n        view\\n        returns (bytes32);\\n    \\n    function getScheduleLength(bytes32 assetId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getSchedule(bytes32 assetId)\\n        external\\n        view\\n        returns (bytes32[] memory);\\n\\n    function getNextScheduleIndex(bytes32 assetId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getNextScheduledEvent (bytes32 assetId)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function popNextScheduledEvent(bytes32 assetId)\\n        external\\n        returns (bytes32);\\n\\n    function isEventSettled(bytes32 assetId, bytes32 _event)\\n        external\\n        view\\n        returns (bool, int256);\\n\\n    function markEventAsSettled(bytes32 assetId, bytes32 _event, int256 _payoff)\\n        external;\\n}\\n\",\"keccak256\":\"0x4c9d29c2a2dfb2ad5279c0ab200497803ea89f4e67495955a1ace5b936babd78\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Schedule/ScheduleEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary ScheduleEncoder {\\n\\n    function encodeAndSetSchedule(Asset storage asset, bytes32[] memory schedule) internal {\\n        for (uint256 i = 0; i < schedule.length; i++) {\\n            if (schedule[i] == bytes32(0)) break;\\n            asset.schedule.events[i] = schedule[i];\\n            asset.schedule.length = i + 1;\\n        }\\n    }\\n\\n    function decodeAndGetSchedule(Asset storage asset) internal view returns (bytes32[] memory) {\\n        bytes32[] memory schedule = new bytes32[](asset.schedule.length);\\n\\n        for (uint256 i = 0; i < asset.schedule.length; i++) {\\n            schedule[i] = asset.schedule.events[i];\\n        }\\n\\n        return schedule;\\n    }\\n}\\n\",\"keccak256\":\"0x420da04c67322d387c9b0fbeb00accc59a63fb9c10cb7b4c21f955792c4ad236\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Schedule/ScheduleRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../../../ACTUS/Core/Utils/EventUtils.sol\\\";\\nimport \\\"../../../../ACTUS/Core/Utils/PeriodUtils.sol\\\";\\n\\nimport \\\"../BaseRegistryStorage.sol\\\";\\nimport \\\"../IBaseRegistry.sol\\\";\\nimport \\\"../AccessControl/AccessControl.sol\\\";\\nimport \\\"../Terms/TermsRegistry.sol\\\";\\nimport \\\"../Terms/ITermsRegistry.sol\\\";\\nimport \\\"../State/StateRegistry.sol\\\";\\nimport \\\"../State/IStateRegistry.sol\\\";\\nimport \\\"./IScheduleRegistry.sol\\\";\\nimport \\\"./ScheduleEncoder.sol\\\";\\n\\n\\n/**\\n * @title ScheduleRegistry\\n */\\nabstract contract ScheduleRegistry is\\n    BaseRegistryStorage,\\n    AccessControl,\\n    TermsRegistry,\\n    StateRegistry,\\n    IScheduleRegistry,\\n    EventUtils,\\n    PeriodUtils\\n{\\n    using ScheduleEncoder for Asset;\\n\\n\\n    /**\\n     * @notice Returns an event for a given position (index) in a schedule of a given asset.\\n     * @param assetId id of the asset\\n     * @param index index of the event to return\\n     * @return Event\\n     */\\n    function getEventAtIndex(bytes32 assetId, uint256 index)\\n        external\\n        view\\n        override\\n        returns (bytes32)\\n    {\\n        return assets[assetId].schedule.events[index];\\n    }\\n\\n\\n    /**\\n     * @notice Returns the length of a schedule of a given asset.\\n     * @param assetId id of the asset\\n     * @return Length of the schedule\\n     */\\n    function getScheduleLength(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return assets[assetId].schedule.length;\\n    }\\n\\n    /**\\n     * @notice Convenience method for retrieving the entire schedule\\n     * Not recommended to execute method on-chain (if schedule is too long the tx may run out of gas)\\n     * @param assetId id of the asset\\n     * @return the schedule\\n     */\\n    function getSchedule(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (bytes32[] memory)\\n    {\\n        return assets[assetId].decodeAndGetSchedule();\\n    }\\n\\n    function getPendingEvent(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (bytes32)\\n    {\\n        return assets[assetId].schedule.pendingEvent;\\n    }\\n\\n    function pushPendingEvent(bytes32 assetId, bytes32 pendingEvent)\\n        external\\n        override\\n        isAuthorized (assetId)\\n    {\\n        assets[assetId].schedule.pendingEvent = pendingEvent;\\n    }\\n\\n    function popPendingEvent(bytes32 assetId)\\n        external\\n        override\\n        isAuthorized (assetId)\\n        returns (bytes32)\\n    {\\n        bytes32 pendingEvent = assets[assetId].schedule.pendingEvent;\\n        assets[assetId].schedule.pendingEvent = bytes32(0);\\n\\n        return pendingEvent;\\n    }\\n\\n    /**\\n     * @notice Returns the index of the next event to be processed for a schedule of an asset.\\n     * @param assetId id of the asset\\n     * @return Index\\n     */\\n    function getNextScheduleIndex(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return assets[assetId].schedule.nextScheduleIndex;\\n    }\\n\\n    /**\\n     * @notice If the underlying of the asset changes in performance to a covered performance,\\n     * it returns the exerciseDate event.\\n     */\\n    function getNextUnderlyingEvent(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (bytes32)\\n    {\\n        ContractReference memory contractReference_1 = getContractReferenceValueForTermsAttribute(assetId, \\\"contractReference_1\\\");\\n\\n        // check for COVE\\n        if (contractReference_1.object != bytes32(0) && contractReference_1.role == ContractReferenceRole.COVE) {\\n            bytes32 underlyingAssetId = contractReference_1.object;\\n            address underlyingRegistry = address(uint160(uint256(contractReference_1.object2))); // workaround for solc bug (replace with bytes)\\n\\n            require(\\n                IBaseRegistry(underlyingRegistry).isRegistered(underlyingAssetId),\\n                \\\"AssetActor.getNextUnderlyingEvent: UNDERLYING_ASSET_DOES_NOT_EXIST\\\"\\n            );\\n\\n            uint256 exerciseDate = getUintValueForStateAttribute(assetId, \\\"exerciseDate\\\");\\n            ContractPerformance creditEventTypeCovered = ContractPerformance(getEnumValueForTermsAttribute(assetId, \\\"creditEventTypeCovered\\\"));\\n            ContractPerformance underlyingContractPerformance = ContractPerformance(IStateRegistry(underlyingRegistry).getEnumValueForStateAttribute(underlyingAssetId, \\\"contractPerformance\\\"));\\n            uint256 underlyingNonPerformingDate = IStateRegistry(underlyingRegistry).getUintValueForStateAttribute(underlyingAssetId, \\\"nonPerformingDate\\\");\\n\\n            // check if exerciseDate has been triggered\\n            if (exerciseDate > 0) {\\n                // insert SettlementDate event\\n                return encodeEvent(\\n                    EventType.ST,\\n                    // solium-disable-next-line\\n                    block.timestamp\\n                );\\n            }\\n            // if not check if performance of underlying asset is covered by this asset (PF excluded)\\n            if (\\n                creditEventTypeCovered != ContractPerformance.PF\\n                && underlyingContractPerformance == creditEventTypeCovered\\n            ) {\\n                // insert exerciseDate event\\n                // derive scheduleTimeOffset from performance\\n                if (underlyingContractPerformance == ContractPerformance.DL) {\\n                    return encodeEvent(\\n                        EventType.EXE,\\n                        underlyingNonPerformingDate\\n                    );\\n                } else if (underlyingContractPerformance == ContractPerformance.DQ) {\\n                    IP memory underlyingGracePeriod = ITermsRegistry(underlyingRegistry).getPeriodValueForTermsAttribute(underlyingAssetId, \\\"gracePeriod\\\");\\n                    return encodeEvent(\\n                        EventType.EXE,\\n                        getTimestampPlusPeriod(underlyingGracePeriod, underlyingNonPerformingDate)\\n                    );\\n                } else if (underlyingContractPerformance == ContractPerformance.DF) {\\n                    IP memory underlyingDelinquencyPeriod = ITermsRegistry(underlyingRegistry).getPeriodValueForTermsAttribute(underlyingAssetId, \\\"delinquencyPeriod\\\");\\n                    return encodeEvent(\\n                        EventType.EXE,\\n                        getTimestampPlusPeriod(underlyingDelinquencyPeriod, underlyingNonPerformingDate)\\n                    );\\n                }\\n            }\\n        }\\n\\n        return bytes32(0);\\n    }\\n\\n    /**\\n     * @notice Returns the next event to process.\\n     * @param assetId id of the asset\\n     * @return event\\n     */\\n    function getNextScheduledEvent(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (bytes32)\\n    {\\n        Asset storage asset = assets[assetId];\\n\\n        if (asset.schedule.length != 0) {\\n            if (asset.schedule.nextScheduleIndex == asset.schedule.length) return bytes32(0);\\n            return asset.schedule.events[asset.schedule.nextScheduleIndex];\\n        }\\n\\n        // if no schedule is set, return next computed event\\n        (bytes32 nextComputedEvent, ) = getNextComputedEvent(assetId);\\n        return nextComputedEvent;\\n    }\\n\\n    /**\\n     * @notice Increments the index of a schedule of an asset.\\n     * (if max index is reached the index will be left unchanged)\\n     * @dev Can only be updated by the assets actor or by an authorized account.\\n     * @param assetId id of the asset\\n     */\\n    function popNextScheduledEvent(bytes32 assetId)\\n        external\\n        override\\n        isAuthorized (assetId)\\n        returns (bytes32)\\n    {\\n        Asset storage asset = assets[assetId];\\n\\n        if (asset.schedule.length != 0) {\\n            bytes32 nextScheduledEvent = asset.schedule.events[asset.schedule.nextScheduleIndex];\\n            if (asset.schedule.nextScheduleIndex == asset.schedule.length) return bytes32(0);\\n            asset.schedule.nextScheduleIndex += 1;\\n            return nextScheduledEvent;\\n        }\\n\\n        // if no schedule is set, pop next computed event\\n        (bytes32 nextComputedEvent, bool isCyclicEvent) = getNextComputedEvent(assetId);\\n        if (nextComputedEvent == bytes32(0)) return bytes32(0);\\n        \\n        (EventType eventType, uint256 scheduleTime) = decodeEvent(nextComputedEvent);\\n\\n        // if next computed event is a cyclic event\\n        if (isCyclicEvent == true) {\\n            asset.schedule.lastScheduleTimeOfCyclicEvent[eventType] = scheduleTime;\\n        } else {\\n            asset.schedule.lastNonCyclicEvent = nextComputedEvent;\\n        }\\n\\n        return nextComputedEvent;\\n    }\\n\\n    /**\\n     * @notice Returns true if an event of an assets schedule was settled\\n     * @param assetId id of the asset\\n     * @param _event event (encoded)\\n     * @return true if event was settled\\n     */\\n    function isEventSettled(bytes32 assetId, bytes32 _event)\\n        external\\n        view\\n        override\\n        returns (bool, int256)\\n    {\\n        return (\\n            assets[assetId].settlement[_event].isSettled,\\n            assets[assetId].settlement[_event].payoff\\n        );\\n    }\\n\\n    /**\\n     * @notice Mark an event as settled\\n     * @dev Can only be set by authorized account.\\n     * @param assetId id of the asset\\n     * @param _event event (encoded) to be marked as settled\\n     */\\n    function markEventAsSettled(bytes32 assetId, bytes32 _event, int256 _payoff)\\n        external\\n        override\\n        isAuthorized (assetId)\\n    {\\n        assets[assetId].settlement[_event] = Settlement({ isSettled: true, payoff: _payoff });\\n    }\\n\\n    // function decodeEvent(bytes32 _event)\\n    //     internal\\n    //     pure\\n    //     returns (EventType, uint256)\\n    // {\\n    //     EventType eventType = EventType(uint8(uint256(_event >> 248)));\\n    //     uint256 scheduleTime = uint256(uint64(uint256(_event)));\\n\\n    //     return (eventType, scheduleTime);\\n    // }\\n}\\n\",\"keccak256\":\"0x459aaa4523e944db0c0adfa2359e849caa17709cc8c3070afc1b6afe48ba47aa\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/State/IStateRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\n\\n\\ninterface IStateRegistry {\\n\\n    function getEnumValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (uint8);\\n\\n    function getIntValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getUintValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xe8441c459ca07ab35627642da047ed2ad9753267cd5df84e5d53ca0a85c9306f\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/State/StateRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\n\\n/**\\n * @title StateRegistry\\n */\\nabstract contract StateRegistry {\\n\\n    event UpdatedState(bytes32 indexed assetId, uint256 statusDate);\\n    event UpdatedFinalizedState(bytes32 indexed assetId, uint256 statusDate);\\n\\n\\n    function getEnumValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (uint8);\\n\\n    function getIntValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (int256);\\n\\n    function getUintValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x5e5805d7d47e986938d2f568b8a1e39820e39c959bd11cb48cc1f05b7922a486\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Terms/ITermsRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\n\\n\\ninterface ITermsRegistry {\\n\\n    function getEnumValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (uint8);\\n\\n    function getAddressValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (address);\\n\\n    function getBytes32ValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (bytes32);\\n\\n    function getUIntValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getIntValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (int256);\\n\\n    function getPeriodValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (IP memory);\\n\\n    function getCycleValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (IPS memory);\\n\\n    function getContractReferenceValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        external\\n        view\\n        returns (ContractReference memory);\\n}\\n\",\"keccak256\":\"0xb6c776fdb37fbfb7768c84aaea8304ef30e6406ffd843c8476d986ce3b5417b6\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/AssetRegistry/Terms/TermsRegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../SharedTypes.sol\\\";\\n\\n\\nabstract contract TermsRegistry {\\n\\n    event UpdatedTerms(bytes32 indexed assetId);\\n\\n\\n    function getEnumValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (uint8);\\n\\n    function getAddressValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (address);\\n\\n    function getBytes32ValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (bytes32);\\n\\n    function getUIntValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function getIntValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (int256);\\n\\n    function getPeriodValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (IP memory);\\n\\n    function getCycleValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (IPS memory);\\n\\n    function getContractReferenceValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        virtual\\n        returns (ContractReference memory);\\n\\n    function getNextComputedEvent(bytes32 assetId)\\n        internal\\n        view\\n        virtual\\n        returns (bytes32, bool);\\n}\\n\",\"keccak256\":\"0x286b897b3527094d4a96ff1928449c80e842470f295f9f82dfbbd2a76a5d3b15\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/Conversions.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SharedTypes.sol\\\";\\n\\n\\ncontract Conversions {\\n\\n    function encodeCollateralAsObject(address collateralToken, uint256 collateralAmount)\\n        public\\n        pure\\n        returns (bytes32)\\n    {\\n        return bytes32(uint256(uint160(collateralToken))) << 96 | bytes32(uint256(uint96(collateralAmount)));\\n    }\\n\\n    function decodeCollateralObject(bytes32 object)\\n        public\\n        pure\\n        returns (address, uint256)\\n    {\\n        return (\\n            address(uint160(uint256(object >> 96))),\\n            uint256(uint96(uint256(object)))\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcc273a4272ffd03ef3f6fd329590a25049482661820ee4dcc953d28eeb4a9a95\",\"license\":\"Apache-2.0\"},\"contracts/Core/Base/SharedTypes.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../ACTUS/Core/ACTUSTypes.sol\\\";\\nimport \\\"../../ACTUS/Core/ACTUSConstants.sol\\\";\\n\\n\\nstruct AssetOwnership {\\n    // account which has to fulfill all obligations for the creator side\\n    address creatorObligor;\\n    // account to which all cashflows to which the creator is the beneficiary are forwarded\\n    address creatorBeneficiary;\\n    // account which has to fulfill all obligations for the counterparty\\n    address counterpartyObligor;\\n    // account to which all cashflows to which the counterparty is the beneficiary are forwarded\\n    address counterpartyBeneficiary;\\n}\\n\\n// scheduleTime and EventType are tightly packed and encoded as bytes32\\nstruct Schedule {\\n    // schedule times of cyclic events (used if no schedule is set)\\n    mapping(EventType => uint256) lastScheduleTimeOfCyclicEvent;\\n    // index of event => bytes32 encoded event\\n    mapping(uint256 => bytes32) events;\\n    // the length of the schedule, used to determine the end of the schedule\\n    uint256 length;\\n    // pointer to index of the next event in the schedule\\n    uint256 nextScheduleIndex;\\n    // last event which could not be settled\\n    bytes32 pendingEvent;\\n    // last non-cyclic event which was processed (used if no schedule is set)\\n    bytes32 lastNonCyclicEvent;\\n}\\n\",\"keccak256\":\"0xadbb252a62b8641f01338ce1650d5d59ccc4a6f3f0e62c49e7b16bf51d2a46b8\",\"license\":\"Apache-2.0\"},\"contracts/Core/COLLA/COLLAEncoder.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Base/SharedTypes.sol\\\";\\nimport \\\"../Base/AssetRegistry/BaseRegistryStorage.sol\\\";\\n\\n\\nlibrary COLLAEncoder {\\n\\n    function storeInPackedTerms(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedTerms[attributeKey] == value) return;\\n        asset.packedTerms[attributeKey] = value;\\n    }\\n\\n    function storeInPackedState(Asset storage asset, bytes32 attributeKey, bytes32 value) private {\\n        // skip if value did not change\\n        if (asset.packedState[attributeKey] == value) return;\\n        asset.packedState[attributeKey] = value;\\n    }\\n    \\n    /**\\n     * @dev Tightly pack and store only non-zero overwritten terms (LifecycleTerms)\\n     * @notice All non zero values of the overwrittenTerms object are stored.\\n     * It does not check if overwrittenAttributesMap actually marks attribute as overwritten.\\n     */\\n    function encodeAndSetCOLLATerms(Asset storage asset, COLLATerms memory terms) external {\\n        storeInPackedTerms(\\n            asset,\\n            \\\"enums\\\",\\n            bytes32(uint256(uint8(terms.contractType))) << 248 |\\n            bytes32(uint256(uint8(terms.calendar))) << 240 |\\n            bytes32(uint256(uint8(terms.contractRole))) << 232 |\\n            bytes32(uint256(uint8(terms.dayCountConvention))) << 224 |\\n            bytes32(uint256(uint8(terms.businessDayConvention))) << 216 |\\n            bytes32(uint256(uint8(terms.endOfMonthConvention))) << 208\\n        );\\n\\n        storeInPackedTerms(asset, \\\"marketObjectCodeOfCollateral\\\", bytes32(terms.marketObjectCodeOfCollateral));\\n\\n        storeInPackedTerms(asset, \\\"currency\\\", bytes32(uint256(terms.currency) << 96));\\n        storeInPackedTerms(asset, \\\"settlementCurrency\\\", bytes32(uint256(terms.settlementCurrency) << 96));\\n        storeInPackedTerms(asset, \\\"collateralCurrency\\\", bytes32(uint256(terms.collateralCurrency) << 96));\\n\\n        storeInPackedTerms(asset, \\\"statusDate\\\", bytes32(terms.statusDate));\\n        storeInPackedTerms(asset, \\\"initialExchangeDate\\\", bytes32(terms.initialExchangeDate));\\n        storeInPackedTerms(asset, \\\"maturityDate\\\", bytes32(terms.maturityDate));\\n        storeInPackedTerms(asset, \\\"capitalizationEndDate\\\", bytes32(terms.capitalizationEndDate));\\n        storeInPackedTerms(asset, \\\"cycleAnchorDateOfInterestPayment\\\", bytes32(terms.cycleAnchorDateOfInterestPayment));\\n\\n        storeInPackedTerms(asset, \\\"notionalPrincipal\\\", bytes32(terms.notionalPrincipal));\\n        storeInPackedTerms(asset, \\\"nominalInterestRate\\\", bytes32(terms.nominalInterestRate));\\n        storeInPackedTerms(asset, \\\"accruedInterest\\\", bytes32(terms.accruedInterest));\\n        storeInPackedTerms(asset, \\\"premiumDiscountAtIED\\\", bytes32(terms.premiumDiscountAtIED));\\n        storeInPackedTerms(asset, \\\"coverageOfCollateral\\\", bytes32(terms.coverageOfCollateral));\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"gracePeriod\\\",\\n            bytes32(uint256(terms.gracePeriod.i)) << 24 |\\n            bytes32(uint256(terms.gracePeriod.p)) << 16 |\\n            bytes32(uint256((terms.gracePeriod.isSet) ? 1 : 0)) << 8\\n        );\\n        storeInPackedTerms(\\n            asset,\\n            \\\"delinquencyPeriod\\\",\\n            bytes32(uint256(terms.delinquencyPeriod.i)) << 24 |\\n            bytes32(uint256(terms.delinquencyPeriod.p)) << 16 |\\n            bytes32(uint256((terms.delinquencyPeriod.isSet) ? 1 : 0)) << 8\\n        );\\n\\n        storeInPackedTerms(\\n            asset,\\n            \\\"cycleOfInterestPayment\\\",\\n            bytes32(uint256(terms.cycleOfInterestPayment.i)) << 24 |\\n            bytes32(uint256(terms.cycleOfInterestPayment.p)) << 16 |\\n            bytes32(uint256(terms.cycleOfInterestPayment.s)) << 8 |\\n            bytes32(uint256((terms.cycleOfInterestPayment.isSet) ? 1 : 0))\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and loads COLLATerms\\n     */\\n    function decodeAndGetCOLLATerms(Asset storage asset) external view returns (COLLATerms memory) {\\n        return COLLATerms(\\n            ContractType(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248))),\\n            Calendar(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240))),\\n            ContractRole(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232))),\\n            DayCountConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224))),\\n            BusinessDayConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216))),\\n            EndOfMonthConvention(uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208))),\\n\\n            asset.packedTerms[\\\"marketObjectCodeOfCollateral\\\"],\\n\\n            address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96)),\\n            address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96)),\\n            address(uint160(uint256(asset.packedTerms[\\\"collateralCurrency\\\"]) >> 96)),\\n\\n            uint256(asset.packedTerms[\\\"statusDate\\\"]),\\n            uint256(asset.packedTerms[\\\"initialExchangeDate\\\"]),\\n            uint256(asset.packedTerms[\\\"maturityDate\\\"]),\\n            uint256(asset.packedTerms[\\\"capitalizationEndDate\\\"]),\\n            uint256(asset.packedTerms[\\\"cycleAnchorDateOfInterestPayment\\\"]),\\n\\n            int256(asset.packedTerms[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedTerms[\\\"nominalInterestRate\\\"]),\\n            int256(asset.packedTerms[\\\"accruedInterest\\\"]),\\n            int256(asset.packedTerms[\\\"premiumDiscountAtIED\\\"]),\\n            int256(asset.packedTerms[\\\"coverageOfCollateral\\\"]),\\n            \\n            IP(\\n                uint256(asset.packedTerms[\\\"gracePeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"gracePeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"gracePeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n            IP(\\n                uint256(asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 16))),\\n                (asset.packedTerms[\\\"delinquencyPeriod\\\"] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            ),\\n\\n            IPS(\\n                uint256(asset.packedTerms[\\\"cycleOfInterestPayment\\\"] >> 24),\\n                P(uint8(uint256(asset.packedTerms[\\\"cycleOfInterestPayment\\\"] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[\\\"cycleOfInterestPayment\\\"] >> 8))),\\n                (asset.packedTerms[\\\"cycleOfInterestPayment\\\"] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            )\\n        );\\n    }\\n\\n    function decodeAndGetEnumValueForCOLLAAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractType\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"calendar\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 240));\\n        } else if (attributeKey == bytes32(\\\"contractRole\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 232));\\n        } else if (attributeKey == bytes32(\\\"dayCountConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 224));\\n        } else if (attributeKey == bytes32(\\\"businessDayConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 216));\\n        } else if (attributeKey == bytes32(\\\"endOfMonthConvention\\\")) {\\n            return uint8(uint256(asset.packedTerms[\\\"enums\\\"] >> 208));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetAddressValueForForCOLLAAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (address)\\n    {\\n        if (attributeKey == bytes32(\\\"currency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"currency\\\"]) >> 96));\\n        } else if (attributeKey == bytes32(\\\"settlementCurrency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"settlementCurrency\\\"]) >> 96));\\n        } else if (attributeKey == bytes32(\\\"collateralCurrency\\\")) {\\n            return address(uint160(uint256(asset.packedTerms[\\\"collateralCurrency\\\"]) >> 96));\\n        } else {\\n            return address(0);\\n        }   \\n    }\\n\\n    function decodeAndGetBytes32ValueForForCOLLAAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (bytes32)\\n    {\\n        return asset.packedTerms[attributeKey];\\n    }\\n\\n    function decodeAndGetUIntValueForForCOLLAAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForForCOLLAAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedTerms[attributeKey]);\\n    }\\n\\n    function decodeAndGetPeriodValueForForCOLLAAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IP memory)\\n    {\\n        if (\\n            attributeKey == bytes32(\\\"gracePeriod\\\")\\n            || attributeKey == bytes32(\\\"delinquencyPeriod\\\")\\n        ) {\\n            return IP(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                (asset.packedTerms[attributeKey] >> 8 & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IP(0, P(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetCycleValueForForCOLLAAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (IPS memory)\\n    {\\n        if (attributeKey == bytes32(\\\"cycleOfInterestPayment\\\")) {\\n            return IPS(\\n                uint256(asset.packedTerms[attributeKey] >> 24),\\n                P(uint8(uint256(asset.packedTerms[attributeKey] >> 16))),\\n                S(uint8(uint256(asset.packedTerms[attributeKey] >> 8))),\\n                (asset.packedTerms[attributeKey] & bytes32(uint256(1)) == bytes32(uint256(1))) ? true : false\\n            );\\n        } else {\\n            return IPS(0, P(0), S(0), false);\\n        }\\n    }\\n\\n    function decodeAndGetContractReferenceValueForCOLLAAttribute(Asset storage /* asset */, bytes32 /* attributeKey */)\\n        external\\n        pure\\n        returns (ContractReference memory)\\n    {\\n        return ContractReference(\\n            bytes32(0),\\n            bytes32(0),\\n            ContractReferenceType(0),\\n            ContractReferenceRole(0)\\n        );\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store COLLAState\\n     */\\n    function encodeAndSetCOLLAState(Asset storage asset, COLLAState memory state) external {\\n        storeInPackedState(asset, \\\"contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n    }\\n\\n    /**\\n     * @dev Tightly pack and store finalized COLLAState\\n     */\\n    function encodeAndSetFinalizedCOLLAState(Asset storage asset, COLLAState memory state) external {\\n        storeInPackedState(asset, \\\"F_contractPerformance\\\", bytes32(uint256(uint8(state.contractPerformance))) << 248);\\n        storeInPackedState(asset, \\\"F_statusDate\\\", bytes32(state.statusDate));\\n        storeInPackedState(asset, \\\"F_nonPerformingDate\\\", bytes32(state.nonPerformingDate));\\n        storeInPackedState(asset, \\\"F_maturityDate\\\", bytes32(state.maturityDate));\\n        storeInPackedState(asset, \\\"F_terminationDate\\\", bytes32(state.terminationDate));\\n        storeInPackedState(asset, \\\"F_notionalPrincipal\\\", bytes32(state.notionalPrincipal));\\n        storeInPackedState(asset, \\\"F_accruedInterest\\\", bytes32(state.accruedInterest));\\n        storeInPackedState(asset, \\\"F_nominalInterestRate\\\", bytes32(state.nominalInterestRate));\\n        storeInPackedState(asset, \\\"F_interestScalingMultiplier\\\", bytes32(state.interestScalingMultiplier));\\n        storeInPackedState(asset, \\\"F_notionalScalingMultiplier\\\", bytes32(state.notionalScalingMultiplier));\\n    }\\n\\n    /**\\n     * @dev Decode and load the COLLAState of the asset\\n     */\\n    function decodeAndGetCOLLAState(Asset storage asset)\\n        external\\n        view\\n        returns (COLLAState memory)\\n    {\\n        return COLLAState(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"statusDate\\\"]),\\n            uint256(asset.packedState[\\\"nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"terminationDate\\\"]),\\n\\n            int256(asset.packedState[\\\"notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"notionalScalingMultiplier\\\"])\\n        );\\n    }\\n\\n    /**\\n     * @dev Decode and load the finalized COLLAState of the asset\\n     */\\n    function decodeAndGetFinalizedCOLLAState(Asset storage asset)\\n        external\\n        view\\n        returns (COLLAState memory)\\n    {\\n        return COLLAState(\\n            ContractPerformance(uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248))),\\n            uint256(asset.packedState[\\\"F_statusDate\\\"]),\\n            uint256(asset.packedState[\\\"F_nonPerformingDate\\\"]),\\n            uint256(asset.packedState[\\\"F_maturityDate\\\"]),\\n            uint256(asset.packedState[\\\"F_terminationDate\\\"]),\\n\\n            int256(asset.packedState[\\\"F_notionalPrincipal\\\"]),\\n            int256(asset.packedState[\\\"F_accruedInterest\\\"]),\\n            int256(asset.packedState[\\\"F_nominalInterestRate\\\"]),\\n            int256(asset.packedState[\\\"F_interestScalingMultiplier\\\"]),\\n            int256(asset.packedState[\\\"F_notionalScalingMultiplier\\\"])\\n        );\\n    }\\n\\n    function decodeAndGetEnumValueForCOLLAStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint8)\\n    {\\n        if (attributeKey == bytes32(\\\"contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"contractPerformance\\\"] >> 248));\\n        } else if (attributeKey == bytes32(\\\"F_contractPerformance\\\")) {\\n            return uint8(uint256(asset.packedState[\\\"F_contractPerformance\\\"] >> 248));\\n        } else {\\n            return uint8(0);\\n        }\\n    }\\n\\n    function decodeAndGetUIntValueForCOLLAStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(asset.packedState[attributeKey]);\\n    }\\n\\n    function decodeAndGetIntValueForCOLLAStateAttribute(Asset storage asset, bytes32 attributeKey)\\n        external\\n        view\\n        returns (int256)\\n    {\\n        return int256(asset.packedState[attributeKey]);\\n    }\\n}\",\"keccak256\":\"0x3fd2c8d28c19e35103daa0f8632f179261d564be6847d88474041c8168775c0b\",\"license\":\"Apache-2.0\"},\"contracts/Core/COLLA/COLLARegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../../ACTUS/Engines/COLLA/ICOLLAEngine.sol\\\";\\n\\nimport \\\"../Base/SharedTypes.sol\\\";\\nimport \\\"../Base/AssetRegistry/BaseRegistry.sol\\\";\\nimport \\\"./COLLAEncoder.sol\\\";\\nimport \\\"./ICOLLARegistry.sol\\\";\\n\\n\\n/**\\n * @title COLLARegistry\\n * @notice Registry for ACTUS Protocol assets\\n */\\ncontract COLLARegistry is BaseRegistry, ICOLLARegistry {\\n\\n    using COLLAEncoder for Asset;\\n\\n    \\n    constructor() BaseRegistry() {}\\n\\n    /**\\n     * @notice\\n     * @param assetId id of the asset\\n     * @param terms asset specific terms (COLLATerms)\\n     * @param state initial state of the asset\\n     * @param schedule schedule of the asset\\n     * @param ownership ownership of the asset\\n     * @param engine ACTUS Engine of the asset\\n     * @param actor account which is allowed to update the asset state\\n     * @param admin account which as admin rights (optional)\\n     * @param extension address of the extension (optional)\\n     */\\n    function registerAsset(\\n        bytes32 assetId,\\n        COLLATerms calldata terms,\\n        COLLAState calldata state,\\n        bytes32[] calldata schedule,\\n        AssetOwnership calldata ownership,\\n        address engine,\\n        address actor,\\n        address admin,\\n        address extension\\n    )\\n        external\\n        override\\n        onlyApprovedActors\\n    {\\n        setAsset(assetId, schedule, ownership, engine, actor, admin, extension);\\n        assets[assetId].encodeAndSetCOLLATerms(terms);\\n        assets[assetId].encodeAndSetCOLLAState(state);\\n        assets[assetId].encodeAndSetFinalizedCOLLAState(state);\\n    }\\n\\n    /**\\n     * @notice Returns the terms of an asset.\\n     * @param assetId id of the asset\\n     * @return terms of the asset\\n     */\\n    function getTerms(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (COLLATerms memory)\\n    {\\n        return assets[assetId].decodeAndGetCOLLATerms();\\n    }\\n\\n    /**\\n     * @notice Set the terms of the asset\\n     * @dev Can only be set by authorized account.\\n     * @param assetId id of the asset\\n     * @param terms new terms\\n     */\\n    function setTerms(bytes32 assetId, COLLATerms calldata terms)\\n        external\\n        override\\n        isAuthorized (assetId)\\n    {\\n        assets[assetId].encodeAndSetCOLLATerms(terms);\\n        emit UpdatedTerms(assetId);\\n    }\\n\\n    function getEnumValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(ITermsRegistry, TermsRegistry)\\n        returns (uint8)\\n    {\\n        return assets[assetId].decodeAndGetEnumValueForCOLLAAttribute(attribute);\\n    }\\n\\n    function getAddressValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(ITermsRegistry, TermsRegistry)\\n        returns (address)\\n    {\\n        return assets[assetId].decodeAndGetAddressValueForForCOLLAAttribute(attribute);\\n    }\\n\\n    function getBytes32ValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(ITermsRegistry, TermsRegistry)\\n        returns (bytes32)\\n    {\\n        return assets[assetId].decodeAndGetBytes32ValueForForCOLLAAttribute(attribute);\\n    }\\n\\n    function getUIntValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(ITermsRegistry, TermsRegistry)\\n        returns (uint256)\\n    {\\n        return assets[assetId].decodeAndGetUIntValueForForCOLLAAttribute(attribute);\\n    }\\n\\n    function getIntValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(ITermsRegistry, TermsRegistry)\\n        returns (int256)\\n    {\\n        return assets[assetId].decodeAndGetIntValueForForCOLLAAttribute(attribute);\\n    }\\n\\n    function getPeriodValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(ITermsRegistry, TermsRegistry)\\n        returns (IP memory)\\n    {\\n        return assets[assetId].decodeAndGetPeriodValueForForCOLLAAttribute(attribute);\\n    }\\n\\n    function getCycleValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(ITermsRegistry, TermsRegistry)\\n        returns (IPS memory)\\n    {\\n        return assets[assetId].decodeAndGetCycleValueForForCOLLAAttribute(attribute);\\n    }\\n\\n    function getContractReferenceValueForTermsAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(ITermsRegistry, TermsRegistry)\\n        returns (ContractReference memory)\\n    {\\n        return assets[assetId].decodeAndGetContractReferenceValueForCOLLAAttribute(attribute);\\n    }\\n\\n    /**\\n     * @notice Returns the state of an asset.\\n     * @param assetId id of the asset\\n     * @return state of the asset\\n     */\\n    function getState(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (COLLAState memory)\\n    {\\n        return assets[assetId].decodeAndGetCOLLAState();\\n    }\\n\\n    /**\\n     * @notice Returns the state of an asset.\\n     * @param assetId id of the asset\\n     * @return state of the asset\\n     */\\n    function getFinalizedState(bytes32 assetId)\\n        external\\n        view\\n        override\\n        returns (COLLAState memory)\\n    {\\n        return assets[assetId].decodeAndGetFinalizedCOLLAState();\\n    }\\n\\n    /**\\n     * @notice Sets next state of an asset.\\n     * @dev Can only be updated by the assets actor or by an authorized account.\\n     * @param assetId id of the asset\\n     * @param state next state of the asset\\n     */\\n    function setState(bytes32 assetId, COLLAState calldata state)\\n        external\\n        override\\n        isAuthorized (assetId)\\n    {\\n        assets[assetId].encodeAndSetCOLLAState(state);\\n        emit UpdatedState(assetId, state.statusDate);\\n    }\\n\\n    /**\\n     * @notice Sets next finalized state of an asset.\\n     * @dev Can only be updated by the assets actor or by an authorized account.\\n     * @param assetId id of the asset\\n     * @param state next state of the asset\\n     */\\n    function setFinalizedState(bytes32 assetId, COLLAState calldata state)\\n        external\\n        override\\n        isAuthorized (assetId)\\n    {\\n        assets[assetId].encodeAndSetFinalizedCOLLAState(state);\\n        emit UpdatedFinalizedState(assetId, state.statusDate);\\n    }\\n\\n    function getEnumValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(IStateRegistry, StateRegistry)\\n        returns (uint8)\\n    {\\n        return assets[assetId].decodeAndGetEnumValueForCOLLAStateAttribute(attribute);\\n    }\\n\\n    function getIntValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(IStateRegistry, StateRegistry)\\n        returns (int256)\\n    {\\n        return assets[assetId].decodeAndGetIntValueForCOLLAStateAttribute(attribute);\\n    }\\n\\n    function getUintValueForStateAttribute(bytes32 assetId, bytes32 attribute)\\n        public\\n        view\\n        override(IStateRegistry, StateRegistry)\\n        returns (uint256)\\n    {\\n        return assets[assetId].decodeAndGetUIntValueForCOLLAStateAttribute(attribute);\\n    }\\n\\n    function getNextComputedEvent(bytes32 assetId)\\n        internal\\n        view\\n        override(TermsRegistry)\\n        returns (bytes32, bool)\\n    {\\n        Asset storage asset = assets[assetId];\\n        COLLATerms memory terms = asset.decodeAndGetCOLLATerms();\\n\\n        EventType nextEventType;\\n        uint256 nextScheduleTime;\\n        bool isCyclicEvent = true;\\n\\n        // IP\\n        {\\n            (EventType eventType, uint256 scheduleTime) = decodeEvent(ICOLLAEngine(asset.engine).computeNextCyclicEvent(\\n                terms,\\n                asset.schedule.lastScheduleTimeOfCyclicEvent[EventType.IP],\\n                EventType.IP\\n            ));\\n\\n            if (\\n                (nextScheduleTime == 0)\\n                || (scheduleTime < nextScheduleTime)\\n                || (nextScheduleTime == scheduleTime && getEpochOffset(eventType) < getEpochOffset(nextEventType))\\n            ) {\\n                nextScheduleTime = scheduleTime;\\n                nextEventType = eventType;\\n            }\\n        }\\n\\n        // IPCI\\n        {\\n            (EventType eventType, uint256 scheduleTime) = decodeEvent(ICOLLAEngine(asset.engine).computeNextCyclicEvent(\\n                terms,\\n                asset.schedule.lastScheduleTimeOfCyclicEvent[EventType.IPCI],\\n                EventType.IPCI\\n            ));\\n\\n            if (\\n                (nextScheduleTime == 0)\\n                || (scheduleTime != 0 && scheduleTime < nextScheduleTime)\\n                || (scheduleTime != 0 && nextScheduleTime == scheduleTime && getEpochOffset(eventType) < getEpochOffset(nextEventType))\\n            ) {\\n                nextScheduleTime = scheduleTime;\\n                nextEventType = eventType;\\n            }        \\n        }\\n\\n        // Non-Cyclic\\n        {\\n            (EventType eventType, uint256 scheduleTime) = decodeEvent(ICOLLAEngine(asset.engine).computeNextNonCyclicEvent(\\n                terms,\\n                asset.schedule.lastNonCyclicEvent\\n            ));\\n\\n            if (\\n                (nextScheduleTime == 0)\\n                || (scheduleTime != 0 && scheduleTime < nextScheduleTime)\\n                || (scheduleTime != 0 && nextScheduleTime == scheduleTime && getEpochOffset(eventType) < getEpochOffset(nextEventType))\\n            ) {\\n                nextScheduleTime = scheduleTime;\\n                nextEventType = eventType;\\n                isCyclicEvent = false;\\n            }        \\n        }\\n\\n        return (encodeEvent(nextEventType, nextScheduleTime), isCyclicEvent);\\n    }\\n}\\n\",\"keccak256\":\"0xdecce16bf59f9dd9c91c9e3b97e244c9f63e3a06e89289142856bdcea00f8276\",\"license\":\"Apache-2.0\"},\"contracts/Core/COLLA/ICOLLARegistry.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: Apache-2.0\\\"\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../Base/SharedTypes.sol\\\";\\nimport \\\"../Base/AssetRegistry/IAssetRegistry.sol\\\";\\n\\n\\ninterface ICOLLARegistry is IAssetRegistry {\\n\\n    function registerAsset(\\n        bytes32 assetId,\\n        COLLATerms calldata terms,\\n        COLLAState calldata state,\\n        bytes32[] calldata schedule,\\n        AssetOwnership calldata ownership,\\n        address engine,\\n        address actor,\\n        address admin,\\n        address extension\\n    )\\n        external;\\n    \\n    function getTerms(bytes32 assetId)\\n        external\\n        view\\n        returns (COLLATerms memory);\\n\\n    function setTerms(bytes32 assetId, COLLATerms calldata terms)\\n        external;\\n\\n    function getState(bytes32 assetId)\\n        external\\n        view\\n        returns (COLLAState memory);\\n\\n    function setState(bytes32 assetId, COLLAState calldata terms)\\n        external;\\n\\n    function getFinalizedState(bytes32 assetId)\\n        external\\n        view\\n        returns (COLLAState memory);\\n\\n    function setFinalizedState(bytes32 assetId, COLLAState calldata terms)\\n        external;\\n}\\n\",\"keccak256\":\"0xb9bb7e6b60a29e6c7063891042139900979e2b5196d9a05cc9d8f2b7480e7627\",\"license\":\"Apache-2.0\"},\"contracts/external/BokkyPooBah/BokkyPooBahsDateTimeLibrary.sol\":{\"content\":\"// \\\"SPDX-License-Identifier: MIT\\\"\\npragma solidity ^0.7.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary BokkyPooBahsDateTimeLibrary {\\n\\n    uint constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint constant SECONDS_PER_HOUR = 60 * 60;\\n    uint constant SECONDS_PER_MINUTE = 60;\\n    int constant OFFSET19700101 = 2440588;\\n\\n    uint constant DOW_MON = 1;\\n    uint constant DOW_TUE = 2;\\n    uint constant DOW_WED = 3;\\n    uint constant DOW_THU = 4;\\n    uint constant DOW_FRI = 5;\\n    uint constant DOW_SAT = 6;\\n    uint constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(uint year, uint month, uint day) internal pure returns (uint _days) {\\n        require(year >= 1970);\\n        int _year = int(year);\\n        int _month = int(month);\\n        int _day = int(day);\\n\\n        int __days = _day\\n          - 32075\\n          + 1461 * (_year + 4800 + (_month - 14) / 12) / 4\\n          + 367 * (_month - 2 - (_month - 14) / 12 * 12) / 12\\n          - 3 * ((_year + 4900 + (_month - 14) / 12) / 100) / 4\\n          - OFFSET19700101;\\n\\n        _days = uint(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint _days) internal pure returns (uint year, uint month, uint day) {\\n        int __days = int(_days);\\n\\n        int L = __days + 68569 + OFFSET19700101;\\n        int N = 4 * L / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int _year = 4000 * (L + 1) / 1461001;\\n        L = L - 1461 * _year / 4 + 31;\\n        int _month = 80 * L / 2447;\\n        int _day = L - 2447 * _month / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint(_year);\\n        month = uint(_month);\\n        day = uint(_day);\\n    }\\n\\n    function timestampFromDate(uint year, uint month, uint day) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n    function timestampFromDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (uint timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + hour * SECONDS_PER_HOUR + minute * SECONDS_PER_MINUTE + second;\\n    }\\n    function timestampToDate(uint timestamp) internal pure returns (uint year, uint month, uint day) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function timestampToDateTime(uint timestamp) internal pure returns (uint year, uint month, uint day, uint hour, uint minute, uint second) {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(uint year, uint month, uint day) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isValidDateTime(uint year, uint month, uint day, uint hour, uint minute, uint second) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n    function isLeapYear(uint timestamp) internal pure returns (bool leapYear) {\\n        (uint year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n    function _isLeapYear(uint year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n    function isWeekDay(uint timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n    function isWeekEnd(uint timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n    function getDaysInMonth(uint timestamp) internal pure returns (uint daysInMonth) {\\n        (uint year, uint month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n    function _getDaysInMonth(uint year, uint month) internal pure returns (uint daysInMonth) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint timestamp) internal pure returns (uint dayOfWeek) {\\n        uint _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = (_days + 3) % 7 + 1;\\n    }\\n\\n    function getYear(uint timestamp) internal pure returns (uint year) {\\n        (year,,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getMonth(uint timestamp) internal pure returns (uint month) {\\n        (,month,) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getDay(uint timestamp) internal pure returns (uint day) {\\n        (,,day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n    function getHour(uint timestamp) internal pure returns (uint hour) {\\n        uint secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n    function getMinute(uint timestamp) internal pure returns (uint minute) {\\n        uint secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n    function getSecond(uint timestamp) internal pure returns (uint second) {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year += _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = (month - 1) % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n    function addSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint timestamp, uint _years) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        year -= _years;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMonths(uint timestamp, uint _months) internal pure returns (uint newTimestamp) {\\n        (uint year, uint month, uint day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = yearMonth % 12 + 1;\\n        uint daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY + timestamp % SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subDays(uint timestamp, uint _days) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subHours(uint timestamp, uint _hours) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n    function subSeconds(uint timestamp, uint _seconds) internal pure returns (uint newTimestamp) {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _years) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear,,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear,,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n    function diffMonths(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _months) {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint fromYear, uint fromMonth,) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint toYear, uint toMonth,) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n    function diffDays(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _days) {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n    function diffMinutes(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _minutes) {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n    function diffSeconds(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _seconds) {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\",\"keccak256\":\"0x2b0c785d6fe1e5ae7239ac6833b6c014f865e1d12c4628dc9def5e0a901cc3eb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060006200001e6200006e565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000072565b3390565b6146d180620000826000396000f3fe608060405234801561001057600080fd5b50600436106103425760003560e01c8063a17b75b5116101b8578063cf5aed1211610104578063e8f7ca3e116100a2578063ee43eda11161007c578063ee43eda11461079d578063f2fde38b146107b0578063f52f84e1146107c3578063facbc581146107d657610342565b8063e8f7ca3e14610764578063eb01255914610777578063ecef55771461078a57610342565b8063de07a173116100de578063de07a1731461070b578063e05a66e01461071e578063e50e0ef714610731578063e7dc31881461075157610342565b8063cf5aed12146106c5578063d51dc3dc146106e5578063d981e773146106f857610342565b8063b828204111610171578063bd1f0a6c1161014b578063bd1f0a6c14610679578063c139626b1461068c578063c3b6e7c21461069f578063ccfc347e146106b257610342565b8063b828204114610625578063ba4d2d2814610638578063bc6a7d761461065957610342565b8063a17b75b5146105a6578063aaf645e0146105b9578063b02ca0c0146105cc578063b0b4888f146105df578063b3c45ebe146105ff578063b461dd4f1461061257610342565b80633adc277a116102925780636fe55baa1161023057806375e86ae41161020a57806375e86ae414610558578063811322fb1461056b57806388b580c61461057e5780638da5cb5b1461059157610342565b80636fe55baa1461050f578063715018a61461052f578063725400031461053757610342565b80636031a0941161026c5780636031a094146104b6578063606aa07e146104c95780636a899b9b146104dc5780636be39bda146104ef57610342565b80633adc277a14610470578063512872f4146104905780635709747d146104a357610342565b80631717e867116102ff57806328e0f8a9116102d957806328e0f8a9146104245780633549d08d1461043757806337462dba1461044a57806339262e871461045d57610342565b80631717e867146103de5780631b126815146103f157806327258b221461041157610342565b806303a81a2a1461034757806309648a9d1461035c5780630c5b75a4146103855780630d62037a146103a55780630d799b85146103b8578063135b9f4d146103cb575b600080fd5b61035a6103553660046133d5565b6107e9565b005b61036f61036a3660046133a5565b6108be565b60405161037c9190614456565b60405180910390f35b6103986103933660046133a5565b610964565b60405161037c9190613c89565b61035a6103b33660046133d5565b6109db565b61035a6103c63660046133d5565b610a80565b6103986103d9366004613404565b610b3e565b61035a6103ec366004613450565b610bdd565b6104046103ff366004613450565b610c93565b60405161037c9190613c6e565b61040461041f3660046133a5565b610d10565b6103986104323660046133a5565b610d25565b61035a6104453660046133d5565b610d3a565b61036f6104583660046133a5565b610e15565b61035a61046b366004613450565b610e62565b61048361047e3660046133a5565b610f07565b60405161037c9190613c2a565b61035a61049e3660046133d5565b610f21565b61035a6104b136600461349d565b610fe8565b61035a6104c43660046133d5565b6110f9565b6103986104d7366004613404565b6111d4565b6103986104ea366004613404565b61121a565b6105026104fd3660046133a5565b611260565b60405161037c91906144ce565b61052261051d366004613404565b6112fe565b60405161037c9190614575565b61035a61139d565b61054a6105453660046133a5565b611451565b60405161037c929190613d4e565b6103986105663660046133a5565b61147a565b6103986105793660046135e6565b61184e565b61035a61058c3660046134ee565b61185c565b610599611a4a565b60405161037c9190613bfc565b6103986105b43660046133a5565b611a59565b61035a6105c73660046134ca565b611a6e565b6103986105da366004613404565b611b6e565b6105f26105ed366004613404565b611b8f565b60405161037c9190614567565b61059961060d3660046133a5565b611c2e565b610398610620366004613404565b611c4d565b6103986106333660046133a5565b611c93565b61064b610646366004613404565b611cf7565b60405161037c929190613c79565b61066c610667366004613404565b611d21565b60405161037c9190614526565b61035a6106873660046133d5565b611dc0565b61059961069a3660046133a5565b611e58565b6103986106ad3660046133a5565b611e76565b6104046106c0366004613351565b611faf565b6106d86106d3366004613404565b611fc4565b60405161037c9190614583565b6103986106f3366004613404565b61205a565b61035a610706366004613404565b6120a0565b61035a610719366004613425565b61210f565b61039861072c366004613600565b6121ab565b61074461073f3660046133a5565b6121c9565b60405161037c91906141d9565b61035a61075f366004613351565b612227565b6104046107723660046133d5565b6122b5565b610599610785366004613404565b6122eb565b6106d8610798366004613404565b612381565b6105996107ab3660046133a5565b6123c7565b61035a6107be366004613351565b6123e7565b6103986107d13660046133a5565b6124f1565b61035a6107e436600461349d565b612506565b6000828152600160208190526040909120015482906001600160a01b03163314806108265750610826816000356001600160e01b03191633610c93565b61084b5760405162461bcd60e51b815260040161084290613e80565b60405180910390fd5b6000838152600160208190526040918290200180546001600160a01b038581166001600160a01b0319831617909255915191169084907f6baefd4565218ab73b43cb6b1019ca3a06161c4fcaef25cd665aacddabc44a20906108b09084908790613c10565b60405180910390a250505050565b6108c6612fcc565b60008281526001602052604090819020905163156caf9f60e21b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d6916355b2be7c9161090b9190600401613c89565b6101406040518083038186803b15801561092457600080fd5b505af4158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c91906136a7565b90505b919050565b60008181526001602081905260408220015482906001600160a01b03163314806109a057506109a0816000356001600160e01b03191633610c93565b6109bc5760405162461bcd60e51b815260040161084290613e80565b6000838152600160205260408120600701805491905591505b50919050565b6109f2826000356001600160e01b03191633610c93565b610a0e5760405162461bcd60e51b81526004016108429061411d565b6000828152600160205260409081902060090180546001600160a01b038481166001600160a01b031983161790925591519116907fa7f38588f02421aa73988ed359aee27363c896e7cc3b6e634e4357f7ee408e2590610a7390859084908690613c92565b60405180910390a1505050565b6000828152600160208190526040909120015482906001600160a01b0316331480610abd5750610abd816000356001600160e01b03191633610c93565b610ad95760405162461bcd60e51b815260040161084290613e80565b6000838152600160205260409081902060020180546001600160a01b038581166001600160a01b0319831617909255915191169084907fdaa92ae0693b6616f14ef5db4b7ee053d3234c0d03f7a1885589c6a6c2c75bdb906108b09084908790613c10565b6000828152600160205260408082209051635b2f935f60e01b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d691635b2f935f91610b8491908690600401614214565b60206040518083038186803b158015610b9c57600080fd5b505af4158015610bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd491906133bd565b90505b92915050565b610bf4836000356001600160e01b03191633610c93565b610c105760405162461bcd60e51b8152600401610842906140ce565b60008381526001602081815260408084206001600160e01b031987168552600d0182528084206001600160a01b038616808652925292839020805460ff1916909217909155905184907face25d271ad11ee299595b3021629bae0349e370d7c2eb7c2dced6e4edb4786590610c86908690613d39565b60405180910390a3505050565b60008381526001602090815260408083206001600160e01b031986168452600d0182528083206001600160a01b038516845290915281205460ff1680610d0657506000848152600160209081526040808320838052600d0182528083206001600160a01b038616845290915290205460ff165b90505b9392505050565b60009081526001602052604090205460ff1690565b60009081526001602052604090206006015490565b6000828152600160205260409020600c01546001600160a01b031680610d725760405162461bcd60e51b815260040161084290613d69565b336001600160a01b0382161480610d9b5750610d9b836000356001600160e01b03191633610c93565b610db75760405162461bcd60e51b815260040161084290613dc6565b60008381526001602052604090819020600c0180546001600160a01b0319166001600160a01b038516179055517f66808241563a07166fd47b523591fa432148706dc0ddd255d49b69e71f1721ce90610a7390859084908690613c92565b610e1d612fcc565b60008281526001602052604090819020905163628034c960e11b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d69163c50069929161090b9190600401613c89565b610e79836000356001600160e01b03191633610c93565b610e955760405162461bcd60e51b8152600401610842906140ce565b60008381526001602090815260408083206001600160e01b031986168452600d0182528083206001600160a01b038516808552925291829020805460ff19169055905184907f42b1b0e7392ad606bb4f5b003296aba62f16e43aa9372f1f40c1522fa2655ffa90610c86908690613d39565b600081815260016020526040902060609061095c9061260a565b6000828152600160208190526040909120015482906001600160a01b0316331480610f5e5750610f5e816000356001600160e01b03191633610c93565b610f7a5760405162461bcd60e51b815260040161084290613e80565b6000838152600160205260409081902080546001600160a01b03858116610100908102610100600160a81b03198416179093559251919004919091169084907fdaa92ae0693b6616f14ef5db4b7ee053d3234c0d03f7a1885589c6a6c2c75bdb906108b09084908790613c10565b6000828152600160208190526040909120015482906001600160a01b03163314806110255750611025816000356001600160e01b03191633610c93565b6110415760405162461bcd60e51b815260040161084290613e80565b600083815260016020526040908190209051633dd47ff560e11b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d691637ba8ffea9161108891908690600401614222565b60006040518083038186803b1580156110a057600080fd5b505af41580156110b4573d6000803e3d6000fd5b50505050827f0c71209d22d4c70a40140b94deee55f1f54a9353e3d5d5a4ddfb45fcddcf720f83602001356040516110ec9190613c89565b60405180910390a2505050565b6000828152600160205260409020600a01546001600160a01b0316806111315760405162461bcd60e51b815260040161084290614071565b336001600160a01b038216148061115a575061115a836000356001600160e01b03191633610c93565b6111765760405162461bcd60e51b815260040161084290613f6e565b60008381526001602052604090819020600a0180546001600160a01b0319166001600160a01b038516179055517f66808241563a07166fd47b523591fa432148706dc0ddd255d49b69e71f1721ce90610a7390859084908690613c92565b6000828152600160205260408082209051632bc4a27360e11b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d69163578944e691610b8491908690600401614214565b6000828152600160205260408082209051632862dda160e21b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d69163a18b768491610b8491908690600401614214565b611268613020565b60008281526001602052604090819020905163123aa77760e31b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d6916391d53bb8916112ad9190600401613c89565b6103c06040518083038186803b1580156112c657600080fd5b505af41580156112da573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190613738565b6113066130fe565b6000838152600160205260409081902090516321f0623f60e01b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d6916321f0623f9161134d91908690600401614214565b60606040518083038186803b15801561136557600080fd5b505af4158015611379573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd49190613921565b6113a56126a0565b6000546001600160a01b03908116911614611407576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000808060f884901c602181111561146557fe5b92505067ffffffffffffffff83169050915091565b6000611484613121565b6114a48372636f6e74726163745265666572656e63655f3160681b611d21565b8051909150158015906114c657506003816060015160048111156114c457fe5b145b156118455780516020820151604051631392c59160e11b81526001600160a01b038216906327258b22906114fe908590600401613c89565b60206040518083038186803b15801561151657600080fd5b505afa15801561152a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154e9190613389565b61156a5760405162461bcd60e51b815260040161084290614171565b6000611585866b65786572636973654461746560a01b6111d4565b905060006115ac877518dc99591a5d115d995b9d151e5c1950dbdd995c995960521b612381565b60ff1660058111156115ba57fe5b90506000836001600160a01b031663cf5aed12866040518263ffffffff1660e01b81526004016115ea9190613d14565b60206040518083038186803b15801561160257600080fd5b505afa158015611616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163a919061393c565b60ff16600581111561164857fe5b90506000846001600160a01b031663606aa07e876040518263ffffffff1660e01b81526004016116789190613cf1565b60206040518083038186803b15801561169057600080fd5b505afa1580156116a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c891906133bd565b905083156116e9576116db601a426121ab565b97505050505050505061095f565b60008360058111156116f757fe5b1415801561171a575082600581111561170c57fe5b82600581111561171857fe5b145b1561183e57600182600581111561172d57fe5b141561173e576116db6019826121ab565b600282600581111561174c57fe5b14156117f65761175a6130fe565b6040516337f2add560e11b81526001600160a01b03871690636fe55baa90611786908a90600401613cb1565b60606040518083038186803b15801561179e57600080fd5b505afa1580156117b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d69190613921565b90506117e7601961072c83856126a4565b9850505050505050505061095f565b600382600581111561180457fe5b141561183e576118126130fe565b6040516337f2add560e11b81526001600160a01b03871690636fe55baa90611786908a90600401613cce565b5050505050505b50600092915050565b600081602181111561095c57fe5b3360009081526002602052604090205460ff1661188b5760405162461bcd60e51b815260040161084290613f1a565b6118db8a8888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506118d29250505036899003890189613629565b878787876127bd565b60008a8152600160205260409081902090516315ab40bd60e21b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d6916356ad02f49161192291908d906004016142a5565b60006040518083038186803b15801561193a57600080fd5b505af415801561194e573d6000803e3d6000fd5b50505060008b8152600160205260409081902090516380f7fb1360e01b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d692506380f7fb1391611998918c90600401614222565b60006040518083038186803b1580156119b057600080fd5b505af41580156119c4573d6000803e3d6000fd5b50505060008b815260016020526040908190209051633dd47ff560e11b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d69250637ba8ffea91611a0e918c90600401614222565b60006040518083038186803b158015611a2657600080fd5b505af4158015611a3a573d6000803e3d6000fd5b5050505050505050505050505050565b6000546001600160a01b031690565b60009081526001602052604090206005015490565b6000828152600160208190526040909120015482906001600160a01b0316331480611aab5750611aab816000356001600160e01b03191633610c93565b611ac75760405162461bcd60e51b815260040161084290613e80565b6000838152600160205260409081902090516315ab40bd60e21b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d6916356ad02f491611b0e919086906004016142a5565b60006040518083038186803b158015611b2657600080fd5b505af4158015611b3a573d6000803e3d6000fd5b50506040518592507fb777acf68d226f3c8ab6f398cfb9a320e6fe8e92f5d2f0b4f69bc8ebab3b70cb9150600090a2505050565b60009182526001602090815260408084209284526004909201905290205490565b611b97613148565b600083815260016020526040908190209051635794b70560e01b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d691635794b70591611bde91908690600401614214565b60806040518083038186803b158015611bf657600080fd5b505af4158015611c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd49190613906565b600090815260016020819052604090912001546001600160a01b031690565b6000828152600160205260408082209051635a5577df60e01b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d691635a5577df91610b8491908690600401614214565b6000818152600160205260408120600581015415611ce357600581015460068201541415611cc557506000905061095f565b6006810154600090815260049091016020526040902054905061095f565b6000611cee84612930565b50949350505050565b6000918252600160208181526040808520938552601090930190529120805491015460ff90911691565b611d29613121565b60008381526001602052604090819020905163393ac15360e21b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d69163e4eb054c91611d7091908690600401614214565b60806040518083038186803b158015611d8857600080fd5b505af4158015611d9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd491906138a4565b611dd7826000356001600160e01b03191633610c93565b611df35760405162461bcd60e51b815260040161084290613e23565b60008281526001602052604090819020600b0180546001600160a01b038481166001600160a01b031983161790925591519116907fa7f38588f02421aa73988ed359aee27363c896e7cc3b6e634e4357f7ee408e2590610a7390859084908690613c92565b6000908152600160205260409020600201546001600160a01b031690565b60008181526001602081905260408220015482906001600160a01b0316331480611eb25750611eb2816000356001600160e01b03191633610c93565b611ece5760405162461bcd60e51b815260040161084290613e80565b6000838152600160205260409020600581015415611f285760068101546000818152600483016020526040902054600583015490911415611f155750600092506109d59050565b60069091018054600101905591506109d5565b600080611f3486612930565b909250905081611f4b5750600093506109d5915050565b600080611f5784611451565b909250905060018315151415611f9b5780600386016000846021811115611f7a57fe5b6021811115611f8557fe5b8152602081019190915260400160002055611fa3565b600885018490555b50919695505050505050565b60026020526000908152604090205460ff1681565b60008281526001602052604080822090516338099a3f60e21b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d69163e02668fc9161200a91908690600401614214565b60206040518083038186803b15801561202257600080fd5b505af4158015612036573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd4919061393c565b600082815260016020526040808220905163f97e351d60e01b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d69163f97e351d91610b8491908690600401614214565b6000828152600160208190526040909120015482906001600160a01b03163314806120dd57506120dd816000356001600160e01b03191633610c93565b6120f95760405162461bcd60e51b815260040161084290613e80565b5060009182526001602052604090912060070155565b6000838152600160208190526040909120015483906001600160a01b031633148061214c575061214c816000356001600160e01b03191633610c93565b6121685760405162461bcd60e51b815260040161084290613e80565b50604080518082018252600180825260208083019485526000968752818152838720958752601090950190945293209251835460ff191690151517835551910155565b60008160f88460218111156121bc57fe5b60ff16901b179392505050565b6121d1613169565b50600090815260016020908152604091829020825160808101845260098201546001600160a01b039081168252600a830154811693820193909352600b820154831693810193909352600c015416606082015290565b61222f6126a0565b6000546001600160a01b03908116911614612291576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b6000918252600160209081526040808420848052600d0182528084206001600160a01b0393909316845291905290205460ff1690565b6000828152600160205260408082209051630466d1bb60e51b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d691638cda37609161233191908690600401614214565b60206040518083038186803b15801561234957600080fd5b505af415801561235d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd4919061336d565b6000828152600160205260408082209051630ba9a95560e41b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d69163ba9a95509161200a91908690600401614214565b60009081526001602052604090205461010090046001600160a01b031690565b6123ef6126a0565b6000546001600160a01b03908116911614612451576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166124965760405162461bcd60e51b81526004018080602001828103825260268152602001806146556026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60009081526001602052604090206007015490565b6000828152600160208190526040909120015482906001600160a01b03163314806125435750612543816000356001600160e01b03191633610c93565b61255f5760405162461bcd60e51b815260040161084290613e80565b6000838152600160205260409081902090516380f7fb1360e01b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d6916380f7fb13916125a691908690600401614222565b60006040518083038186803b1580156125be57600080fd5b505af41580156125d2573d6000803e3d6000fd5b50505050827fad3970329ffaec63d947adc6077368479a4be7f09f2e7ba1b13852f8405b3ec683602001356040516110ec9190613c89565b606080826003016002015467ffffffffffffffff8111801561262b57600080fd5b50604051908082528060200260200182016040528015612655578160200160208202803683370190505b50905060005b6005840154811015612699576000818152600485016020526040902054825183908390811061268657fe5b602090810291909101015260010161265b565b5092915050565b3390565b60008080846020015160058111156126b857fe5b14156126d25783516126cb908490612c1a565b9050610bd4565b6001846020015160058111156126e457fe5b14156127025783516126cb906126fb906007612c2f565b8490612c1a565b60028460200151600581111561271457fe5b14156127275783516126cb908490612c88565b60038460200151600581111561273957fe5b14156127575783516126cb90612750906003612c2f565b8490612c88565b60048460200151600581111561276957fe5b14156127805783516126cb90612750906006612c2f565b60058460200151600581111561279257fe5b14156127a55783516126cb908490612d04565b60405162461bcd60e51b815260040161084290614014565b6000878152600160205260409020805460ff16156127ed5760405162461bcd60e51b815260040161084290613ecf565b6001600160a01b03841660009081526002602052604090205460ff16151560011461282a5760405162461bcd60e51b815260040161084290613fcb565b805486516009830180546001600160a01b03199081166001600160a01b03938416179091556020890151600a8501805483169184169190911790556040890151600b8501805483169184169190911790556060890151600c85018054831691841691909117905560ff199092166001908117610100600160a81b031916610100898416021784558301805483168783161790556002830180549092169084161790556128d68188612d2b565b6001600160a01b038316156128ef576128ef8884612d98565b7f5e73a3e4a3f69f1056f05ffd00ff11bf3835158ba0ebd5ad3b994065fcd896468860405161291e9190613c89565b60405180910390a15050505050505050565b60008181526001602052604081208190612948613020565b60405163123aa77760e31b8152735cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d6906391d53bb89061297f908590600401613c89565b6103c06040518083038186803b15801561299857600080fd5b505af41580156129ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d09190613738565b8254600a6000818152600386016020526040808220549051637d8b378160e01b81529495509093849360019385938493612a789361010090046001600160a01b031692637d8b378192612a28928c92906004016144fa565b60206040518083038186803b158015612a4057600080fd5b505afa158015612a54573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054591906133bd565b915091508360001480612a8a57508381105b80612aae57508084148015612aae5750612aa38561184e565b612aac8361184e565b105b15612aba578093508194505b50508454600b6000818152600388016020526040808220549051637d8b378160e01b815291938493612b0b936101009092046001600160a01b031692637d8b378192612a28928c92916004016144fa565b915091508360001480612b2757508015801590612b2757508381105b80612b5657508015801590612b3b57508084145b8015612b565750612b4b8561184e565b612b548361184e565b105b15612b62578093508194505b505084546008860154604051636ddec3d560e11b81526000928392612ba6926101009092046001600160a01b03169163dbbd87aa91612a28918b91906004016144dd565b915091508360001480612bc257508015801590612bc257508381105b80612bf157508015801590612bd657508084145b8015612bf15750612be68561184e565b612bef8361184e565b105b15612c0157809350819450600092505b5050612c0d83836121ab565b9650945050505050915091565b620151808102820182811015610bd757600080fd5b600082612c3e57506000610bd7565b82820282848281612c4b57fe5b0414610bd45760405162461bcd60e51b815260040180806020018281038252602181526020018061467b6021913960400191505060405180910390fd5b6000808080612c9c62015180875b04612e0f565b600c918801600019810183810494909401965094509250900660010191506000612cc68484612ea5565b905080821115612cd4578091505b62015180870662015180612ce9868686612f2b565b0201945086851015612cfa57600080fd5b5050505092915050565b6000808080612d166201518087612c96565b9187019450925090506000612cc68484612ea5565b60005b8151811015612d93576000801b828281518110612d4757fe5b60200260200101511415612d5a57612d93565b818181518110612d6657fe5b60209081029190910181015160008381526004860190925260409091205560010160058301819055612d2e565b505050565b6000828152600160208181526040808420848052600d0182528084206001600160a01b0386168086529252808420805460ff19169093179092559051909184917face25d271ad11ee299595b3021629bae0349e370d7c2eb7c2dced6e4edb4786591612e0391613d39565b60405180910390a35050565b60008080836226496581018262023ab1600483020590506004600362023ab18302010590910390600062164b09610fa0600185010205905060046105b58202058303601f019250600061098f8460500281612e6657fe5b0590506000605061098f83020585039050600b820560301994909401606402929092018301996002600c90940290910392909201975095509350505050565b60008160011480612eb65750816003145b80612ec15750816005145b80612ecc5750816007145b80612ed75750816008145b80612ee2575081600a145b80612eed575081600c145b15612efa5750601f610bd7565b81600214612f0a5750601e610bd7565b612f1383612fa7565b612f1e57601c612f21565b601d5b60ff169392505050565b60006107b2841015612f3c57600080fd5b838383600062253d8c600460036064611324600c600d19890105890101050205600c80600d19870105600c02600287030361016f0281612f7857fe5b0560046105b5600c600d1989010589016112c0010205617d4b8603010103039050809450505050509392505050565b600060048206158015612fbc57506064820615155b8061095c57505061019090061590565b60408051610140810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604080516102e08101909152806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000801916815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016130df6130fe565b81526020016130ec6130fe565b81526020016130f9613148565b905290565b6040805160608101909152600080825260208201905b8152600060209091015290565b604080516080810182526000808252602082018190529091820190815260200160006130f9565b60408051608081019091526000808252602082019081526020016000613114565b60408051608081018252600080825260208201819052918101829052606081019190915290565b803561095f816145d6565b805161095f816145d6565b803561095f816145f9565b805161095f816145f9565b803561095f81614606565b805161095f81614606565b803561095f81614613565b805161095f81614613565b803561095f8161462d565b805161095f8161462d565b803561095f8161463a565b805161095f8161463a565b803561095f81614647565b805161095f81614647565b80356022811061095f57600080fd5b6000608082840312156109d5578081fd5b600061014082840312156109d5578081fd5b60006103c082840312156109d5578081fd5b60006080828403121561327f578081fd5b6040516080810181811067ffffffffffffffff8211171561329c57fe5b80604052508091508251815260208301516132b681614613565b602082015260408301516132c981614606565b604082015260608301516132dc816145eb565b6060919091015292915050565b6000606082840312156132fa578081fd5b6040516060810181811067ffffffffffffffff8211171561331757fe5b806040525080915082518152602083015161333181614613565b60208201526040830151613344816145eb565b6040919091015292915050565b600060208284031215613362578081fd5b8135610bd4816145d6565b60006020828403121561337e578081fd5b8151610bd4816145d6565b60006020828403121561339a578081fd5b8151610bd4816145eb565b6000602082840312156133b6578081fd5b5035919050565b6000602082840312156133ce578081fd5b5051919050565b600080604083850312156133e7578081fd5b8235915060208301356133f9816145d6565b809150509250929050565b60008060408385031215613416578182fd5b50508035926020909101359150565b600080600060608486031215613439578081fd5b505081359360208301359350604090920135919050565b600080600060608486031215613464578081fd5b8335925060208401356001600160e01b031981168114613482578182fd5b91506040840135613492816145d6565b809150509250925092565b60008061016083850312156134b0578182fd5b823591506134c1846020850161324a565b90509250929050565b6000806103e083850312156134dd578182fd5b823591506134c1846020850161325c565b6000806000806000806000806000806106408b8d03121561350d578788fd5b8a35995061351e8c60208d0161325c565b985061352e8c6103e08d0161324a565b97506105208b013567ffffffffffffffff8082111561354b578788fd5b818d0191508d601f83011261355e578788fd5b81358181111561356c578889fd5b8e6020808302850101111561357f578889fd5b6020830199508098505050506135998c6105408d01613239565b94506135a86105c08c01613190565b93506135b76105e08c01613190565b92506135c66106008c01613190565b91506135d56106208c01613190565b90509295989b9194979a5092959850565b6000602082840312156135f7578081fd5b610bd48261322a565b60008060408385031215613612578182fd5b61361b8361322a565b946020939093013593505050565b60006080828403121561363a578081fd5b6040516080810181811067ffffffffffffffff8211171561365757fe5b6040528235613665816145d6565b81526020830135613675816145d6565b60208201526040830135613688816145d6565b6040820152606083013561369b816145d6565b60608201529392505050565b60006101408083850312156136ba578182fd5b6136c381614591565b90506136ce836131dd565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152508091505092915050565b60006103c0828403121561374a578081fd5b6102e061375681614591565b61375f84613209565b815261376d602085016131c7565b602082015261377e604085016131f3565b604082015261378f6060850161321f565b60608201526137a0608085016131b1565b60808201526137b160a085016131c7565b60a082015260c084015160c08201526137cc60e0850161319b565b60e08201526101006137df81860161319b565b908201526101206137f185820161319b565b908201526101408481015190820152610160808501519082015261018080850151908201526101a080850151908201526101c080850151908201526101e080850151908201526102008085015190820152610220808501519082015261024080850151908201526102608085015190820152610280613872868287016132e9565b90820152613882858584016132e9565b6102a082015261389685610340860161326e565b6102c0820152949350505050565b6000608082840312156138b5578081fd5b6040516080810181811067ffffffffffffffff821117156138d257fe5b8060405250825181526020830151602082015260408301516138f381614620565b6040820152606083015161369b81614620565b600060808284031215613917578081fd5b610bd4838361326e565b600060608284031215613932578081fd5b610bd483836132e9565b60006020828403121561394d578081fd5b815160ff81168114610bd4578182fd5b6001600160a01b03169052565b6009811061397457fe5b9052565b613974816145b5565b613974816145c2565b600d811061397457fe5b6014811061397457fe5b600b811061397457fe5b6022811061397457fe5b6139bd828251613994565b60208101516139cf6020840182613978565b5060408101516139e2604084018261398a565b5060608101516139f5606084018261399e565b506080810151613a08608084018261396a565b5060a0810151613a1b60a0840182613978565b5060c081015160c083015260e0810151613a3860e084018261395d565b5061010080820151613a4c8285018261395d565b505061012080820151613a618285018261395d565b50506101408181015190830152610160808201519083015261018080820151908301526101a080820151908301526101c080820151908301526101e08082015190830152610200808201519083015261022080820151908301526102408082015190830152610260808201519083015261028080820151613ae482850182613bd8565b50506102a0810151613afa6102e0840182613bd8565b506102c0810151612d93610340840182613b66565b803582526020810135613b2181614613565b613b2a816145c2565b60208301526040810135613b3d81614606565b613b46816145b5565b60408301526060810135613b59816145eb565b8015156060840152505050565b805182526020810151613b78816145c2565b60208301526040810151613b8b816145b5565b60408301526060908101511515910152565b803582526020810135613baf81614613565b613bb8816145c2565b60208301526040810135613bcb816145eb565b8015156040840152505050565b805182526020810151613bea816145c2565b60208301526040908101511515910152565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015613c6257835183529284019291840191600101613c46565b50909695505050505050565b901515815260200190565b9115158252602082015260400190565b90815260200190565b9283526001600160a01b03918216602084015216604082015260600190565b9081526a19dc9858d954195c9a5bd960aa1b602082015260400190565b9081527019195b1a5b9c5d595b98de54195c9a5bd9607a1b602082015260400190565b908152706e6f6e506572666f726d696e674461746560781b602082015260400190565b90815272636f6e7472616374506572666f726d616e636560681b602082015260400190565b6001600160e01b031991909116815260200190565b60408101613d5c82856139a8565b8260208301529392505050565b6020808252603e908201527f417373657452656769737472792e736574436f756e746572706172747942656e60408201527f65666963696172793a20454e5452595f444f45535f4e4f545f45584953540000606082015260800190565b6020808252603d908201527f417373657452656769737472792e736574436f756e746572706172747942656e60408201527f65666963696172793a20554e415554484f52495a45445f53454e444552000000606082015260800190565b60208082526039908201527f417373657452656769737472792e736574436f756e74657270617274794f626c60408201527f69676f723a20554e415554484f52495a45445f53454e44455200000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c2e6973417574686f72697a65643a20554e415560408201526e2a2427a924ad22a22fa9a2a72222a960891b606082015260800190565b6020808252602b908201527f4261736552656769737472792e73657441737365743a2041535345545f414c5260408201526a454144595f45584953545360a81b606082015260800190565b60208082526034908201527f4261736552656769737472792e6f6e6c79417070726f7665644163746f72733a604082015273102aa720aaaa2427a924ad22a22fa9a2a72222a960611b606082015260800190565b60208082526038908201527f417373657452656769737472792e73657443726561746f7242656e656669636960408201527f6172793a20554e415554484f52495a45445f53454e4445520000000000000000606082015260800190565b60208082526029908201527f4261736552656769737472792e73657441737365743a204143544f525f4e4f5460408201526817d054141493d5915160ba1b606082015260800190565b60208082526037908201527f506572696f645574696c732e67657454696d657374616d70506c75735065726960408201527f6f643a204154545249425554455f4e4f545f464f554e44000000000000000000606082015260800190565b60208082526039908201527f417373657452656769737472792e73657443726561746f7242656e656669636960408201527f6172793a20454e5452595f444f45535f4e4f545f455849535400000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c2e7265766f6b654163636573733a20554e415560408201526e2a2427a924ad22a22fa9a2a72222a960891b606082015260800190565b60208082526034908201527f417373657452656769737472792e73657443726561746f724f626c69676f723a604082015273102aa720aaaa2427a924ad22a22fa9a2a72222a960611b606082015260800190565b60208082526042908201527f41737365744163746f722e6765744e657874556e6465726c79696e674576656e60408201527f743a20554e4445524c59494e475f41535345545f444f45535f4e4f545f45584960608201526114d560f21b608082015260a00190565b81516001600160a01b039081168252602080840151821690830152604080840151821690830152606092830151169181019190915260800190565b918252602082015260400190565b828152610160810161423f6020830161423a856131d2565b613981565b602083013560408301526040830135606083015260608301356080830152608083013560a083015260a083013560c083015260c083013560e083015261010060e08401358184015261012081850135818501528085013561014085015250509392505050565b8281526103e081016142c2602083016142bd856131fe565b613994565b6142ce602084016131bc565b6142db6040840182613978565b506142e8604084016131e8565b6142f5606084018261398a565b5061430260608401613214565b61430f608084018261399e565b5061431c608084016131a6565b61432960a084018261396a565b5061433660a084016131bc565b61434360c0840182613978565b5060c083013560e083015261435a60e08401613190565b6101006143698185018361395d565b614374818601613190565b9150506101206143868185018361395d565b614391818601613190565b9150506101406143a38185018361395d565b610160915080850135828501525061018081850135818501526101a091508085013582850152506101c081850135818501526101e09150808501358285015250610200818501358185015261022091508085013582850152506102408185013581850152610260915080850135828501525061028081850135818501526144306102a08501828701613b9d565b505061444461030083016102e08501613b9d565b610d0961036083016103408501613b0f565b60006101408201905061446a828451613981565b6020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525092915050565b6103c08101610bd782846139b2565b6103e081016144ec82856139b2565b826103c08301529392505050565b610400810161450982866139b2565b836103c083015261451e6103e08301846139a8565b949350505050565b815181526020808301519082015260408201516080820190614547816145cc565b6040830152606083015161455a816145cc565b8060608401525092915050565b60808101610bd78284613b66565b60608101610bd78284613bd8565b60ff91909116815260200190565b60405181810167ffffffffffffffff811182821017156145ad57fe5b604052919050565b600281106145bf57fe5b50565b600681106145bf57fe5b600581106145bf57fe5b6001600160a01b03811681146145bf57600080fd5b80151581146145bf57600080fd5b600981106145bf57600080fd5b600281106145bf57600080fd5b600681106145bf57600080fd5b600581106145bf57600080fd5b600d81106145bf57600080fd5b601481106145bf57600080fd5b600b81106145bf57600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220765c332e08694ccf08945a53d1fd5d8dc4ee287350f9a09bab70816145b1e4bf64736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103425760003560e01c8063a17b75b5116101b8578063cf5aed1211610104578063e8f7ca3e116100a2578063ee43eda11161007c578063ee43eda11461079d578063f2fde38b146107b0578063f52f84e1146107c3578063facbc581146107d657610342565b8063e8f7ca3e14610764578063eb01255914610777578063ecef55771461078a57610342565b8063de07a173116100de578063de07a1731461070b578063e05a66e01461071e578063e50e0ef714610731578063e7dc31881461075157610342565b8063cf5aed12146106c5578063d51dc3dc146106e5578063d981e773146106f857610342565b8063b828204111610171578063bd1f0a6c1161014b578063bd1f0a6c14610679578063c139626b1461068c578063c3b6e7c21461069f578063ccfc347e146106b257610342565b8063b828204114610625578063ba4d2d2814610638578063bc6a7d761461065957610342565b8063a17b75b5146105a6578063aaf645e0146105b9578063b02ca0c0146105cc578063b0b4888f146105df578063b3c45ebe146105ff578063b461dd4f1461061257610342565b80633adc277a116102925780636fe55baa1161023057806375e86ae41161020a57806375e86ae414610558578063811322fb1461056b57806388b580c61461057e5780638da5cb5b1461059157610342565b80636fe55baa1461050f578063715018a61461052f578063725400031461053757610342565b80636031a0941161026c5780636031a094146104b6578063606aa07e146104c95780636a899b9b146104dc5780636be39bda146104ef57610342565b80633adc277a14610470578063512872f4146104905780635709747d146104a357610342565b80631717e867116102ff57806328e0f8a9116102d957806328e0f8a9146104245780633549d08d1461043757806337462dba1461044a57806339262e871461045d57610342565b80631717e867146103de5780631b126815146103f157806327258b221461041157610342565b806303a81a2a1461034757806309648a9d1461035c5780630c5b75a4146103855780630d62037a146103a55780630d799b85146103b8578063135b9f4d146103cb575b600080fd5b61035a6103553660046133d5565b6107e9565b005b61036f61036a3660046133a5565b6108be565b60405161037c9190614456565b60405180910390f35b6103986103933660046133a5565b610964565b60405161037c9190613c89565b61035a6103b33660046133d5565b6109db565b61035a6103c63660046133d5565b610a80565b6103986103d9366004613404565b610b3e565b61035a6103ec366004613450565b610bdd565b6104046103ff366004613450565b610c93565b60405161037c9190613c6e565b61040461041f3660046133a5565b610d10565b6103986104323660046133a5565b610d25565b61035a6104453660046133d5565b610d3a565b61036f6104583660046133a5565b610e15565b61035a61046b366004613450565b610e62565b61048361047e3660046133a5565b610f07565b60405161037c9190613c2a565b61035a61049e3660046133d5565b610f21565b61035a6104b136600461349d565b610fe8565b61035a6104c43660046133d5565b6110f9565b6103986104d7366004613404565b6111d4565b6103986104ea366004613404565b61121a565b6105026104fd3660046133a5565b611260565b60405161037c91906144ce565b61052261051d366004613404565b6112fe565b60405161037c9190614575565b61035a61139d565b61054a6105453660046133a5565b611451565b60405161037c929190613d4e565b6103986105663660046133a5565b61147a565b6103986105793660046135e6565b61184e565b61035a61058c3660046134ee565b61185c565b610599611a4a565b60405161037c9190613bfc565b6103986105b43660046133a5565b611a59565b61035a6105c73660046134ca565b611a6e565b6103986105da366004613404565b611b6e565b6105f26105ed366004613404565b611b8f565b60405161037c9190614567565b61059961060d3660046133a5565b611c2e565b610398610620366004613404565b611c4d565b6103986106333660046133a5565b611c93565b61064b610646366004613404565b611cf7565b60405161037c929190613c79565b61066c610667366004613404565b611d21565b60405161037c9190614526565b61035a6106873660046133d5565b611dc0565b61059961069a3660046133a5565b611e58565b6103986106ad3660046133a5565b611e76565b6104046106c0366004613351565b611faf565b6106d86106d3366004613404565b611fc4565b60405161037c9190614583565b6103986106f3366004613404565b61205a565b61035a610706366004613404565b6120a0565b61035a610719366004613425565b61210f565b61039861072c366004613600565b6121ab565b61074461073f3660046133a5565b6121c9565b60405161037c91906141d9565b61035a61075f366004613351565b612227565b6104046107723660046133d5565b6122b5565b610599610785366004613404565b6122eb565b6106d8610798366004613404565b612381565b6105996107ab3660046133a5565b6123c7565b61035a6107be366004613351565b6123e7565b6103986107d13660046133a5565b6124f1565b61035a6107e436600461349d565b612506565b6000828152600160208190526040909120015482906001600160a01b03163314806108265750610826816000356001600160e01b03191633610c93565b61084b5760405162461bcd60e51b815260040161084290613e80565b60405180910390fd5b6000838152600160208190526040918290200180546001600160a01b038581166001600160a01b0319831617909255915191169084907f6baefd4565218ab73b43cb6b1019ca3a06161c4fcaef25cd665aacddabc44a20906108b09084908790613c10565b60405180910390a250505050565b6108c6612fcc565b60008281526001602052604090819020905163156caf9f60e21b815273__$1ea5e609163a604a8a5465565e09c5b038$__916355b2be7c9161090b9190600401613c89565b6101406040518083038186803b15801561092457600080fd5b505af4158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c91906136a7565b90505b919050565b60008181526001602081905260408220015482906001600160a01b03163314806109a057506109a0816000356001600160e01b03191633610c93565b6109bc5760405162461bcd60e51b815260040161084290613e80565b6000838152600160205260408120600701805491905591505b50919050565b6109f2826000356001600160e01b03191633610c93565b610a0e5760405162461bcd60e51b81526004016108429061411d565b6000828152600160205260409081902060090180546001600160a01b038481166001600160a01b031983161790925591519116907fa7f38588f02421aa73988ed359aee27363c896e7cc3b6e634e4357f7ee408e2590610a7390859084908690613c92565b60405180910390a1505050565b6000828152600160208190526040909120015482906001600160a01b0316331480610abd5750610abd816000356001600160e01b03191633610c93565b610ad95760405162461bcd60e51b815260040161084290613e80565b6000838152600160205260409081902060020180546001600160a01b038581166001600160a01b0319831617909255915191169084907fdaa92ae0693b6616f14ef5db4b7ee053d3234c0d03f7a1885589c6a6c2c75bdb906108b09084908790613c10565b6000828152600160205260408082209051635b2f935f60e01b815273__$1ea5e609163a604a8a5465565e09c5b038$__91635b2f935f91610b8491908690600401614214565b60206040518083038186803b158015610b9c57600080fd5b505af4158015610bb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd491906133bd565b90505b92915050565b610bf4836000356001600160e01b03191633610c93565b610c105760405162461bcd60e51b8152600401610842906140ce565b60008381526001602081815260408084206001600160e01b031987168552600d0182528084206001600160a01b038616808652925292839020805460ff1916909217909155905184907face25d271ad11ee299595b3021629bae0349e370d7c2eb7c2dced6e4edb4786590610c86908690613d39565b60405180910390a3505050565b60008381526001602090815260408083206001600160e01b031986168452600d0182528083206001600160a01b038516845290915281205460ff1680610d0657506000848152600160209081526040808320838052600d0182528083206001600160a01b038616845290915290205460ff165b90505b9392505050565b60009081526001602052604090205460ff1690565b60009081526001602052604090206006015490565b6000828152600160205260409020600c01546001600160a01b031680610d725760405162461bcd60e51b815260040161084290613d69565b336001600160a01b0382161480610d9b5750610d9b836000356001600160e01b03191633610c93565b610db75760405162461bcd60e51b815260040161084290613dc6565b60008381526001602052604090819020600c0180546001600160a01b0319166001600160a01b038516179055517f66808241563a07166fd47b523591fa432148706dc0ddd255d49b69e71f1721ce90610a7390859084908690613c92565b610e1d612fcc565b60008281526001602052604090819020905163628034c960e11b815273__$1ea5e609163a604a8a5465565e09c5b038$__9163c50069929161090b9190600401613c89565b610e79836000356001600160e01b03191633610c93565b610e955760405162461bcd60e51b8152600401610842906140ce565b60008381526001602090815260408083206001600160e01b031986168452600d0182528083206001600160a01b038516808552925291829020805460ff19169055905184907f42b1b0e7392ad606bb4f5b003296aba62f16e43aa9372f1f40c1522fa2655ffa90610c86908690613d39565b600081815260016020526040902060609061095c9061260a565b6000828152600160208190526040909120015482906001600160a01b0316331480610f5e5750610f5e816000356001600160e01b03191633610c93565b610f7a5760405162461bcd60e51b815260040161084290613e80565b6000838152600160205260409081902080546001600160a01b03858116610100908102610100600160a81b03198416179093559251919004919091169084907fdaa92ae0693b6616f14ef5db4b7ee053d3234c0d03f7a1885589c6a6c2c75bdb906108b09084908790613c10565b6000828152600160208190526040909120015482906001600160a01b03163314806110255750611025816000356001600160e01b03191633610c93565b6110415760405162461bcd60e51b815260040161084290613e80565b600083815260016020526040908190209051633dd47ff560e11b815273__$1ea5e609163a604a8a5465565e09c5b038$__91637ba8ffea9161108891908690600401614222565b60006040518083038186803b1580156110a057600080fd5b505af41580156110b4573d6000803e3d6000fd5b50505050827f0c71209d22d4c70a40140b94deee55f1f54a9353e3d5d5a4ddfb45fcddcf720f83602001356040516110ec9190613c89565b60405180910390a2505050565b6000828152600160205260409020600a01546001600160a01b0316806111315760405162461bcd60e51b815260040161084290614071565b336001600160a01b038216148061115a575061115a836000356001600160e01b03191633610c93565b6111765760405162461bcd60e51b815260040161084290613f6e565b60008381526001602052604090819020600a0180546001600160a01b0319166001600160a01b038516179055517f66808241563a07166fd47b523591fa432148706dc0ddd255d49b69e71f1721ce90610a7390859084908690613c92565b6000828152600160205260408082209051632bc4a27360e11b815273__$1ea5e609163a604a8a5465565e09c5b038$__9163578944e691610b8491908690600401614214565b6000828152600160205260408082209051632862dda160e21b815273__$1ea5e609163a604a8a5465565e09c5b038$__9163a18b768491610b8491908690600401614214565b611268613020565b60008281526001602052604090819020905163123aa77760e31b815273__$1ea5e609163a604a8a5465565e09c5b038$__916391d53bb8916112ad9190600401613c89565b6103c06040518083038186803b1580156112c657600080fd5b505af41580156112da573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190613738565b6113066130fe565b6000838152600160205260409081902090516321f0623f60e01b815273__$1ea5e609163a604a8a5465565e09c5b038$__916321f0623f9161134d91908690600401614214565b60606040518083038186803b15801561136557600080fd5b505af4158015611379573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd49190613921565b6113a56126a0565b6000546001600160a01b03908116911614611407576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000808060f884901c602181111561146557fe5b92505067ffffffffffffffff83169050915091565b6000611484613121565b6114a48372636f6e74726163745265666572656e63655f3160681b611d21565b8051909150158015906114c657506003816060015160048111156114c457fe5b145b156118455780516020820151604051631392c59160e11b81526001600160a01b038216906327258b22906114fe908590600401613c89565b60206040518083038186803b15801561151657600080fd5b505afa15801561152a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154e9190613389565b61156a5760405162461bcd60e51b815260040161084290614171565b6000611585866b65786572636973654461746560a01b6111d4565b905060006115ac877518dc99591a5d115d995b9d151e5c1950dbdd995c995960521b612381565b60ff1660058111156115ba57fe5b90506000836001600160a01b031663cf5aed12866040518263ffffffff1660e01b81526004016115ea9190613d14565b60206040518083038186803b15801561160257600080fd5b505afa158015611616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163a919061393c565b60ff16600581111561164857fe5b90506000846001600160a01b031663606aa07e876040518263ffffffff1660e01b81526004016116789190613cf1565b60206040518083038186803b15801561169057600080fd5b505afa1580156116a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c891906133bd565b905083156116e9576116db601a426121ab565b97505050505050505061095f565b60008360058111156116f757fe5b1415801561171a575082600581111561170c57fe5b82600581111561171857fe5b145b1561183e57600182600581111561172d57fe5b141561173e576116db6019826121ab565b600282600581111561174c57fe5b14156117f65761175a6130fe565b6040516337f2add560e11b81526001600160a01b03871690636fe55baa90611786908a90600401613cb1565b60606040518083038186803b15801561179e57600080fd5b505afa1580156117b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d69190613921565b90506117e7601961072c83856126a4565b9850505050505050505061095f565b600382600581111561180457fe5b141561183e576118126130fe565b6040516337f2add560e11b81526001600160a01b03871690636fe55baa90611786908a90600401613cce565b5050505050505b50600092915050565b600081602181111561095c57fe5b3360009081526002602052604090205460ff1661188b5760405162461bcd60e51b815260040161084290613f1a565b6118db8a8888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506118d29250505036899003890189613629565b878787876127bd565b60008a8152600160205260409081902090516315ab40bd60e21b815273__$1ea5e609163a604a8a5465565e09c5b038$__916356ad02f49161192291908d906004016142a5565b60006040518083038186803b15801561193a57600080fd5b505af415801561194e573d6000803e3d6000fd5b50505060008b8152600160205260409081902090516380f7fb1360e01b815273__$1ea5e609163a604a8a5465565e09c5b038$__92506380f7fb1391611998918c90600401614222565b60006040518083038186803b1580156119b057600080fd5b505af41580156119c4573d6000803e3d6000fd5b50505060008b815260016020526040908190209051633dd47ff560e11b815273__$1ea5e609163a604a8a5465565e09c5b038$__9250637ba8ffea91611a0e918c90600401614222565b60006040518083038186803b158015611a2657600080fd5b505af4158015611a3a573d6000803e3d6000fd5b5050505050505050505050505050565b6000546001600160a01b031690565b60009081526001602052604090206005015490565b6000828152600160208190526040909120015482906001600160a01b0316331480611aab5750611aab816000356001600160e01b03191633610c93565b611ac75760405162461bcd60e51b815260040161084290613e80565b6000838152600160205260409081902090516315ab40bd60e21b815273__$1ea5e609163a604a8a5465565e09c5b038$__916356ad02f491611b0e919086906004016142a5565b60006040518083038186803b158015611b2657600080fd5b505af4158015611b3a573d6000803e3d6000fd5b50506040518592507fb777acf68d226f3c8ab6f398cfb9a320e6fe8e92f5d2f0b4f69bc8ebab3b70cb9150600090a2505050565b60009182526001602090815260408084209284526004909201905290205490565b611b97613148565b600083815260016020526040908190209051635794b70560e01b815273__$1ea5e609163a604a8a5465565e09c5b038$__91635794b70591611bde91908690600401614214565b60806040518083038186803b158015611bf657600080fd5b505af4158015611c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd49190613906565b600090815260016020819052604090912001546001600160a01b031690565b6000828152600160205260408082209051635a5577df60e01b815273__$1ea5e609163a604a8a5465565e09c5b038$__91635a5577df91610b8491908690600401614214565b6000818152600160205260408120600581015415611ce357600581015460068201541415611cc557506000905061095f565b6006810154600090815260049091016020526040902054905061095f565b6000611cee84612930565b50949350505050565b6000918252600160208181526040808520938552601090930190529120805491015460ff90911691565b611d29613121565b60008381526001602052604090819020905163393ac15360e21b815273__$1ea5e609163a604a8a5465565e09c5b038$__9163e4eb054c91611d7091908690600401614214565b60806040518083038186803b158015611d8857600080fd5b505af4158015611d9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd491906138a4565b611dd7826000356001600160e01b03191633610c93565b611df35760405162461bcd60e51b815260040161084290613e23565b60008281526001602052604090819020600b0180546001600160a01b038481166001600160a01b031983161790925591519116907fa7f38588f02421aa73988ed359aee27363c896e7cc3b6e634e4357f7ee408e2590610a7390859084908690613c92565b6000908152600160205260409020600201546001600160a01b031690565b60008181526001602081905260408220015482906001600160a01b0316331480611eb25750611eb2816000356001600160e01b03191633610c93565b611ece5760405162461bcd60e51b815260040161084290613e80565b6000838152600160205260409020600581015415611f285760068101546000818152600483016020526040902054600583015490911415611f155750600092506109d59050565b60069091018054600101905591506109d5565b600080611f3486612930565b909250905081611f4b5750600093506109d5915050565b600080611f5784611451565b909250905060018315151415611f9b5780600386016000846021811115611f7a57fe5b6021811115611f8557fe5b8152602081019190915260400160002055611fa3565b600885018490555b50919695505050505050565b60026020526000908152604090205460ff1681565b60008281526001602052604080822090516338099a3f60e21b815273__$1ea5e609163a604a8a5465565e09c5b038$__9163e02668fc9161200a91908690600401614214565b60206040518083038186803b15801561202257600080fd5b505af4158015612036573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd4919061393c565b600082815260016020526040808220905163f97e351d60e01b815273__$1ea5e609163a604a8a5465565e09c5b038$__9163f97e351d91610b8491908690600401614214565b6000828152600160208190526040909120015482906001600160a01b03163314806120dd57506120dd816000356001600160e01b03191633610c93565b6120f95760405162461bcd60e51b815260040161084290613e80565b5060009182526001602052604090912060070155565b6000838152600160208190526040909120015483906001600160a01b031633148061214c575061214c816000356001600160e01b03191633610c93565b6121685760405162461bcd60e51b815260040161084290613e80565b50604080518082018252600180825260208083019485526000968752818152838720958752601090950190945293209251835460ff191690151517835551910155565b60008160f88460218111156121bc57fe5b60ff16901b179392505050565b6121d1613169565b50600090815260016020908152604091829020825160808101845260098201546001600160a01b039081168252600a830154811693820193909352600b820154831693810193909352600c015416606082015290565b61222f6126a0565b6000546001600160a01b03908116911614612291576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b6000918252600160209081526040808420848052600d0182528084206001600160a01b0393909316845291905290205460ff1690565b6000828152600160205260408082209051630466d1bb60e51b815273__$1ea5e609163a604a8a5465565e09c5b038$__91638cda37609161233191908690600401614214565b60206040518083038186803b15801561234957600080fd5b505af415801561235d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd4919061336d565b6000828152600160205260408082209051630ba9a95560e41b815273__$1ea5e609163a604a8a5465565e09c5b038$__9163ba9a95509161200a91908690600401614214565b60009081526001602052604090205461010090046001600160a01b031690565b6123ef6126a0565b6000546001600160a01b03908116911614612451576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166124965760405162461bcd60e51b81526004018080602001828103825260268152602001806146556026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60009081526001602052604090206007015490565b6000828152600160208190526040909120015482906001600160a01b03163314806125435750612543816000356001600160e01b03191633610c93565b61255f5760405162461bcd60e51b815260040161084290613e80565b6000838152600160205260409081902090516380f7fb1360e01b815273__$1ea5e609163a604a8a5465565e09c5b038$__916380f7fb13916125a691908690600401614222565b60006040518083038186803b1580156125be57600080fd5b505af41580156125d2573d6000803e3d6000fd5b50505050827fad3970329ffaec63d947adc6077368479a4be7f09f2e7ba1b13852f8405b3ec683602001356040516110ec9190613c89565b606080826003016002015467ffffffffffffffff8111801561262b57600080fd5b50604051908082528060200260200182016040528015612655578160200160208202803683370190505b50905060005b6005840154811015612699576000818152600485016020526040902054825183908390811061268657fe5b602090810291909101015260010161265b565b5092915050565b3390565b60008080846020015160058111156126b857fe5b14156126d25783516126cb908490612c1a565b9050610bd4565b6001846020015160058111156126e457fe5b14156127025783516126cb906126fb906007612c2f565b8490612c1a565b60028460200151600581111561271457fe5b14156127275783516126cb908490612c88565b60038460200151600581111561273957fe5b14156127575783516126cb90612750906003612c2f565b8490612c88565b60048460200151600581111561276957fe5b14156127805783516126cb90612750906006612c2f565b60058460200151600581111561279257fe5b14156127a55783516126cb908490612d04565b60405162461bcd60e51b815260040161084290614014565b6000878152600160205260409020805460ff16156127ed5760405162461bcd60e51b815260040161084290613ecf565b6001600160a01b03841660009081526002602052604090205460ff16151560011461282a5760405162461bcd60e51b815260040161084290613fcb565b805486516009830180546001600160a01b03199081166001600160a01b03938416179091556020890151600a8501805483169184169190911790556040890151600b8501805483169184169190911790556060890151600c85018054831691841691909117905560ff199092166001908117610100600160a81b031916610100898416021784558301805483168783161790556002830180549092169084161790556128d68188612d2b565b6001600160a01b038316156128ef576128ef8884612d98565b7f5e73a3e4a3f69f1056f05ffd00ff11bf3835158ba0ebd5ad3b994065fcd896468860405161291e9190613c89565b60405180910390a15050505050505050565b60008181526001602052604081208190612948613020565b60405163123aa77760e31b815273__$1ea5e609163a604a8a5465565e09c5b038$",
  "libraries": {
    "COLLAEncoder": "0x5cC63Dc7211bDf9A2dBBFdE9244D93F17260E6d6"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approveActor(address)": {
        "details": "Can only be called by the owner of the contract.",
        "params": {
          "actor": "address of the actor"
        }
      },
      "getActor(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "address of the asset actor"
        }
      },
      "getEngine(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "address of the engine of the asset"
        }
      },
      "getEventAtIndex(bytes32,uint256)": {
        "params": {
          "assetId": "id of the asset",
          "index": "index of the event to return"
        },
        "returns": {
          "_0": "Event"
        }
      },
      "getExtension(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "address of the asset actor"
        }
      },
      "getFinalizedState(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "state of the asset"
        }
      },
      "getNextScheduleIndex(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "Index"
        }
      },
      "getNextScheduledEvent(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "event"
        }
      },
      "getOwnership(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "addresses of all owners of the asset"
        }
      },
      "getSchedule(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "the schedule"
        }
      },
      "getScheduleLength(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "Length of the schedule"
        }
      },
      "getState(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "state of the asset"
        }
      },
      "getTerms(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "terms of the asset"
        }
      },
      "grantAccess(bytes32,bytes4,address)": {
        "details": "Can only be called by an authorized account.",
        "params": {
          "account": "address of the account to grant access to",
          "assetId": "id of the asset",
          "methodSignature": "function / method signature (4 byte keccak256 hash of the method selector)"
        }
      },
      "hasAccess(bytes32,bytes4,address)": {
        "params": {
          "account": "address of the account for which to check access",
          "assetId": "id of the asset",
          "methodSignature": "function / method signature (4 byte keccak256 hash of the method selector)"
        },
        "returns": {
          "_0": "true if allowed access"
        }
      },
      "hasRootAccess(bytes32,address)": {
        "params": {
          "account": "address of the account for which to check root acccess",
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "true if has root access"
        }
      },
      "isEventSettled(bytes32,bytes32)": {
        "params": {
          "_event": "event (encoded)",
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "true if event was settled"
        }
      },
      "isRegistered(bytes32)": {
        "params": {
          "assetId": "id of the asset"
        },
        "returns": {
          "_0": "true if asset exist"
        }
      },
      "markEventAsSettled(bytes32,bytes32,int256)": {
        "details": "Can only be set by authorized account.",
        "params": {
          "_event": "event (encoded) to be marked as settled",
          "assetId": "id of the asset"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "popNextScheduledEvent(bytes32)": {
        "details": "Can only be updated by the assets actor or by an authorized account.",
        "params": {
          "assetId": "id of the asset"
        }
      },
      "registerAsset(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256),bytes32[],(address,address,address,address),address,address,address,address)": {
        "params": {
          "actor": "account which is allowed to update the asset state",
          "admin": "account which as admin rights (optional)",
          "engine": "ACTUS Engine of the asset",
          "extension": "address of the extension (optional)",
          "ownership": "ownership of the asset",
          "schedule": "schedule of the asset",
          "state": "initial state of the asset",
          "terms": "asset specific terms (COLLATerms)"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAccess(bytes32,bytes4,address)": {
        "details": "Can only be called by an authorized account.",
        "params": {
          "account": "address of the account to revoke access for",
          "assetId": "id of the asset",
          "methodSignature": "function / method signature (4 byte keccak256 hash of the method selector)"
        }
      },
      "setActor(bytes32,address)": {
        "params": {
          "actor": "address of the Actor contract",
          "assetId": "id of the asset"
        }
      },
      "setCounterpartyBeneficiary(bytes32,address)": {
        "details": "Can only be updated by the current counterparty beneficiary or by an authorized account.",
        "params": {
          "assetId": "id of the asset",
          "newCounterpartyBeneficiary": "address of the new beneficiary"
        }
      },
      "setCounterpartyObligor(bytes32,address)": {
        "details": "Can only be updated by an authorized account.",
        "params": {
          "assetId": "id of the asset",
          "newCounterpartyObligor": "address of the new counterparty obligor"
        }
      },
      "setCreatorBeneficiary(bytes32,address)": {
        "details": "Can only be updated by the current creator beneficiary or by an authorized account.",
        "params": {
          "assetId": "id of the asset",
          "newCreatorBeneficiary": "address of the new beneficiary"
        }
      },
      "setCreatorObligor(bytes32,address)": {
        "details": "Can only be updated by an authorized account.",
        "params": {
          "assetId": "id of the asset",
          "newCreatorObligor": "address of the new creator obligor"
        }
      },
      "setEngine(bytes32,address)": {
        "details": "Can only be set by authorized account.",
        "params": {
          "assetId": "id of the asset",
          "engine": "new engine address"
        }
      },
      "setExtension(bytes32,address)": {
        "details": "Can only be set by authorized account.",
        "params": {
          "assetId": "id of the asset",
          "extension": "new extension address"
        }
      },
      "setFinalizedState(bytes32,(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256))": {
        "details": "Can only be updated by the assets actor or by an authorized account.",
        "params": {
          "assetId": "id of the asset",
          "state": "next state of the asset"
        }
      },
      "setState(bytes32,(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256))": {
        "details": "Can only be updated by the assets actor or by an authorized account.",
        "params": {
          "assetId": "id of the asset",
          "state": "next state of the asset"
        }
      },
      "setTerms(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)))": {
        "details": "Can only be set by authorized account.",
        "params": {
          "assetId": "id of the asset",
          "terms": "new terms"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "COLLARegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveActor(address)": {
        "notice": "Approves the address of an actor contract e.g. for registering assets."
      },
      "getActor(bytes32)": {
        "notice": "Returns the address of the actor which is allowed to update the state of the asset."
      },
      "getEngine(bytes32)": {
        "notice": "Returns the address of a the ACTUS engine corresponding to the ContractType of an asset."
      },
      "getEpochOffset(uint8)": {
        "notice": "Returns the epoch offset for a given event type to determine the correct order of events if multiple events have the same timestamp"
      },
      "getEventAtIndex(bytes32,uint256)": {
        "notice": "Returns an event for a given position (index) in a schedule of a given asset."
      },
      "getExtension(bytes32)": {
        "notice": "Returns the address of the extension which is allowed to generate events for the asset."
      },
      "getFinalizedState(bytes32)": {
        "notice": "Returns the state of an asset."
      },
      "getNextScheduleIndex(bytes32)": {
        "notice": "Returns the index of the next event to be processed for a schedule of an asset."
      },
      "getNextScheduledEvent(bytes32)": {
        "notice": "Returns the next event to process."
      },
      "getNextUnderlyingEvent(bytes32)": {
        "notice": "If the underlying of the asset changes in performance to a covered performance, it returns the exerciseDate event."
      },
      "getOwnership(bytes32)": {
        "notice": "Retrieves the registered addresses of owners (creator, counterparty) of an asset."
      },
      "getSchedule(bytes32)": {
        "notice": "Convenience method for retrieving the entire schedule Not recommended to execute method on-chain (if schedule is too long the tx may run out of gas)"
      },
      "getScheduleLength(bytes32)": {
        "notice": "Returns the length of a schedule of a given asset."
      },
      "getState(bytes32)": {
        "notice": "Returns the state of an asset."
      },
      "getTerms(bytes32)": {
        "notice": "Returns the terms of an asset."
      },
      "grantAccess(bytes32,bytes4,address)": {
        "notice": "Grant access to an account to call a specific method on a specific asset."
      },
      "hasAccess(bytes32,bytes4,address)": {
        "notice": "Check whether an account is allowed to call a specific method on a specific asset."
      },
      "hasRootAccess(bytes32,address)": {
        "notice": "Check whether an account has root access for a specific asset."
      },
      "isEventSettled(bytes32,bytes32)": {
        "notice": "Returns true if an event of an assets schedule was settled"
      },
      "isRegistered(bytes32)": {
        "notice": "Returns if there is an asset registerd for a given assetId"
      },
      "markEventAsSettled(bytes32,bytes32,int256)": {
        "notice": "Mark an event as settled"
      },
      "popNextScheduledEvent(bytes32)": {
        "notice": "Increments the index of a schedule of an asset. (if max index is reached the index will be left unchanged)"
      },
      "registerAsset(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)),(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256),bytes32[],(address,address,address,address),address,address,address,address)": {
        "notice": "@param assetId id of the asset"
      },
      "revokeAccess(bytes32,bytes4,address)": {
        "notice": "Revoke access for an account to call a specific method on a specific asset."
      },
      "setActor(bytes32,address)": {
        "notice": "Set the address of the Actor contract which should be going forward."
      },
      "setCounterpartyBeneficiary(bytes32,address)": {
        "notice": "Updates the address of the default beneficiary of cashflows going to the counterparty."
      },
      "setCounterpartyObligor(bytes32,address)": {
        "notice": "Update the address of the counterparty which has to fulfill obligations for the counterparty of the asset."
      },
      "setCreatorBeneficiary(bytes32,address)": {
        "notice": "Update the address of the default beneficiary of cashflows going to the creator."
      },
      "setCreatorObligor(bytes32,address)": {
        "notice": "Update the address of the obligor which has to fulfill obligations for the creator of the asset."
      },
      "setEngine(bytes32,address)": {
        "notice": "Set the engine address which should be used for the asset going forward."
      },
      "setExtension(bytes32,address)": {
        "notice": "Set the extension address which should be used for the asset going forward."
      },
      "setFinalizedState(bytes32,(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256))": {
        "notice": "Sets next finalized state of an asset."
      },
      "setState(bytes32,(uint8,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256))": {
        "notice": "Sets next state of an asset."
      },
      "setTerms(bytes32,(uint8,uint8,uint8,uint8,uint8,uint8,bytes32,address,address,address,uint256,uint256,uint256,uint256,uint256,int256,int256,int256,int256,int256,(uint256,uint8,bool),(uint256,uint8,bool),(uint256,uint8,uint8,bool)))": {
        "notice": "Set the terms of the asset"
      }
    },
    "notice": "Registry for ACTUS Protocol assets",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 30,
        "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 27200,
        "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
        "label": "assets",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Asset)27192_storage)"
      },
      {
        "astId": 26862,
        "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
        "label": "approvedActors",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_enum(EventType)1814": {
        "encoding": "inplace",
        "label": "enum EventType",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(Asset)27192_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Asset)",
        "numberOfBytes": "32",
        "value": "t_struct(Asset)27192_storage"
      },
      "t_mapping(t_bytes32,t_struct(Settlement)27161_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Settlement)",
        "numberOfBytes": "32",
        "value": "t_struct(Settlement)27161_storage"
      },
      "t_mapping(t_bytes4,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_enum(EventType)1814,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(EventType)1814",
        "label": "mapping(enum EventType => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(Asset)27192_storage": {
        "encoding": "inplace",
        "label": "struct Asset",
        "members": [
          {
            "astId": 27163,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "isSet",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 27165,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "engine",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 27167,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "actor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 27169,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "extension",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 27171,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "schedule",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(Schedule)29746_storage"
          },
          {
            "astId": 27173,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "ownership",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(AssetOwnership)29729_storage"
          },
          {
            "astId": 27179,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "access",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_bytes4,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 27183,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "packedTerms",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 27187,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "packedState",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 27191,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "settlement",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_bytes32,t_struct(Settlement)27161_storage)"
          }
        ],
        "numberOfBytes": "544"
      },
      "t_struct(AssetOwnership)29729_storage": {
        "encoding": "inplace",
        "label": "struct AssetOwnership",
        "members": [
          {
            "astId": 29722,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "creatorObligor",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 29724,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "creatorBeneficiary",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 29726,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "counterpartyObligor",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 29728,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "counterpartyBeneficiary",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Schedule)29746_storage": {
        "encoding": "inplace",
        "label": "struct Schedule",
        "members": [
          {
            "astId": 29733,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "lastScheduleTimeOfCyclicEvent",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_enum(EventType)1814,t_uint256)"
          },
          {
            "astId": 29737,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "events",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_bytes32)"
          },
          {
            "astId": 29739,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "length",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 29741,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "nextScheduleIndex",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 29743,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "pendingEvent",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes32"
          },
          {
            "astId": 29745,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "lastNonCyclicEvent",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Settlement)27161_storage": {
        "encoding": "inplace",
        "label": "struct Settlement",
        "members": [
          {
            "astId": 27158,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "isSettled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 27160,
            "contract": "contracts/Core/COLLA/COLLARegistry.sol:COLLARegistry",
            "label": "payoff",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}