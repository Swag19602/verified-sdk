/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class SimpleRestrictedRuleEngine extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): SimpleRestrictedRuleEngine;
  methods: {
    FAILURE_NON_WHITELIST(): TransactionObject<string>;

    FAILURE_NON_WHITELIST_MESSAGE(): TransactionObject<string>;

    SUCCESS_CODE(): TransactionObject<string>;

    SUCCESS_MESSAGE(): TransactionObject<string>;

    UNKNOWN_ERROR(): TransactionObject<string>;

    addAdmin(adminToAdd: string): TransactionObject<void>;

    addToWhitelist(
      addressToAdd: string,
      whitelist: number | string
    ): TransactionObject<void>;

    addressWhitelists(arg0: string): TransactionObject<string>;

    administrators(arg0: string): TransactionObject<boolean>;

    checkWhitelistAllowed(
      sender: string,
      receiver: string
    ): TransactionObject<boolean>;

    detectTransferRestriction(
      from: string,
      to: string,
      arg2: number | string
    ): TransactionObject<string>;

    disableRestrictions(): TransactionObject<void>;

    isAdministrator(addressToTest: string): TransactionObject<boolean>;

    isRestrictionEnabled(): TransactionObject<boolean>;

    messageForTransferRestriction(
      restrictionCode: number | string
    ): TransactionObject<string>;

    outboundWhitelistsEnabled(
      arg0: number | string,
      arg1: number | string
    ): TransactionObject<boolean>;

    owner(): TransactionObject<string>;

    removeAdmin(adminToRemove: string): TransactionObject<void>;

    removeFromWhitelist(addressToRemove: string): TransactionObject<void>;

    renounceOwnership(): TransactionObject<void>;

    rule(arg0: number | string): TransactionObject<string>;

    ruleLength(): TransactionObject<string>;

    rules(): TransactionObject<string[]>;

    setRules(arg0: string[]): TransactionObject<void>;

    transferOwnership(newOwner: string): TransactionObject<void>;

    updateOutboundWhitelistEnabled(
      sourceWhitelist: number | string,
      destinationWhitelist: number | string,
      newEnabledValue: boolean
    ): TransactionObject<void>;

    validateTransfer(
      from: string,
      to: string,
      amount: number | string
    ): TransactionObject<boolean>;
  };
  events: {
    AddressAddedToWhitelist: ContractEvent<{
      addedAddress: string;
      whitelist: string;
      addedBy: string;
      0: string;
      1: string;
      2: string;
    }>;
    AddressRemovedFromWhitelist: ContractEvent<{
      removedAddress: string;
      whitelist: string;
      removedBy: string;
      0: string;
      1: string;
      2: string;
    }>;
    AdminAdded: ContractEvent<{
      addedAdmin: string;
      addedBy: string;
      0: string;
      1: string;
    }>;
    AdminRemoved: ContractEvent<{
      removedAdmin: string;
      removedBy: string;
      0: string;
      1: string;
    }>;
    OutboundWhitelistUpdated: ContractEvent<{
      updatedBy: string;
      sourceWhitelist: string;
      destinationWhitelist: string;
      from: boolean;
      to: boolean;
      0: string;
      1: string;
      2: string;
      3: boolean;
      4: boolean;
    }>;
    OwnershipTransferred: ContractEvent<{
      previousOwner: string;
      newOwner: string;
      0: string;
      1: string;
    }>;
    RestrictionsDisabled: ContractEvent<string>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
